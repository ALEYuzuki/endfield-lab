"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity+mutator@3.99.0_@types+react@18.3.24";
exports.ids = ["vendor-chunks/@sanity+mutator@3.99.0_@types+react@18.3.24"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@sanity+mutator@3.99.0_@types+react@18.3.24/node_modules/@sanity/mutator/lib/index.mjs":
/*!********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sanity+mutator@3.99.0_@types+react@18.3.24/node_modules/@sanity/mutator/lib/index.mjs ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferedDocument: () => (/* binding */ BufferedDocument),\n/* harmony export */   Mutation: () => (/* binding */ Mutation),\n/* harmony export */   arrayToJSONMatchPath: () => (/* binding */ arrayToJSONMatchPath),\n/* harmony export */   extract: () => (/* binding */ extract),\n/* harmony export */   extractWithPath: () => (/* binding */ extractWithPath)\n/* harmony export */ });\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isEqual.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"(ssr)/../node_modules/.pnpm/debug@4.4.3_supports-color@8.1.1/node_modules/debug/src/index.js\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/flatten.js\");\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/../node_modules/.pnpm/@sanity+diff-match-patch@3.2.0/node_modules/@sanity/diff-match-patch/dist/index.js\");\n/* harmony import */ var lodash_max_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/max.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/max.js\");\n/* harmony import */ var lodash_min_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/min.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/min.js\");\n/* harmony import */ var _sanity_uuid__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @sanity/uuid */ \"(ssr)/../node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var lodash_compact_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/compact.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/compact.js\");\n\n\n\n\n\n\n\n\nconst debug = debug__WEBPACK_IMPORTED_MODULE_1__(\"mutator-document\");\nclass ImmutableAccessor {\n  _value;\n  path;\n  constructor(value, path) {\n    this._value = value, this.path = path || [];\n  }\n  containerType() {\n    return Array.isArray(this._value) ? \"array\" : this._value !== null && typeof this._value == \"object\" ? \"object\" : \"primitive\";\n  }\n  // Common reader, supported by all containers\n  get() {\n    return this._value;\n  }\n  // Array reader\n  length() {\n    if (!Array.isArray(this._value))\n      throw new Error(\"Won't return length of non-indexable _value\");\n    return this._value.length;\n  }\n  getIndex(i) {\n    return Array.isArray(this._value) ? i >= this.length() ? null : new ImmutableAccessor(this._value[i], this.path.concat(i)) : !1;\n  }\n  // Object reader\n  hasAttribute(key) {\n    return isRecord$1(this._value) ? this._value.hasOwnProperty(key) : !1;\n  }\n  attributeKeys() {\n    return isRecord$1(this._value) ? Object.keys(this._value) : [];\n  }\n  getAttribute(key) {\n    if (!isRecord$1(this._value))\n      throw new Error(\"getAttribute only applies to plain objects\");\n    return this.hasAttribute(key) ? new ImmutableAccessor(this._value[key], this.path.concat(key)) : null;\n  }\n  // Common writer, supported by all containers\n  set(value) {\n    return value === this._value ? this : new ImmutableAccessor(value, this.path);\n  }\n  // array writer interface\n  setIndex(i, value) {\n    if (!Array.isArray(this._value))\n      throw new Error(\"setIndex only applies to arrays\");\n    if (Object.is(value, this._value[i]))\n      return this;\n    const nextValue = this._value.slice();\n    return nextValue[i] = value, new ImmutableAccessor(nextValue, this.path);\n  }\n  setIndexAccessor(i, accessor) {\n    return this.setIndex(i, accessor.get());\n  }\n  unsetIndices(indices) {\n    if (!Array.isArray(this._value))\n      throw new Error(\"unsetIndices only applies to arrays\");\n    const length = this._value.length, nextValue = [];\n    for (let i = 0; i < length; i++)\n      indices.indexOf(i) === -1 && nextValue.push(this._value[i]);\n    return new ImmutableAccessor(nextValue, this.path);\n  }\n  insertItemsAt(pos, items) {\n    if (!Array.isArray(this._value))\n      throw new Error(\"insertItemsAt only applies to arrays\");\n    let nextValue;\n    return this._value.length === 0 && pos === 0 ? nextValue = items : nextValue = this._value.slice(0, pos).concat(items).concat(this._value.slice(pos)), new ImmutableAccessor(nextValue, this.path);\n  }\n  // Object writer interface\n  setAttribute(key, value) {\n    if (!isRecord$1(this._value))\n      throw new Error(\"Unable to set attribute of non-object container\");\n    if (Object.is(value, this._value[key]))\n      return this;\n    const nextValue = Object.assign({}, this._value, { [key]: value });\n    return new ImmutableAccessor(nextValue, this.path);\n  }\n  setAttributeAccessor(key, accessor) {\n    return this.setAttribute(key, accessor.get());\n  }\n  unsetAttribute(key) {\n    if (!isRecord$1(this._value))\n      throw new Error(\"Unable to unset attribute of non-object container\");\n    const nextValue = Object.assign({}, this._value);\n    return delete nextValue[key], new ImmutableAccessor(nextValue, this.path);\n  }\n}\nfunction isRecord$1(value) {\n  return value !== null && typeof value == \"object\";\n}\nfunction isRecord(value) {\n  return value !== null && typeof value == \"object\";\n}\nconst IS_DOTTABLE = /^[a-z_$]+/;\nfunction arrayToJSONMatchPath(pathArray) {\n  let path = \"\";\n  return pathArray.forEach((segment, index) => {\n    path += stringifySegment(segment, index === 0);\n  }), path;\n}\nfunction stringifySegment(segment, hasLeading) {\n  if (typeof segment == \"number\")\n    return `[${segment}]`;\n  if (isRecord(segment)) {\n    const seg = segment;\n    return Object.keys(segment).map((key) => isPrimitiveValue(seg[key]) ? `[${key}==\"${seg[key]}\"]` : \"\").join(\"\");\n  }\n  return typeof segment == \"string\" && IS_DOTTABLE.test(segment) ? hasLeading ? segment : `.${segment}` : `['${segment}']`;\n}\nfunction isPrimitiveValue(val) {\n  switch (typeof val) {\n    case \"number\":\n    case \"string\":\n    case \"boolean\":\n      return !0;\n    default:\n      return !1;\n  }\n}\nfunction descend$1(tail) {\n  const [head, newTail] = splitIfPath(tail);\n  if (!head)\n    throw new Error(\"Head cannot be null\");\n  return spreadIfUnionHead(head, newTail);\n}\nfunction splitIfPath(tail) {\n  if (tail.type !== \"path\")\n    return [tail, null];\n  const nodes = tail.nodes;\n  return nodes.length === 0 ? [null, null] : nodes.length === 1 ? [nodes[0], null] : [nodes[0], { type: \"path\", nodes: nodes.slice(1) }];\n}\nfunction concatPaths(path1, path2) {\n  if (!path1 && !path2)\n    return null;\n  const nodes1 = path1 ? path1.nodes : [], nodes2 = path2 ? path2.nodes : [];\n  return {\n    type: \"path\",\n    nodes: nodes1.concat(nodes2)\n  };\n}\nfunction spreadIfUnionHead(head, tail) {\n  return head.type !== \"union\" ? [[head, tail]] : head.nodes.map((node) => {\n    if (node.type === \"path\") {\n      const [subHead, subTail] = splitIfPath(node);\n      return [subHead, concatPaths(subTail, tail)];\n    }\n    return [node, tail];\n  });\n}\nconst digitChar = /[0-9]/, attributeCharMatcher = /^[a-zA-Z0-9_]$/, attributeFirstCharMatcher = /^[a-zA-Z_]$/, symbols = {\n  // NOTE: These are compared against in order of definition,\n  // thus '==' must come before '=', '>=' before '>', etc.\n  operator: [\"..\", \".\", \",\", \":\", \"?\"],\n  comparator: [\">=\", \"<=\", \"<\", \">\", \"==\", \"!=\"],\n  keyword: [\"$\", \"@\"],\n  boolean: [\"true\", \"false\"],\n  paren: [\"[\", \"]\"]\n}, symbolClasses = Object.keys(symbols);\nclass Tokenizer {\n  source;\n  i;\n  length;\n  tokenizers;\n  constructor(path) {\n    this.source = path, this.length = path.length, this.i = 0, this.tokenizers = [\n      this.tokenizeSymbol,\n      this.tokenizeIdentifier,\n      this.tokenizeNumber,\n      this.tokenizeQuoted\n    ].map((fn) => fn.bind(this));\n  }\n  tokenize() {\n    const result = [];\n    for (; !this.EOF(); ) {\n      this.chompWhitespace();\n      let token = null;\n      if (!this.tokenizers.some((tokenizer) => (token = tokenizer(), !!token)) || !token)\n        throw new Error(`Invalid tokens in jsonpath '${this.source}' @ ${this.i}`);\n      result.push(token);\n    }\n    return result;\n  }\n  takeWhile(fn) {\n    const start = this.i;\n    let result = \"\";\n    for (; !this.EOF(); ) {\n      const nextChar = fn(this.source[this.i]);\n      if (nextChar === null)\n        break;\n      result += nextChar, this.i++;\n    }\n    return this.i === start ? null : result;\n  }\n  EOF() {\n    return this.i >= this.length;\n  }\n  peek() {\n    return this.EOF() ? null : this.source[this.i];\n  }\n  consume(str) {\n    if (this.i + str.length > this.length)\n      throw new Error(`Expected ${str} at end of jsonpath`);\n    if (str === this.source.slice(this.i, this.i + str.length))\n      this.i += str.length;\n    else\n      throw new Error(`Expected \"${str}\", but source contained \"${this.source.slice()}`);\n  }\n  // Tries to match the upcoming bit of string with the provided string. If it matches, returns\n  // the string, then advances the read pointer to the next bit. If not, returns null and nothing\n  // happens.\n  tryConsume(str) {\n    if (this.i + str.length > this.length)\n      return null;\n    if (str === this.source.slice(this.i, this.i + str.length)) {\n      if (str[0].match(attributeCharMatcher) && this.length > this.i + str.length) {\n        const nextChar = this.source[this.i + str.length];\n        if (nextChar && nextChar.match(attributeCharMatcher))\n          return null;\n      }\n      return this.i += str.length, str;\n    }\n    return null;\n  }\n  chompWhitespace() {\n    this.takeWhile((char) => char === \" \" ? \"\" : null);\n  }\n  tokenizeQuoted() {\n    const quote = this.peek();\n    if (quote === \"'\" || quote === '\"') {\n      this.consume(quote);\n      let escape = !1;\n      const inner = this.takeWhile((char) => escape ? (escape = !1, char) : char === \"\\\\\" ? (escape = !0, \"\") : char != quote ? char : null);\n      return this.consume(quote), {\n        type: \"quoted\",\n        value: inner,\n        quote: quote === '\"' ? \"double\" : \"single\"\n      };\n    }\n    return null;\n  }\n  tokenizeIdentifier() {\n    let first = !0;\n    const identifier = this.takeWhile((char) => first ? (first = !1, char.match(attributeFirstCharMatcher) ? char : null) : char.match(attributeCharMatcher) ? char : null);\n    return identifier !== null ? {\n      type: \"identifier\",\n      name: identifier\n    } : null;\n  }\n  tokenizeNumber() {\n    const start = this.i;\n    let dotSeen = !1, digitSeen = !1, negative = !1;\n    this.peek() === \"-\" && (negative = !0, this.consume(\"-\"));\n    const number = this.takeWhile((char) => char === \".\" && !dotSeen && digitSeen ? (dotSeen = !0, char) : (digitSeen = !0, char.match(digitChar) ? char : null));\n    return number !== null ? {\n      type: \"number\",\n      value: negative ? -number : +number,\n      raw: negative ? `-${number}` : number\n    } : (this.i = start, null);\n  }\n  tokenizeSymbol() {\n    for (const symbolClass of symbolClasses) {\n      const symbol = symbols[symbolClass].find((pattern) => this.tryConsume(pattern));\n      if (symbol)\n        return {\n          type: symbolClass,\n          symbol\n        };\n    }\n    return null;\n  }\n}\nfunction tokenize(jsonpath) {\n  return new Tokenizer(jsonpath).tokenize();\n}\nclass Parser {\n  tokens;\n  length;\n  i;\n  constructor(path) {\n    this.tokens = tokenize(path), this.length = this.tokens.length, this.i = 0;\n  }\n  parse() {\n    return this.parsePath();\n  }\n  EOF() {\n    return this.i >= this.length;\n  }\n  // Look at upcoming token\n  peek() {\n    return this.EOF() ? null : this.tokens[this.i];\n  }\n  consume() {\n    const result = this.peek();\n    return this.i += 1, result;\n  }\n  // Return next token if it matches the pattern\n  probe(pattern) {\n    const token = this.peek();\n    if (!token)\n      return null;\n    const record = token;\n    return Object.keys(pattern).every((key) => key in token && pattern[key] === record[key]) ? token : null;\n  }\n  // Return and consume next token if it matches the pattern\n  match(pattern) {\n    return this.probe(pattern) ? this.consume() : null;\n  }\n  parseAttribute() {\n    const token = this.match({ type: \"identifier\" });\n    if (token && token.type === \"identifier\")\n      return {\n        type: \"attribute\",\n        name: token.name\n      };\n    const quoted = this.match({ type: \"quoted\", quote: \"single\" });\n    return quoted && quoted.type === \"quoted\" ? {\n      type: \"attribute\",\n      name: quoted.value || \"\"\n    } : null;\n  }\n  parseAlias() {\n    return this.match({ type: \"keyword\", symbol: \"@\" }) || this.match({ type: \"keyword\", symbol: \"$\" }) ? {\n      type: \"alias\",\n      target: \"self\"\n    } : null;\n  }\n  parseNumber() {\n    const token = this.match({ type: \"number\" });\n    return token && token.type === \"number\" ? {\n      type: \"number\",\n      value: token.value\n    } : null;\n  }\n  parseNumberValue() {\n    const expr = this.parseNumber();\n    return expr ? expr.value : null;\n  }\n  parseSliceSelector() {\n    const start = this.i, rangeStart = this.parseNumberValue();\n    if (!this.match({ type: \"operator\", symbol: \":\" }))\n      return rangeStart === null ? (this.i = start, null) : { type: \"index\", value: rangeStart };\n    const result = {\n      type: \"range\",\n      start: rangeStart,\n      end: this.parseNumberValue()\n    };\n    return this.match({ type: \"operator\", symbol: \":\" }) && (result.step = this.parseNumberValue()), result.start === null && result.end === null ? (this.i = start, null) : result;\n  }\n  parseValueReference() {\n    return this.parseAttribute() || this.parseSliceSelector();\n  }\n  parseLiteralValue() {\n    const literalString = this.match({ type: \"quoted\", quote: \"double\" });\n    if (literalString && literalString.type === \"quoted\")\n      return {\n        type: \"string\",\n        value: literalString.value || \"\"\n      };\n    const literalBoolean = this.match({ type: \"boolean\" });\n    return literalBoolean && literalBoolean.type === \"boolean\" ? {\n      type: \"boolean\",\n      value: literalBoolean.symbol === \"true\"\n    } : this.parseNumber();\n  }\n  // TODO: Reorder constraints so that literal value is always on rhs, and variable is always\n  // on lhs.\n  parseFilterExpression() {\n    const start = this.i, expr = this.parseAttribute() || this.parseAlias();\n    if (!expr)\n      return null;\n    if (this.match({ type: \"operator\", symbol: \"?\" }))\n      return {\n        type: \"constraint\",\n        operator: \"?\",\n        lhs: expr\n      };\n    const binOp = this.match({ type: \"comparator\" });\n    if (!binOp || binOp.type !== \"comparator\")\n      return this.i = start, null;\n    const lhs = expr, rhs = this.parseLiteralValue();\n    if (!rhs)\n      throw new Error(`Operator ${binOp.symbol} needs a literal value at the right hand side`);\n    return {\n      type: \"constraint\",\n      operator: binOp.symbol,\n      lhs,\n      rhs\n    };\n  }\n  parseExpression() {\n    return this.parseFilterExpression() || this.parseValueReference();\n  }\n  parseUnion() {\n    if (!this.match({ type: \"paren\", symbol: \"[\" }))\n      return null;\n    const terms = [];\n    let expr = this.parseFilterExpression() || this.parsePath() || this.parseValueReference();\n    for (; expr && (terms.push(expr), !this.match({ type: \"paren\", symbol: \"]\" })); ) {\n      if (!this.match({ type: \"operator\", symbol: \",\" }))\n        throw new Error(\"Expected ]\");\n      if (expr = this.parseFilterExpression() || this.parsePath() || this.parseValueReference(), !expr)\n        throw new Error(\"Expected expression following ','\");\n    }\n    return {\n      type: \"union\",\n      nodes: terms\n    };\n  }\n  parseRecursive() {\n    if (!this.match({ type: \"operator\", symbol: \"..\" }))\n      return null;\n    const subpath = this.parsePath();\n    if (!subpath)\n      throw new Error(\"Expected path following '..' operator\");\n    return {\n      type: \"recursive\",\n      term: subpath\n    };\n  }\n  parsePath() {\n    const nodes = [], expr = this.parseAttribute() || this.parseUnion() || this.parseRecursive();\n    if (!expr)\n      return null;\n    for (nodes.push(expr); !this.EOF(); )\n      if (this.match({ type: \"operator\", symbol: \".\" })) {\n        const attr = this.parseAttribute();\n        if (!attr)\n          throw new Error(\"Expected attribute name following '.\");\n        nodes.push(attr);\n        continue;\n      } else if (this.probe({ type: \"paren\", symbol: \"[\" })) {\n        const union = this.parseUnion();\n        if (!union)\n          throw new Error(\"Expected union following '['\");\n        nodes.push(union);\n      } else {\n        const recursive = this.parseRecursive();\n        recursive && nodes.push(recursive);\n        break;\n      }\n    return nodes.length === 1 ? nodes[0] : {\n      type: \"path\",\n      nodes\n    };\n  }\n}\nfunction parseJsonPath(path) {\n  const parsed = new Parser(path).parse();\n  if (!parsed)\n    throw new Error(`Failed to parse JSON path \"${path}\"`);\n  return parsed;\n}\nfunction toPath(expr) {\n  return toPathInner(expr, !1);\n}\nfunction toPathInner(expr, inUnion) {\n  switch (expr.type) {\n    case \"attribute\":\n      return expr.name;\n    case \"alias\":\n      return expr.target === \"self\" ? \"@\" : \"$\";\n    case \"number\":\n      return `${expr.value}`;\n    case \"range\": {\n      const result = [];\n      return inUnion || result.push(\"[\"), expr.start && result.push(`${expr.start}`), result.push(\":\"), expr.end && result.push(`${expr.end}`), expr.step && result.push(`:${expr.step}`), inUnion || result.push(\"]\"), result.join(\"\");\n    }\n    case \"index\":\n      return inUnion ? `${expr.value}` : `[${expr.value}]`;\n    case \"constraint\": {\n      const rhs = expr.rhs ? ` ${toPathInner(expr.rhs, !1)}` : \"\", inner = `${toPathInner(expr.lhs, !1)} ${expr.operator}${rhs}`;\n      return inUnion ? inner : `[${inner}]`;\n    }\n    case \"string\":\n      return JSON.stringify(expr.value);\n    case \"path\": {\n      const result = [], nodes = expr.nodes.slice();\n      for (; nodes.length > 0; ) {\n        const node = nodes.shift();\n        node && result.push(toPath(node));\n        const upcoming = nodes[0];\n        upcoming && toPathInner(upcoming, !1)[0] !== \"[\" && result.push(\".\");\n      }\n      return result.join(\"\");\n    }\n    case \"union\":\n      return `[${expr.nodes.map((e) => toPathInner(e, !0)).join(\",\")}]`;\n    default:\n      throw new Error(`Unknown node type ${expr.type}`);\n    case \"recursive\":\n      return `..${toPathInner(expr.term, !1)}`;\n  }\n}\nclass Expression {\n  expr;\n  constructor(expr) {\n    if (!expr)\n      throw new Error(\"Attempted to create Expression from null-value\");\n    if (\"expr\" in expr ? this.expr = expr.expr : this.expr = expr, !(\"type\" in this.expr))\n      throw new Error(\"Attempt to create Expression for expression with no type\");\n  }\n  isPath() {\n    return this.expr.type === \"path\";\n  }\n  isUnion() {\n    return this.expr.type === \"union\";\n  }\n  isCollection() {\n    return this.isPath() || this.isUnion();\n  }\n  isConstraint() {\n    return this.expr.type === \"constraint\";\n  }\n  isRecursive() {\n    return this.expr.type === \"recursive\";\n  }\n  isExistenceConstraint() {\n    return this.expr.type === \"constraint\" && this.expr.operator === \"?\";\n  }\n  isIndex() {\n    return this.expr.type === \"index\";\n  }\n  isRange() {\n    return this.expr.type === \"range\";\n  }\n  expandRange(probe) {\n    const probeLength = () => {\n      if (!probe)\n        throw new Error(\"expandRange() required a probe that was not passed\");\n      return probe.length();\n    };\n    let start = \"start\" in this.expr && this.expr.start || 0;\n    start = interpretNegativeIndex(start, probe);\n    let end = \"end\" in this.expr && this.expr.end || probeLength();\n    end = interpretNegativeIndex(end, probe);\n    const step = \"step\" in this.expr && this.expr.step || 1;\n    return { start, end, step };\n  }\n  isAttributeReference() {\n    return this.expr.type === \"attribute\";\n  }\n  // Is a range or index -> something referencing indexes\n  isIndexReference() {\n    return this.isIndex() || this.isRange();\n  }\n  name() {\n    return \"name\" in this.expr ? this.expr.name : \"\";\n  }\n  isSelfReference() {\n    return this.expr.type === \"alias\" && this.expr.target === \"self\";\n  }\n  constraintTargetIsSelf() {\n    return this.expr.type === \"constraint\" && this.expr.lhs.type === \"alias\" && this.expr.lhs.target === \"self\";\n  }\n  constraintTargetIsAttribute() {\n    return this.expr.type === \"constraint\" && this.expr.lhs.type === \"attribute\";\n  }\n  testConstraint(probe) {\n    const expr = this.expr;\n    if (expr.type === \"constraint\" && expr.lhs.type === \"alias\" && expr.lhs.target === \"self\") {\n      if (probe.containerType() !== \"primitive\")\n        return !1;\n      if (expr.type === \"constraint\" && expr.operator === \"?\")\n        return !0;\n      const lhs2 = probe.get(), rhs2 = expr.rhs && \"value\" in expr.rhs ? expr.rhs.value : void 0;\n      return testBinaryOperator(lhs2, expr.operator, rhs2);\n    }\n    if (expr.type !== \"constraint\")\n      return !1;\n    const lhs = expr.lhs;\n    if (!lhs)\n      throw new Error(\"No LHS of expression\");\n    if (lhs.type !== \"attribute\")\n      throw new Error(`Constraint target ${lhs.type} not supported`);\n    if (probe.containerType() !== \"object\")\n      return !1;\n    const lhsValue = probe.getAttribute(lhs.name);\n    if (lhsValue == null || lhsValue.containerType() !== \"primitive\")\n      return !1;\n    if (this.isExistenceConstraint())\n      return !0;\n    const rhs = expr.rhs && \"value\" in expr.rhs ? expr.rhs.value : void 0;\n    return testBinaryOperator(lhsValue.get(), expr.operator, rhs);\n  }\n  pathNodes() {\n    return this.expr.type === \"path\" ? this.expr.nodes : [this.expr];\n  }\n  prepend(node) {\n    return node ? new Expression({\n      type: \"path\",\n      nodes: node.pathNodes().concat(this.pathNodes())\n    }) : this;\n  }\n  concat(other) {\n    return other ? other.prepend(this) : this;\n  }\n  descend() {\n    return descend$1(this.expr).map((headTail) => {\n      const [head, tail] = headTail;\n      return {\n        head: head ? new Expression(head) : null,\n        tail: tail ? new Expression(tail) : null\n      };\n    });\n  }\n  unwrapRecursive() {\n    if (this.expr.type !== \"recursive\")\n      throw new Error(`Attempt to unwrap recursive on type ${this.expr.type}`);\n    return new Expression(this.expr.term);\n  }\n  toIndicies(probe) {\n    if (this.expr.type !== \"index\" && this.expr.type !== \"range\")\n      throw new Error(\"Node cannot be converted to indexes\");\n    if (this.expr.type === \"index\")\n      return [interpretNegativeIndex(this.expr.value, probe)];\n    const result = [], range = this.expandRange(probe);\n    let { start, end } = range;\n    range.step < 0 && ([start, end] = [end, start]);\n    for (let i = start; i < end; i++)\n      result.push(i);\n    return result;\n  }\n  toFieldReferences() {\n    if (this.isIndexReference())\n      return this.toIndicies();\n    if (this.expr.type === \"attribute\")\n      return [this.expr.name];\n    throw new Error(`Can't convert ${this.expr.type} to field references`);\n  }\n  toString() {\n    return toPath(this.expr);\n  }\n  static fromPath(path) {\n    const parsed = parseJsonPath(path);\n    if (!parsed)\n      throw new Error(`Failed to parse path \"${path}\"`);\n    return new Expression(parsed);\n  }\n  static attributeReference(name) {\n    return new Expression({\n      type: \"attribute\",\n      name\n    });\n  }\n  static indexReference(i) {\n    return new Expression({\n      type: \"index\",\n      value: i\n    });\n  }\n}\nfunction testBinaryOperator(lhsValue, operator, rhsValue) {\n  switch (operator) {\n    case \">\":\n      return lhsValue > rhsValue;\n    case \">=\":\n      return lhsValue >= rhsValue;\n    case \"<\":\n      return lhsValue < rhsValue;\n    case \"<=\":\n      return lhsValue <= rhsValue;\n    case \"==\":\n      return lhsValue === rhsValue;\n    case \"!=\":\n      return lhsValue !== rhsValue;\n    default:\n      throw new Error(`Unsupported binary operator ${operator}`);\n  }\n}\nfunction interpretNegativeIndex(index, probe) {\n  if (index >= 0)\n    return index;\n  if (!probe)\n    throw new Error(\"interpretNegativeIndex() must have a probe when < 0\");\n  return index + probe.length();\n}\nclass Descender {\n  head;\n  tail;\n  constructor(head, tail) {\n    this.head = head, this.tail = tail;\n  }\n  // Iterate this descender once processing any constraints that are\n  // resolvable on the current value. Returns an array of new descenders\n  // that are guaranteed to be without constraints in the head\n  iterate(probe) {\n    let result = [this];\n    if (this.head && this.head.isConstraint()) {\n      let anyConstraints = !0;\n      for (; anyConstraints; )\n        result = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_2__(\n          result.map((descender) => descender.iterateConstraints(probe))\n        ), anyConstraints = result.some((descender) => descender.head && descender.head.isConstraint());\n    }\n    return result;\n  }\n  isRecursive() {\n    return !!(this.head && this.head.isRecursive());\n  }\n  hasArrived() {\n    return this.head === null && this.tail === null;\n  }\n  extractRecursives() {\n    if (this.head && this.head.isRecursive()) {\n      const term = this.head.unwrapRecursive();\n      return new Descender(null, term.concat(this.tail)).descend();\n    }\n    return [];\n  }\n  iterateConstraints(probe) {\n    const head = this.head;\n    if (head === null || !head.isConstraint())\n      return [this];\n    const result = [];\n    if (probe.containerType() === \"primitive\" && head.constraintTargetIsSelf())\n      return head.testConstraint(probe) && result.push(...this.descend()), result;\n    if (probe.containerType() === \"array\") {\n      const length = probe.length();\n      for (let i = 0; i < length; i++) {\n        const constraint = probe.getIndex(i);\n        constraint && head.testConstraint(constraint) && result.push(new Descender(new Expression({ type: \"index\", value: i }), this.tail));\n      }\n      return result;\n    }\n    return probe.containerType() === \"object\" ? head.constraintTargetIsSelf() ? [] : head.testConstraint(probe) ? this.descend() : result : result;\n  }\n  descend() {\n    return this.tail ? this.tail.descend().map((ht) => new Descender(ht.head, ht.tail)) : [new Descender(null, null)];\n  }\n  toString() {\n    const result = [\"<\"];\n    return this.head && result.push(this.head.toString()), result.push(\"|\"), this.tail && result.push(this.tail.toString()), result.push(\">\"), result.join(\"\");\n  }\n}\nclass Matcher {\n  active;\n  recursives;\n  payload;\n  constructor(active, parent) {\n    this.active = active || [], parent ? (this.recursives = parent.recursives, this.payload = parent.payload) : this.recursives = [], this.extractRecursives();\n  }\n  setPayload(payload) {\n    return this.payload = payload, this;\n  }\n  // Moves any recursive descenders onto the recursive track, removing them from\n  // the active set\n  extractRecursives() {\n    this.active = this.active.filter((descender) => descender.isRecursive() ? (this.recursives.push(...descender.extractRecursives()), !1) : !0);\n  }\n  // Find recursives that are relevant now and should be considered part of the active set\n  activeRecursives(probe) {\n    return this.recursives.filter((descender) => {\n      const head = descender.head;\n      return head ? head.isConstraint() || probe.containerType() === \"array\" && head.isIndexReference() ? !0 : probe.containerType() === \"object\" ? head.isAttributeReference() && probe.hasAttribute(head.name()) : !1 : !1;\n    });\n  }\n  match(probe) {\n    return this.iterate(probe).extractMatches(probe);\n  }\n  iterate(probe) {\n    const newActiveSet = [];\n    return this.active.concat(this.activeRecursives(probe)).forEach((descender) => {\n      newActiveSet.push(...descender.iterate(probe));\n    }), new Matcher(newActiveSet, this);\n  }\n  // Returns true if any of the descenders in the active or recursive set\n  // consider the current state a final destination\n  isDestination() {\n    return this.active.some((descender) => descender.hasArrived());\n  }\n  hasRecursives() {\n    return this.recursives.length > 0;\n  }\n  // Returns any payload delivieries and leads that needs to be followed to complete\n  // the process.\n  extractMatches(probe) {\n    const leads = [], targets = [];\n    if (this.active.forEach((descender) => {\n      if (descender.hasArrived()) {\n        targets.push(\n          new Expression({\n            type: \"alias\",\n            target: \"self\"\n          })\n        );\n        return;\n      }\n      const descenderHead = descender.head;\n      if (descenderHead && !(probe.containerType() === \"array\" && !descenderHead.isIndexReference()) && !(probe.containerType() === \"object\" && !descenderHead.isAttributeReference()))\n        if (descender.tail) {\n          const matcher = new Matcher(descender.descend(), this);\n          descenderHead.toFieldReferences().forEach(() => {\n            leads.push({\n              target: descenderHead,\n              matcher\n            });\n          });\n        } else\n          targets.push(descenderHead);\n    }), this.hasRecursives()) {\n      const recursivesMatcher = new Matcher([], this);\n      if (probe.containerType() === \"array\") {\n        const length = probe.length();\n        for (let i = 0; i < length; i++)\n          leads.push({\n            target: Expression.indexReference(i),\n            matcher: recursivesMatcher\n          });\n      } else probe.containerType() === \"object\" && probe.attributeKeys().forEach((name) => {\n        leads.push({\n          target: Expression.attributeReference(name),\n          matcher: recursivesMatcher\n        });\n      });\n    }\n    return targets.length > 0 ? { leads, delivery: { targets, payload: this.payload } } : { leads };\n  }\n  static fromPath(jsonpath) {\n    const path = parseJsonPath(jsonpath);\n    if (!path)\n      throw new Error(`Failed to parse path from \"${jsonpath}\"`);\n    const descender = new Descender(null, new Expression(path));\n    return new Matcher(descender.descend());\n  }\n}\nclass PlainProbe {\n  _value;\n  path;\n  constructor(value, path) {\n    this._value = value, this.path = path || [];\n  }\n  containerType() {\n    return Array.isArray(this._value) ? \"array\" : this._value !== null && typeof this._value == \"object\" ? \"object\" : \"primitive\";\n  }\n  length() {\n    if (!Array.isArray(this._value))\n      throw new Error(\"Won't return length of non-indexable _value\");\n    return this._value.length;\n  }\n  getIndex(i) {\n    return Array.isArray(this._value) ? i >= this.length() ? null : new PlainProbe(this._value[i], this.path.concat(i)) : !1;\n  }\n  hasAttribute(key) {\n    return isRecord(this._value) ? this._value.hasOwnProperty(key) : !1;\n  }\n  attributeKeys() {\n    return isRecord(this._value) ? Object.keys(this._value) : [];\n  }\n  getAttribute(key) {\n    if (!isRecord(this._value))\n      throw new Error(\"getAttribute only applies to plain objects\");\n    return this.hasAttribute(key) ? new PlainProbe(this._value[key], this.path.concat(key)) : null;\n  }\n  get() {\n    return this._value;\n  }\n}\nfunction extractAccessors(path, value) {\n  const result = [], matcher = Matcher.fromPath(path).setPayload(function(values) {\n    result.push(...values);\n  }), accessor = new PlainProbe(value);\n  return descend(matcher, accessor), result;\n}\nfunction descend(matcher, accessor) {\n  const { leads, delivery } = matcher.match(accessor);\n  leads.forEach((lead) => {\n    accessorsFromTarget(lead.target, accessor).forEach((childAccessor) => {\n      descend(lead.matcher, childAccessor);\n    });\n  }), delivery && delivery.targets.forEach((target) => {\n    typeof delivery.payload == \"function\" && delivery.payload(accessorsFromTarget(target, accessor));\n  });\n}\nfunction accessorsFromTarget(target, accessor) {\n  const result = [];\n  if (target.isIndexReference())\n    target.toIndicies(accessor).forEach((i) => {\n      result.push(accessor.getIndex(i));\n    });\n  else if (target.isAttributeReference())\n    result.push(accessor.getAttribute(target.name()));\n  else if (target.isSelfReference())\n    result.push(accessor);\n  else\n    throw new Error(`Unable to derive accessor for target ${target.toString()}`);\n  return lodash_compact_js__WEBPACK_IMPORTED_MODULE_5__(result);\n}\nfunction extract(path, value) {\n  return extractAccessors(path, value).map((acc) => acc.get());\n}\nfunction extractWithPath(path, value) {\n  return extractAccessors(path, value).map((acc) => ({ path: acc.path, value: acc.get() }));\n}\nfunction applyPatch(patch, oldValue) {\n  if (typeof oldValue != \"string\") return oldValue;\n  const [result] = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_6__.applyPatches)(patch, oldValue, { allowExceedingIndices: !0 });\n  return result;\n}\nclass DiffMatchPatch {\n  path;\n  dmpPatch;\n  id;\n  constructor(id, path, dmpPatchSrc) {\n    this.id = id, this.path = path, this.dmpPatch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_6__.parsePatch)(dmpPatchSrc);\n  }\n  apply(targets, accessor) {\n    let result = accessor;\n    if (result.containerType() === \"primitive\")\n      return result;\n    for (const target of targets) {\n      if (target.isIndexReference()) {\n        for (const index of target.toIndicies(accessor)) {\n          const item = result.getIndex(index);\n          if (!item)\n            continue;\n          const oldValue = item.get(), nextValue = applyPatch(this.dmpPatch, oldValue);\n          result = result.setIndex(index, nextValue);\n        }\n        continue;\n      }\n      if (target.isAttributeReference() && result.hasAttribute(target.name())) {\n        const attribute = result.getAttribute(target.name());\n        if (!attribute)\n          continue;\n        const oldValue = attribute.get(), nextValue = applyPatch(this.dmpPatch, oldValue);\n        result = result.setAttribute(target.name(), nextValue);\n        continue;\n      }\n      throw new Error(`Unable to apply diffMatchPatch to target ${target.toString()}`);\n    }\n    return result;\n  }\n}\nfunction performIncrement(previousValue, delta) {\n  return typeof previousValue != \"number\" || !Number.isFinite(previousValue) ? previousValue : previousValue + delta;\n}\nclass IncPatch {\n  path;\n  value;\n  id;\n  constructor(id, path, value) {\n    this.path = path, this.value = value, this.id = id;\n  }\n  apply(targets, accessor) {\n    let result = accessor;\n    if (result.containerType() === \"primitive\")\n      return result;\n    for (const target of targets) {\n      if (target.isIndexReference()) {\n        for (const index of target.toIndicies(accessor)) {\n          const item = result.getIndex(index);\n          if (!item)\n            continue;\n          const previousValue = item.get();\n          result = result.setIndex(index, performIncrement(previousValue, this.value));\n        }\n        continue;\n      }\n      if (target.isAttributeReference()) {\n        const attribute = result.getAttribute(target.name());\n        if (!attribute)\n          continue;\n        const previousValue = attribute.get();\n        result = result.setAttribute(target.name(), performIncrement(previousValue, this.value));\n        continue;\n      }\n      throw new Error(`Unable to apply to target ${target.toString()}`);\n    }\n    return result;\n  }\n}\nfunction targetsToIndicies(targets, accessor) {\n  const result = [];\n  return targets.forEach((target) => {\n    target.isIndexReference() && result.push(...target.toIndicies(accessor));\n  }), result.sort();\n}\nclass InsertPatch {\n  location;\n  path;\n  items;\n  id;\n  constructor(id, location, path, items) {\n    this.id = id, this.location = location, this.path = path, this.items = items;\n  }\n  apply(targets, accessor) {\n    let result = accessor;\n    if (accessor.containerType() !== \"array\")\n      throw new Error(\"Attempt to apply insert patch to non-array value\");\n    switch (this.location) {\n      case \"before\": {\n        const pos = minIndex(targets, accessor);\n        result = result.insertItemsAt(pos, this.items);\n        break;\n      }\n      case \"after\": {\n        const pos = maxIndex(targets, accessor);\n        result = result.insertItemsAt(pos + 1, this.items);\n        break;\n      }\n      case \"replace\": {\n        const indicies = targetsToIndicies(targets, accessor);\n        result = result.unsetIndices(indicies), result = result.insertItemsAt(indicies[0], this.items);\n        break;\n      }\n      default:\n        throw new Error(`Unsupported location atm: ${this.location}`);\n    }\n    return result;\n  }\n}\nfunction minIndex(targets, accessor) {\n  let result = lodash_min_js__WEBPACK_IMPORTED_MODULE_4__(targetsToIndicies(targets, accessor)) || 0;\n  return targets.forEach((target) => {\n    if (target.isRange()) {\n      const { start } = target.expandRange();\n      start < result && (result = start);\n    }\n  }), result;\n}\nfunction maxIndex(targets, accessor) {\n  let result = lodash_max_js__WEBPACK_IMPORTED_MODULE_3__(targetsToIndicies(targets, accessor)) || 0;\n  return targets.forEach((target) => {\n    if (target.isRange()) {\n      const { end } = target.expandRange();\n      end > result && (result = end);\n    }\n  }), result;\n}\nclass SetIfMissingPatch {\n  id;\n  path;\n  value;\n  constructor(id, path, value) {\n    this.id = id, this.path = path, this.value = value;\n  }\n  apply(targets, accessor) {\n    let result = accessor;\n    return targets.forEach((target) => {\n      if (!target.isIndexReference())\n        if (target.isAttributeReference())\n          result.containerType() === \"primitive\" ? result = result.set({ [target.name()]: this.value }) : result.hasAttribute(target.name()) || (result = accessor.setAttribute(target.name(), this.value));\n        else\n          throw new Error(`Unable to apply to target ${target.toString()}`);\n    }), result;\n  }\n}\nclass SetPatch {\n  id;\n  path;\n  value;\n  constructor(id, path, value) {\n    this.id = id, this.path = path, this.value = value;\n  }\n  apply(targets, accessor) {\n    let result = accessor;\n    return targets.forEach((target) => {\n      if (target.isSelfReference())\n        result = result.set(this.value);\n      else if (target.isIndexReference())\n        target.toIndicies(accessor).forEach((i) => {\n          result = result.setIndex(i, this.value);\n        });\n      else if (target.isAttributeReference())\n        result.containerType() === \"primitive\" ? result = result.set({ [target.name()]: this.value }) : result = result.setAttribute(target.name(), this.value);\n      else\n        throw new Error(`Unable to apply to target ${target.toString()}`);\n    }), result;\n  }\n}\nclass UnsetPatch {\n  id;\n  path;\n  value;\n  constructor(id, path) {\n    this.id = id, this.path = path;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  apply(targets, accessor) {\n    let result = accessor;\n    switch (accessor.containerType()) {\n      case \"array\":\n        result = result.unsetIndices(targetsToIndicies(targets, accessor));\n        break;\n      case \"object\":\n        targets.forEach((target) => {\n          result = result.unsetAttribute(target.name());\n        });\n        break;\n      default:\n        throw new Error(\n          \"Target value is neither indexable or an object. This error should potentially just be silently ignored?\"\n        );\n    }\n    return result;\n  }\n}\nfunction parsePatch(patch) {\n  const result = [];\n  if (Array.isArray(patch))\n    return patch.reduce((r, p) => r.concat(parsePatch(p)), result);\n  const { set, setIfMissing, unset, diffMatchPatch, inc, dec, insert } = patch;\n  if (setIfMissing && Object.keys(setIfMissing).forEach((path) => {\n    result.push(new SetIfMissingPatch(patch.id, path, setIfMissing[path]));\n  }), set && Object.keys(set).forEach((path) => {\n    result.push(new SetPatch(patch.id, path, set[path]));\n  }), unset && unset.forEach((path) => {\n    result.push(new UnsetPatch(patch.id, path));\n  }), diffMatchPatch && Object.keys(diffMatchPatch).forEach((path) => {\n    result.push(new DiffMatchPatch(patch.id, path, diffMatchPatch[path]));\n  }), inc && Object.keys(inc).forEach((path) => {\n    result.push(new IncPatch(patch.id, path, inc[path]));\n  }), dec && Object.keys(dec).forEach((path) => {\n    result.push(new IncPatch(patch.id, path, -dec[path]));\n  }), insert) {\n    let location, path;\n    const spec = insert;\n    if (\"before\" in spec)\n      location = \"before\", path = spec.before;\n    else if (\"after\" in spec)\n      location = \"after\", path = spec.after;\n    else if (\"replace\" in spec)\n      location = \"replace\", path = spec.replace;\n    else\n      throw new Error(\"Invalid insert patch\");\n    result.push(new InsertPatch(patch.id, location, path, spec.items));\n  }\n  return result;\n}\nclass Patcher {\n  patches;\n  constructor(patch) {\n    this.patches = parsePatch(patch);\n  }\n  apply(value) {\n    const accessor = new ImmutableAccessor(value);\n    return this.applyViaAccessor(accessor).get();\n  }\n  // If you want to use your own accessor implementation, you can use this method\n  // to invoke the patcher. Since all subsequent accessors for children of this accessor\n  // are obtained through the methods in the accessors, you retain full control of the\n  // implementation throguhgout the application. Have a look in ImmutableAccessor\n  // to see an example of how accessors are implemented.\n  applyViaAccessor(accessor) {\n    let result = accessor;\n    const idAccessor = accessor.getAttribute(\"_id\");\n    if (!idAccessor)\n      throw new Error(\"Cannot apply patch to document with no _id\");\n    const id = idAccessor.get();\n    for (const patch of this.patches) {\n      if (patch.id !== id)\n        continue;\n      const matcher = Matcher.fromPath(patch.path).setPayload(patch);\n      result = process(matcher, result);\n    }\n    return result;\n  }\n}\nfunction process(matcher, accessor) {\n  const isSetPatch = matcher.payload instanceof SetPatch || matcher.payload instanceof SetIfMissingPatch;\n  let result = accessor;\n  const { leads, delivery } = matcher.match(accessor);\n  return leads.forEach((lead) => {\n    if (lead.target.isIndexReference())\n      lead.target.toIndicies().forEach((i) => {\n        const item = result.getIndex(i);\n        if (!item)\n          throw new Error(\"Index out of bounds\");\n        result = result.setIndexAccessor(i, process(lead.matcher, item));\n      });\n    else if (lead.target.isAttributeReference()) {\n      isSetPatch && result.containerType() === \"primitive\" && (result = result.set({}));\n      let oldValueAccessor = result.getAttribute(lead.target.name());\n      if (!oldValueAccessor && isSetPatch && (result = result.setAttribute(lead.target.name(), {}), oldValueAccessor = result.getAttribute(lead.target.name())), !oldValueAccessor)\n        return;\n      const newValueAccessor = process(lead.matcher, oldValueAccessor);\n      oldValueAccessor !== newValueAccessor && (result = result.setAttributeAccessor(lead.target.name(), newValueAccessor));\n    } else\n      throw new Error(`Unable to handle target ${lead.target.toString()}`);\n  }), delivery && isPatcher(delivery.payload) && (result = delivery.payload.apply(delivery.targets, result)), result;\n}\nfunction isPatcher(payload) {\n  return !!(payload && typeof payload == \"object\" && payload !== null && \"apply\" in payload && typeof payload.apply == \"function\");\n}\nconst luid = _sanity_uuid__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\nclass Mutation {\n  params;\n  compiled;\n  _appliesToMissingDocument;\n  constructor(options) {\n    this.params = options;\n  }\n  get transactionId() {\n    return this.params.transactionId;\n  }\n  get transition() {\n    return this.params.transition;\n  }\n  get identity() {\n    return this.params.identity;\n  }\n  get previousRev() {\n    return this.params.previousRev;\n  }\n  get resultRev() {\n    return this.params.resultRev;\n  }\n  get mutations() {\n    return this.params.mutations;\n  }\n  get timestamp() {\n    if (typeof this.params.timestamp == \"string\")\n      return new Date(this.params.timestamp);\n  }\n  get effects() {\n    return this.params.effects;\n  }\n  assignRandomTransactionId() {\n    this.params.transactionId = luid(), this.params.resultRev = this.params.transactionId;\n  }\n  appliesToMissingDocument() {\n    if (typeof this._appliesToMissingDocument < \"u\")\n      return this._appliesToMissingDocument;\n    const firstMut = this.mutations[0];\n    return firstMut ? this._appliesToMissingDocument = !!(firstMut.create || firstMut.createIfNotExists || firstMut.createOrReplace) : this._appliesToMissingDocument = !0, this._appliesToMissingDocument;\n  }\n  // Compiles all mutations into a handy function\n  compile() {\n    const operations = [], getGuaranteedCreatedAt = (doc) => doc?._createdAt || this.params.timestamp || (/* @__PURE__ */ new Date()).toISOString();\n    this.mutations.forEach((mutation) => {\n      if (mutation.create) {\n        const create = mutation.create || {};\n        operations.push((doc) => doc || Object.assign(create, {\n          _createdAt: getGuaranteedCreatedAt(create)\n        }));\n        return;\n      }\n      if (mutation.createIfNotExists) {\n        const createIfNotExists = mutation.createIfNotExists || {};\n        operations.push(\n          (doc) => doc === null ? Object.assign(createIfNotExists, {\n            _createdAt: getGuaranteedCreatedAt(createIfNotExists)\n          }) : doc\n        );\n        return;\n      }\n      if (mutation.createOrReplace) {\n        const createOrReplace = mutation.createOrReplace || {};\n        operations.push(\n          () => Object.assign(createOrReplace, {\n            _createdAt: getGuaranteedCreatedAt(createOrReplace)\n          })\n        );\n        return;\n      }\n      if (mutation.delete) {\n        operations.push(() => null);\n        return;\n      }\n      if (mutation.patch) {\n        if (\"query\" in mutation.patch)\n          return;\n        const patch = new Patcher(mutation.patch);\n        operations.push((doc) => patch.apply(doc));\n        return;\n      }\n      throw new Error(`Unsupported mutation ${JSON.stringify(mutation, null, 2)}`);\n    }), typeof this.params.timestamp == \"string\" && operations.push((doc) => doc ? Object.assign(doc, { _updatedAt: this.params.timestamp }) : null);\n    const prevRev = this.previousRev, rev = this.resultRev || this.transactionId;\n    this.compiled = (doc) => {\n      if (prevRev && doc && prevRev !== doc._rev)\n        throw new Error(\n          `Previous revision for this mutation was ${prevRev}, but the document revision is ${doc._rev}`\n        );\n      let result = doc;\n      for (const operation of operations)\n        result = operation(result);\n      return result && rev && (result === doc && (result = Object.assign({}, doc)), result._rev = rev), result;\n    };\n  }\n  apply(document) {\n    debug(\"Applying mutation %O to document %O\", this.mutations, document), this.compiled || this.compile();\n    const result = this.compiled(document);\n    return debug(\"  => %O\", result), result;\n  }\n  static applyAll(document, mutations) {\n    return mutations.reduce((doc, mutation) => mutation.apply(doc), document);\n  }\n  // Given a number of yet-to-be-committed mutation objects, collects them into one big mutation\n  // any metadata like transactionId is ignored and must be submitted by the client. It is assumed\n  // that all mutations are on the same document.\n  // TOOO: Optimize mutations, eliminating mutations that overwrite themselves!\n  static squash(document, mutations) {\n    const squashed = mutations.reduce(\n      (result, mutation) => result.concat(...mutation.mutations),\n      []\n    );\n    return new Mutation({ mutations: squashed });\n  }\n}\nclass Document {\n  /**\n   * Incoming patches from the server waiting to be applied to HEAD\n   */\n  incoming = [];\n  /**\n   * Patches we know has been subitted to the server, but has not been seen yet in the return channel\n   * so we can't be sure about the ordering yet (someone else might have slipped something between them)\n   */\n  submitted = [];\n  /**\n   * Pending mutations\n   */\n  pending = [];\n  /**\n   * Our model of the document according to the incoming patches from the server\n   */\n  HEAD;\n  /**\n   * Our optimistic model of what the document will probably look like as soon as all our patches\n   * have been processed. Updated every time we stage a new mutation, but also might revert back\n   * to previous states if our mutations fail, or could change if unexpected mutations arrive\n   * between our own. The `onRebase` callback will be called when EDGE changes in this manner.\n   */\n  EDGE;\n  /**\n   * Called with the EDGE document when that document changes for a reason other than us staging\n   * a new patch or receiving a mutation from the server while our EDGE is in sync with HEAD:\n   * I.e. when EDGE changes because the order of mutations has changed in relation to our\n   * optimistic predictions.\n   */\n  onRebase;\n  /**\n   * Called when we receive a patch in the normal order of things, but the mutation is not ours\n   */\n  onMutation;\n  /**\n   * Called when consistency state changes with the boolean value of the current consistency state\n   */\n  onConsistencyChanged;\n  /**\n   * Called whenever a new incoming mutation comes in. These are always ordered correctly.\n   */\n  onRemoteMutation;\n  /**\n   * We are consistent when there are no unresolved mutations of our own, and no un-applicable\n   * incoming mutations. When this has been going on for too long, and there has been a while\n   * since we staged a new mutation, it is time to reset your state.\n   */\n  inconsistentAt = null;\n  /**\n   * The last time we staged a patch of our own. If we have been inconsistent for a while, but it\n   * hasn't been long since we staged a new mutation, the reason is probably just because the user\n   * is typing or something.\n   *\n   * Should be used as a guard against resetting state for inconsistency reasons.\n   */\n  lastStagedAt = null;\n  constructor(doc) {\n    this.reset(doc), this.HEAD = doc, this.EDGE = doc;\n  }\n  // Reset the state of the Document, used to recover from unsavory states by reloading the document\n  reset(doc) {\n    this.incoming = [], this.submitted = [], this.pending = [], this.inconsistentAt = null, this.HEAD = doc, this.EDGE = doc, this.considerIncoming(), this.updateConsistencyFlag();\n  }\n  // Call when a mutation arrives from Sanity\n  arrive(mutation) {\n    this.incoming.push(mutation), this.considerIncoming(), this.updateConsistencyFlag();\n  }\n  // Call to signal that we are submitting a mutation. Returns a callback object with a\n  // success and failure handler that must be called according to the outcome of our\n  // submission.\n  stage(mutation, silent) {\n    if (!mutation.transactionId)\n      throw new Error(\"Mutations _must_ have transactionId when submitted\");\n    this.lastStagedAt = /* @__PURE__ */ new Date(), debug(\"Staging mutation %s (pushed to pending)\", mutation.transactionId), this.pending.push(mutation), this.EDGE = mutation.apply(this.EDGE), this.onMutation && !silent && this.onMutation({\n      mutation,\n      document: this.EDGE,\n      remote: !1\n    });\n    const txnId = mutation.transactionId;\n    return this.updateConsistencyFlag(), {\n      success: () => {\n        this.pendingSuccessfullySubmitted(txnId), this.updateConsistencyFlag();\n      },\n      failure: () => {\n        this.pendingFailed(txnId), this.updateConsistencyFlag();\n      }\n    };\n  }\n  // Call to check if everything is nice and quiet and there are no unresolved mutations.\n  // Means this model thinks both HEAD and EDGE is up to date with what the server sees.\n  isConsistent() {\n    return !this.inconsistentAt;\n  }\n  // Private\n  // Attempts to apply any resolvable incoming patches to HEAD. Will keep patching as long as there\n  // are applicable patches to be applied\n  considerIncoming() {\n    let mustRebase = !1, nextMut;\n    const rebaseMutations = [];\n    if (this.HEAD && this.HEAD._updatedAt) {\n      const updatedAt = new Date(this.HEAD._updatedAt);\n      this.incoming.find((mut) => mut.timestamp && mut.timestamp < updatedAt) && (this.incoming = this.incoming.filter((mut) => mut.timestamp && mut.timestamp < updatedAt));\n    }\n    let protect = 0;\n    do {\n      if (this.HEAD) {\n        const HEAD = this.HEAD;\n        nextMut = HEAD._rev ? this.incoming.find((mut) => mut.previousRev === HEAD._rev) : void 0;\n      } else\n        nextMut = this.incoming.find((mut) => mut.appliesToMissingDocument());\n      if (nextMut) {\n        const applied = this.applyIncoming(nextMut);\n        if (mustRebase = mustRebase || applied, mustRebase && rebaseMutations.push(nextMut), protect++ > 10)\n          throw new Error(\n            `Mutator stuck flushing incoming mutations. Probably stuck here: ${JSON.stringify(\n              nextMut\n            )}`\n          );\n      }\n    } while (nextMut);\n    this.incoming.length > 0 && debug.enabled && debug(\n      \"Unable to apply mutations %s\",\n      this.incoming.map((mut) => mut.transactionId).join(\", \")\n    ), mustRebase && this.rebase(rebaseMutations);\n  }\n  // check current consistency state, update flag and invoke callback if needed\n  updateConsistencyFlag() {\n    const wasConsistent = this.isConsistent(), isConsistent = this.pending.length === 0 && this.submitted.length === 0 && this.incoming.length === 0;\n    isConsistent ? this.inconsistentAt = null : this.inconsistentAt || (this.inconsistentAt = /* @__PURE__ */ new Date()), wasConsistent != isConsistent && this.onConsistencyChanged && (debug(isConsistent ? \"Buffered document is inconsistent\" : \"Buffered document is consistent\"), this.onConsistencyChanged(isConsistent));\n  }\n  // apply an incoming patch that has been prequalified as the next in line for this document\n  applyIncoming(mut) {\n    if (!mut)\n      return !1;\n    if (!mut.transactionId)\n      throw new Error(\"Received incoming mutation without a transaction ID\");\n    if (debug(\n      \"Applying mutation %s -> %s to rev %s\",\n      mut.previousRev,\n      mut.resultRev,\n      this.HEAD && this.HEAD._rev\n    ), this.HEAD = mut.apply(this.HEAD), this.onRemoteMutation && this.onRemoteMutation(mut), this.incoming = this.incoming.filter((m) => m.transactionId !== mut.transactionId), this.hasUnresolvedMutations()) {\n      const needRebase = this.consumeUnresolved(mut.transactionId);\n      return debug.enabled && (debug(\n        `Incoming mutation ${mut.transactionId} appeared while there were pending or submitted local mutations`\n      ), debug(`Submitted txnIds: ${this.submitted.map((m) => m.transactionId).join(\", \")}`), debug(`Pending txnIds: ${this.pending.map((m) => m.transactionId).join(\", \")}`), debug(\"needRebase === %s\", needRebase)), needRebase;\n    }\n    return debug(\n      \"Remote mutation %s arrived w/o any pending or submitted local mutations\",\n      mut.transactionId\n    ), this.EDGE = this.HEAD, this.onMutation && this.onMutation({\n      mutation: mut,\n      document: this.EDGE,\n      remote: !0\n    }), !1;\n  }\n  /**\n   * Returns true if there are unresolved mutations between HEAD and EDGE, meaning we have\n   * mutations that are still waiting to be either submitted, or to be confirmed by the server.\n   *\n   * @returns true if there are unresolved mutations between HEAD and EDGE, false otherwise\n   */\n  hasUnresolvedMutations() {\n    return this.submitted.length > 0 || this.pending.length > 0;\n  }\n  /**\n   * When an incoming mutation is applied to HEAD, this is called to remove the mutation from\n   * the unresolved state. If the newly applied patch is the next upcoming unresolved mutation,\n   * no rebase is needed, but we might have the wrong idea about the ordering of mutations, so in\n   * that case we are given the flag `needRebase` to tell us that this mutation arrived out of\n   * order in terms of our optimistic version, so a rebase is needed.\n   *\n   * @param txnId - Transaction ID of the remote mutation\n   * @returns true if rebase is needed, false otherwise\n   */\n  consumeUnresolved(txnId) {\n    if (this.submitted.length === 0 && this.pending.length === 0)\n      return !1;\n    if (this.submitted.length !== 0) {\n      if (this.submitted[0].transactionId === txnId)\n        return debug(\n          \"Remote mutation %s matches upcoming submitted mutation, consumed from 'submitted' buffer\",\n          txnId\n        ), this.submitted.shift(), !1;\n    } else if (this.pending.length > 0 && this.pending[0].transactionId === txnId)\n      return debug(\n        \"Remote mutation %s matches upcoming pending mutation, consumed from 'pending' buffer\",\n        txnId\n      ), this.pending.shift(), !1;\n    return debug(\n      \"The mutation was not the upcoming mutation, scrubbing. Pending: %d, Submitted: %d\",\n      this.pending.length,\n      this.submitted.length\n    ), this.submitted = this.submitted.filter((mut) => mut.transactionId !== txnId), this.pending = this.pending.filter((mut) => mut.transactionId !== txnId), debug(\"After scrubbing: Pending: %d, Submitted: %d\", this.pending.length, this.submitted.length), !0;\n  }\n  pendingSuccessfullySubmitted(pendingTxnId) {\n    if (this.pending.length === 0)\n      return;\n    const first = this.pending[0];\n    if (first.transactionId === pendingTxnId) {\n      this.pending.shift(), this.submitted.push(first);\n      return;\n    }\n    let justSubmitted;\n    const stillPending = [];\n    this.pending.forEach((mutation) => {\n      if (mutation.transactionId === pendingTxnId) {\n        justSubmitted = mutation;\n        return;\n      }\n      stillPending.push(mutation);\n    }), justSubmitted && this.submitted.push(justSubmitted), this.pending = stillPending, this.rebase([]);\n  }\n  pendingFailed(pendingTxnId) {\n    this.pending = this.pending.filter((mutation) => mutation.transactionId !== pendingTxnId), this.rebase([]);\n  }\n  rebase(incomingMutations) {\n    const oldEdge = this.EDGE;\n    this.EDGE = Mutation.applyAll(this.HEAD, this.submitted.concat(this.pending)), oldEdge !== null && this.EDGE !== null && (oldEdge._rev = this.EDGE._rev), !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_0__(this.EDGE, oldEdge) && this.onRebase && this.onRebase(this.EDGE, incomingMutations, this.pending);\n  }\n}\nclass SquashingBuffer {\n  /**\n   * The document forming the basis of this squash\n   */\n  BASIS;\n  /**\n   * The document after the out-Mutation has been applied, but before the staged\n   * operations are committed.\n   */\n  PRESTAGE;\n  /**\n   * setOperations contain the latest set operation by path. If the set-operations are\n   * updating strings to new strings, they are rewritten as diffMatchPatch operations,\n   * any new set operations on the same paths overwrites any older set operations.\n   * Only set-operations assigning plain values to plain values gets optimized like this.\n   */\n  setOperations;\n  /**\n   * `documentPresent` is true whenever we know that the document must be present due\n   * to preceeding mutations. `false` implies that it may or may not already exist.\n   */\n  documentPresent;\n  /**\n   * The operations in the out-Mutation are not able to be optimized any further\n   */\n  out = [];\n  /**\n   * Staged mutation operations\n   */\n  staged;\n  constructor(doc) {\n    doc ? debug(\"Reset mutation buffer to rev %s\", doc._rev) : debug(\"Reset mutation buffer state to document being deleted\"), this.staged = [], this.setOperations = {}, this.documentPresent = !1, this.BASIS = doc, this.PRESTAGE = doc;\n  }\n  add(mut) {\n    mut.mutations.forEach((op) => this.addOperation(op));\n  }\n  hasChanges() {\n    return this.out.length > 0 || Object.keys(this.setOperations).length > 0;\n  }\n  /**\n   * Extracts the mutations in this buffer.\n   * After this is done, the buffer lifecycle is over and the client should\n   * create an new one with the new, updated BASIS.\n   *\n   * @param txnId - Transaction ID\n   * @returns A `Mutation` instance if we had outgoing mutations pending, null otherwise\n   */\n  purge(txnId) {\n    this.stashStagedOperations();\n    let result = null;\n    return this.out.length > 0 && (debug(\"Purged mutation buffer\"), result = new Mutation({\n      mutations: this.out,\n      resultRev: txnId,\n      transactionId: txnId\n    })), this.out = [], this.documentPresent = !1, result;\n  }\n  addOperation(op) {\n    if (op.patch && op.patch.set && \"id\" in op.patch && op.patch.id === this.PRESTAGE?._id && Object.keys(op.patch).length === 2) {\n      const setPatch = op.patch.set, unoptimizable = {};\n      for (const path of Object.keys(setPatch))\n        setPatch.hasOwnProperty(path) && (this.optimiseSetOperation(path, setPatch[path]) || (unoptimizable[path] = setPatch[path]));\n      Object.keys(unoptimizable).length > 0 && (debug(\"Unoptimizable set-operation detected, purging optimization buffer\"), this.staged.push({ patch: { id: this.PRESTAGE._id, set: unoptimizable } }), this.stashStagedOperations());\n      return;\n    }\n    if (op.createIfNotExists && this.PRESTAGE && op.createIfNotExists._id === this.PRESTAGE._id) {\n      this.documentPresent || (this.staged.push(op), this.documentPresent = !0, this.stashStagedOperations());\n      return;\n    }\n    debug(\"Unoptimizable mutation detected, purging optimization buffer\"), this.staged.push(op), this.stashStagedOperations();\n  }\n  /**\n     * Attempt to perform one single set operation in an optimised manner, return value\n     * reflects whether or not the operation could be performed.\n  \n     * @param path - The JSONPath to the set operation in question\n     * @param nextValue - The value to be set\n     * @returns True of optimized, false otherwise\n     */\n  optimiseSetOperation(path, nextValue) {\n    if (typeof nextValue == \"object\")\n      return !1;\n    const matches = extractWithPath(path, this.PRESTAGE);\n    if (matches.length !== 1)\n      return !1;\n    const match = matches[0];\n    if (typeof match.value == \"object\" || !this.PRESTAGE)\n      return !1;\n    let op = null;\n    if (match.value === nextValue)\n      op = null;\n    else if (typeof match.value == \"string\" && typeof nextValue == \"string\")\n      try {\n        const patch = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_6__.stringifyPatches)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_6__.makePatches)(match.value, nextValue));\n        op = { patch: { id: this.PRESTAGE._id, diffMatchPatch: { [path]: patch } } };\n      } catch {\n        return !1;\n      }\n    else\n      op = { patch: { id: this.PRESTAGE._id, set: { [path]: nextValue } } };\n    const canonicalPath = arrayToJSONMatchPath(match.path);\n    return op ? this.setOperations[canonicalPath] = op : delete this.setOperations[canonicalPath], !0;\n  }\n  stashStagedOperations() {\n    const nextOps = [];\n    Object.keys(this.setOperations).forEach((key) => {\n      const op = this.setOperations[key];\n      op && nextOps.push(op);\n    }), nextOps.push(...this.staged), nextOps.length > 0 && (this.PRESTAGE = new Mutation({ mutations: nextOps }).apply(this.PRESTAGE), this.staged = [], this.setOperations = {}), this.out.push(...nextOps);\n  }\n  /**\n   * Rebases given the new base-document\n   *\n   * @param newBasis - New base document to rebase on\n   * @returns New \"edge\" document with buffered changes integrated\n   */\n  rebase(newBasis) {\n    return this.stashStagedOperations(), newBasis === null ? (this.out = [], this.BASIS = newBasis, this.PRESTAGE = newBasis, this.documentPresent = !1) : (this.BASIS = newBasis, this.out ? this.PRESTAGE = new Mutation({ mutations: this.out }).apply(this.BASIS) : this.PRESTAGE = this.BASIS), this.PRESTAGE;\n  }\n}\nconst ONE_MINUTE = 1e3 * 60;\nclass Commit {\n  mutations;\n  tries;\n  resolve;\n  reject;\n  constructor(mutations, { resolve, reject }) {\n    this.mutations = mutations, this.tries = 0, this.resolve = resolve, this.reject = reject;\n  }\n  apply(doc) {\n    return Mutation.applyAll(doc, this.mutations);\n  }\n  squash(doc) {\n    const result = Mutation.squash(doc, this.mutations);\n    return result.assignRandomTransactionId(), result;\n  }\n}\nconst mutReducerFn = (acc, mut) => acc.concat(mut.mutations);\nclass BufferedDocument {\n  mutations;\n  /**\n   * The Document we are wrapping\n   */\n  document;\n  /**\n   * The Document with local changes applied\n   */\n  LOCAL;\n  /**\n   * Commits that are waiting to be delivered to the server\n   */\n  commits;\n  /**\n   * Local mutations that are not scheduled to be committed yet\n   */\n  buffer;\n  /**\n   * Assignable event handler for when the buffered document applies a mutation\n   */\n  onMutation;\n  /**\n   * Assignable event handler for when a remote mutation happened\n   */\n  onRemoteMutation;\n  /**\n   * Assignable event handler for when the buffered document rebased\n   */\n  onRebase;\n  /**\n   * Assignable event handler for when the document is deleted\n   */\n  onDelete;\n  /**\n   * Assignable event handler for when the state of consistency changed\n   */\n  onConsistencyChanged;\n  /**\n   * Assignable event handler for when the buffered document should commit changes\n   */\n  commitHandler;\n  /**\n   * Whether or not we are currently commiting\n   */\n  committerRunning = !1;\n  constructor(doc) {\n    this.buffer = new SquashingBuffer(doc), this.document = new Document(doc), this.document.onMutation = (msg) => this.handleDocMutation(msg), this.document.onRemoteMutation = (mut) => this.onRemoteMutation && this.onRemoteMutation(mut), this.document.onRebase = (edge, remoteMutations, localMutations) => this.handleDocRebase(edge, remoteMutations, localMutations), this.document.onConsistencyChanged = (msg) => this.handleDocConsistencyChanged(msg), this.LOCAL = doc, this.mutations = [], this.commits = [];\n  }\n  // Used to reset the state of the local document model. If the model has been inconsistent\n  // for too long, it has probably missed a notification, and should reload the document from the server\n  reset(doc) {\n    doc ? debug(\"Document state reset to revision %s\", doc._rev) : debug(\"Document state reset to being deleted\"), this.document.reset(doc), this.rebase([], []), this.handleDocConsistencyChanged(this.document.isConsistent());\n  }\n  // Add a change to the buffer\n  add(mutation) {\n    this.onConsistencyChanged && this.onConsistencyChanged(!1), debug(\"Staged local mutation\"), this.buffer.add(mutation);\n    const oldLocal = this.LOCAL;\n    this.LOCAL = mutation.apply(this.LOCAL), this.onMutation && oldLocal !== this.LOCAL && (debug(\"onMutation fired\"), this.onMutation({\n      mutation,\n      document: this.LOCAL,\n      remote: !1\n    }), this.LOCAL === null && this.onDelete && this.onDelete(this.LOCAL));\n  }\n  // Call when a mutation arrives from Sanity\n  arrive(mutation) {\n    if (debug(\"Remote mutation arrived %s -> %s\", mutation.previousRev, mutation.resultRev), mutation.previousRev === mutation.resultRev)\n      throw new Error(\n        `Mutation ${mutation.transactionId} has previousRev === resultRev (${mutation.previousRev})`\n      );\n    return this.document.arrive(mutation);\n  }\n  // Submit all mutations in the buffer to be committed\n  commit() {\n    return new Promise((resolve, reject) => {\n      if (!this.buffer.hasChanges()) {\n        resolve();\n        return;\n      }\n      debug(\"Committing local changes\");\n      const pendingMutations = this.buffer.purge();\n      this.commits.push(new Commit(pendingMutations ? [pendingMutations] : [], { resolve, reject })), this.buffer = new SquashingBuffer(this.LOCAL), this.performCommits();\n    });\n  }\n  // Starts the committer that will try to committ all staged commits to the database\n  // by calling the commitHandler. Will keep running until all commits are successfully\n  // committed.\n  performCommits() {\n    if (!this.commitHandler)\n      throw new Error(\"No commitHandler configured for this BufferedDocument\");\n    this.committerRunning || this._cycleCommitter();\n  }\n  // TODO: Error handling, right now retries after every error\n  _cycleCommitter() {\n    const commit = this.commits.shift();\n    if (!commit) {\n      this.committerRunning = !1;\n      return;\n    }\n    this.committerRunning = !0;\n    const squashed = commit.squash(this.LOCAL), docResponder = this.document.stage(squashed, !0), responder = {\n      success: () => {\n        debug(\"Commit succeeded\"), docResponder.success(), commit.resolve(), this._cycleCommitter();\n      },\n      failure: () => {\n        debug(\"Commit failed\"), commit.tries += 1, this.LOCAL !== null && this.commits.unshift(commit), docResponder.failure(), commit.tries < 200 && setTimeout(() => this._cycleCommitter(), Math.min(commit.tries * 1e3, ONE_MINUTE));\n      },\n      cancel: (error) => {\n        this.commits.forEach((comm) => comm.reject(error)), this.commits = [], this.reset(this.document.HEAD), this.buffer = new SquashingBuffer(this.LOCAL), this.committerRunning = !1;\n      }\n    };\n    debug(\"Posting commit\"), this.commitHandler && this.commitHandler({\n      mutation: squashed,\n      success: responder.success,\n      failure: responder.failure,\n      cancel: responder.cancel\n    });\n  }\n  handleDocRebase(edge, remoteMutations, localMutations) {\n    this.rebase(remoteMutations, localMutations);\n  }\n  handleDocumentDeleted() {\n    debug(\"Document deleted\"), this.LOCAL !== null && this.onDelete && this.onDelete(this.LOCAL), this.commits = [], this.mutations = [];\n  }\n  handleDocMutation(msg) {\n    if (this.commits.length === 0 && !this.buffer.hasChanges()) {\n      debug(\"Document mutated from remote with no local changes\"), this.LOCAL = this.document.EDGE, this.buffer = new SquashingBuffer(this.LOCAL), this.onMutation && this.onMutation(msg);\n      return;\n    }\n    debug(\"Document mutated from remote with local changes\"), this.document.EDGE === null && this.handleDocumentDeleted(), this.rebase([msg.mutation], []);\n  }\n  rebase(remoteMutations, localMutations) {\n    debug(\"Rebasing document\"), this.document.EDGE === null && this.handleDocumentDeleted();\n    const oldLocal = this.LOCAL;\n    this.LOCAL = this.commits.reduce((doc, commit) => commit.apply(doc), this.document.EDGE), this.LOCAL = this.buffer.rebase(this.LOCAL), oldLocal !== null && this.LOCAL !== null && (oldLocal._rev = this.LOCAL._rev), !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_0__(this.LOCAL, oldLocal) && this.onRebase && this.onRebase(\n      this.LOCAL,\n      remoteMutations.reduce(mutReducerFn, []),\n      localMutations.reduce(mutReducerFn, [])\n    );\n  }\n  handleDocConsistencyChanged(isConsistent) {\n    if (!this.onConsistencyChanged)\n      return;\n    const hasLocalChanges = this.commits.length > 0 || this.buffer.hasChanges();\n    isConsistent && !hasLocalChanges && this.onConsistencyChanged(!0), isConsistent || this.onConsistencyChanged(!1);\n  }\n}\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@sanity+mutator@3.99.0_@types+react@18.3.24/node_modules/@sanity/mutator/lib/index.mjs\n");

/***/ })

};
;