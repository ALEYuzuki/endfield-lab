"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity+asset-utils@2.3.0";
exports.ids = ["vendor-chunks/@sanity+asset-utils@2.3.0"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@sanity+asset-utils@2.3.0/node_modules/@sanity/asset-utils/dist/index.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sanity+asset-utils@2.3.0/node_modules/@sanity/asset-utils/dist/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CROP: () => (/* binding */ DEFAULT_CROP),\n/* harmony export */   DEFAULT_HOTSPOT: () => (/* binding */ DEFAULT_HOTSPOT),\n/* harmony export */   UnresolvableError: () => (/* binding */ UnresolvableError),\n/* harmony export */   buildFilePath: () => (/* binding */ buildFilePath),\n/* harmony export */   buildFileUrl: () => (/* binding */ buildFileUrl),\n/* harmony export */   buildImagePath: () => (/* binding */ buildImagePath),\n/* harmony export */   buildImageUrl: () => (/* binding */ buildImageUrl),\n/* harmony export */   getAssetDocumentId: () => (/* binding */ getAssetDocumentId),\n/* harmony export */   getAssetUrlType: () => (/* binding */ getAssetUrlType),\n/* harmony export */   getDefaultCrop: () => (/* binding */ getDefaultCrop),\n/* harmony export */   getDefaultHotspot: () => (/* binding */ getDefaultHotspot),\n/* harmony export */   getExtension: () => (/* binding */ getExtension),\n/* harmony export */   getFile: () => (/* binding */ getFile),\n/* harmony export */   getFileAsset: () => (/* binding */ getFileAsset),\n/* harmony export */   getIdFromString: () => (/* binding */ getIdFromString),\n/* harmony export */   getImage: () => (/* binding */ getImage),\n/* harmony export */   getImageAsset: () => (/* binding */ getImageAsset),\n/* harmony export */   getImageDimensions: () => (/* binding */ getImageDimensions),\n/* harmony export */   getProject: () => (/* binding */ getProject),\n/* harmony export */   getUrlFilename: () => (/* binding */ getUrlFilename),\n/* harmony export */   getUrlPath: () => (/* binding */ getUrlPath),\n/* harmony export */   getVanityStub: () => (/* binding */ getVanityStub),\n/* harmony export */   isAssetFilename: () => (/* binding */ isAssetFilename),\n/* harmony export */   isAssetId: () => (/* binding */ isAssetId),\n/* harmony export */   isAssetIdStub: () => (/* binding */ isAssetIdStub),\n/* harmony export */   isAssetObjectStub: () => (/* binding */ isAssetObjectStub),\n/* harmony export */   isAssetPathStub: () => (/* binding */ isAssetPathStub),\n/* harmony export */   isAssetUrlStub: () => (/* binding */ isAssetUrlStub),\n/* harmony export */   isDefaultCrop: () => (/* binding */ isDefaultCrop),\n/* harmony export */   isDefaultHotspot: () => (/* binding */ isDefaultHotspot),\n/* harmony export */   isFileAssetFilename: () => (/* binding */ isFileAssetFilename),\n/* harmony export */   isFileAssetId: () => (/* binding */ isFileAssetId),\n/* harmony export */   isFileSource: () => (/* binding */ isFileSource),\n/* harmony export */   isImageAssetFilename: () => (/* binding */ isImageAssetFilename),\n/* harmony export */   isImageAssetId: () => (/* binding */ isImageAssetId),\n/* harmony export */   isImageSource: () => (/* binding */ isImageSource),\n/* harmony export */   isInProgressUpload: () => (/* binding */ isInProgressUpload),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   isSanityAssetUrl: () => (/* binding */ isSanityAssetUrl),\n/* harmony export */   isSanityFileAsset: () => (/* binding */ isSanityFileAsset),\n/* harmony export */   isSanityFileUrl: () => (/* binding */ isSanityFileUrl),\n/* harmony export */   isSanityImageAsset: () => (/* binding */ isSanityImageAsset),\n/* harmony export */   isSanityImageUrl: () => (/* binding */ isSanityImageUrl),\n/* harmony export */   isUnresolvableError: () => (/* binding */ isUnresolvableError),\n/* harmony export */   isValidFilename: () => (/* binding */ isValidFilename),\n/* harmony export */   parseAssetFilename: () => (/* binding */ parseAssetFilename),\n/* harmony export */   parseAssetId: () => (/* binding */ parseAssetId),\n/* harmony export */   parseAssetUrl: () => (/* binding */ parseAssetUrl),\n/* harmony export */   parseFileAssetId: () => (/* binding */ parseFileAssetId),\n/* harmony export */   parseFileAssetUrl: () => (/* binding */ parseFileAssetUrl),\n/* harmony export */   parseImageAssetId: () => (/* binding */ parseImageAssetId),\n/* harmony export */   parseImageAssetUrl: () => (/* binding */ parseImageAssetUrl),\n/* harmony export */   tryGetAssetDocumentId: () => (/* binding */ tryGetAssetDocumentId),\n/* harmony export */   tryGetAssetPath: () => (/* binding */ tryGetAssetPath),\n/* harmony export */   tryGetExtension: () => (/* binding */ tryGetExtension),\n/* harmony export */   tryGetFile: () => (/* binding */ tryGetFile),\n/* harmony export */   tryGetFileAsset: () => (/* binding */ tryGetFileAsset),\n/* harmony export */   tryGetIdFromString: () => (/* binding */ tryGetIdFromString),\n/* harmony export */   tryGetImage: () => (/* binding */ tryGetImage),\n/* harmony export */   tryGetImageAsset: () => (/* binding */ tryGetImageAsset),\n/* harmony export */   tryGetImageDimensions: () => (/* binding */ tryGetImageDimensions),\n/* harmony export */   tryGetProject: () => (/* binding */ tryGetProject),\n/* harmony export */   tryGetUrlFilename: () => (/* binding */ tryGetUrlFilename),\n/* harmony export */   tryGetUrlPath: () => (/* binding */ tryGetUrlPath)\n/* harmony export */ });\nconst cdnUrl = \"https://cdn.sanity.io\", cdnUrlPattern = /^https:\\/\\/cdn\\.sanity\\./, customCdnUrlPattern = /^https:\\/\\/cdn\\.[^/]+\\/(images|files)\\/[^/]+\\/.*?[a-zA-Z0-9_]{24,40}.*$/, fileAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+\\.[a-z0-9]+$/, fileAssetIdPattern = /^file-([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-[a-z0-9]+$/, imageAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})-\\d+x\\d+\\.[a-z0-9]+$/, imageAssetIdPattern = /^image-([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-\\d+x\\d+-[a-z0-9]+$/, pathPattern = /^(images|files)\\/([a-z0-9]+)\\/([a-z0-9][-\\w]*)\\//, idPattern = /^(?:image-(?:[a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-\\d+x\\d+-[a-z0-9]+|file-(?:[a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+-[a-z0-9]+)$/, imageAssetType = \"sanity.imageAsset\", fileAssetType = \"sanity.fileAsset\", dummyProject = { projectId: \"a\", dataset: \"b\" }, inProgressAssetId = \"upload-in-progress-placeholder\", inProgressAssetAssetId = \"upload-in-progress\", inProgressAssetExtension = \"tmp\";\nclass UnresolvableError extends Error {\n  constructor(inputSource, message = \"Failed to resolve asset ID from source\") {\n    super(message), this.unresolvable = !0, this.input = inputSource;\n  }\n}\nfunction isUnresolvableError(err) {\n  const error = err;\n  return !!(error.unresolvable && \"input\" in error);\n}\nfunction getForgivingResolver(method) {\n  return (...args) => {\n    try {\n      return method(...args);\n    } catch (err) {\n      if (isUnresolvableError(err))\n        return;\n      throw err;\n    }\n  };\n}\nfunction isObject(obj) {\n  return obj !== null && !Array.isArray(obj) && typeof obj == \"object\";\n}\nfunction isReference(ref) {\n  return isObject(ref) && typeof ref._ref == \"string\";\n}\nfunction isAssetIdStub(stub) {\n  return isObject(stub) && typeof stub._id == \"string\";\n}\nfunction isAssetPathStub(stub) {\n  return isObject(stub) && typeof stub.path == \"string\";\n}\nfunction isAssetUrlStub(stub) {\n  return isObject(stub) && typeof stub.url == \"string\";\n}\nfunction isSanityFileAsset(src) {\n  return isObject(src) && src._type === \"sanity.fileAsset\";\n}\nfunction isSanityImageAsset(src) {\n  return isObject(src) && src._type === \"sanity.imageAsset\";\n}\nfunction isImageAssetId(documentId) {\n  return imageAssetIdPattern.test(documentId);\n}\nfunction isFileAssetId(documentId) {\n  return fileAssetIdPattern.test(documentId);\n}\nfunction isAssetId(documentId) {\n  return isImageAssetId(documentId) || isFileAssetId(documentId);\n}\nfunction isAssetObjectStub(stub) {\n  const item = stub;\n  return isObject(item) && !!item.asset && typeof item.asset == \"object\";\n}\nfunction isInProgressUpload(stub) {\n  const item = stub;\n  return isObject(item) && !!item._upload && !(\"asset\" in item);\n}\nfunction isCdnUrl(url) {\n  return cdnUrlPattern.test(url) || customCdnUrlPattern.test(url);\n}\nconst DEFAULT_CROP = Object.freeze({\n  left: 0,\n  top: 0,\n  bottom: 0,\n  right: 0\n}), DEFAULT_HOTSPOT = Object.freeze({\n  x: 0.5,\n  y: 0.5,\n  height: 1,\n  width: 1\n}), getDefaultCrop = () => ({ ...DEFAULT_CROP }), getDefaultHotspot = () => ({ ...DEFAULT_HOTSPOT }), isDefaultCrop = (crop) => {\n  const { top, bottom, left, right } = crop, {\n    top: defaultTop,\n    bottom: defaultBottom,\n    left: defaultLeft,\n    right: defaultRight\n  } = DEFAULT_CROP;\n  return top === defaultTop && bottom === defaultBottom && left === defaultLeft && right === defaultRight;\n}, isDefaultHotspot = (hotspot) => {\n  const { x, y, width, height } = hotspot, { x: defaultX, y: defaultY, width: defaultWidth, height: defaultHeight } = DEFAULT_HOTSPOT;\n  return x === defaultX && y === defaultY && width === defaultWidth && height === defaultHeight;\n};\nfunction buildImagePath(asset, options) {\n  const projectId = options?.projectId || asset.projectId, dataset = options?.dataset || asset.dataset;\n  if (!projectId || !dataset)\n    throw new Error(\"Project details (projectId and dataset) required to resolve path for image\");\n  const dimensions = \"metadata\" in asset ? asset.metadata.dimensions : { width: asset.width, height: asset.height }, originalFilename = \"originalFilename\" in asset ? asset.originalFilename : void 0, { assetId, extension, vanityFilename } = asset, { width, height } = dimensions, vanity = getVanityStub(originalFilename, vanityFilename, options);\n  return `images/${projectId}/${dataset}/${assetId}-${width}x${height}.${extension}${vanity}`;\n}\nfunction buildImageUrl(asset, options) {\n  return `${options?.baseUrl || cdnUrl}/${buildImagePath(asset, options)}`;\n}\nfunction buildFilePath(asset, options) {\n  const projectId = options?.projectId || asset.projectId, dataset = options?.dataset || asset.dataset;\n  if (!projectId || !dataset)\n    throw new Error(\"Project details (projectId and dataset) required to resolve path for file\");\n  const originalFilename = \"originalFilename\" in asset ? asset.originalFilename : void 0, { assetId, extension, vanityFilename } = asset, vanity = getVanityStub(originalFilename, vanityFilename, options);\n  return `files/${projectId}/${dataset}/${assetId}.${extension}${vanity}`;\n}\nfunction buildFileUrl(asset, options) {\n  return `${options?.baseUrl || cdnUrl}/${buildFilePath(asset, options)}`;\n}\nfunction hasPath(urlOrPath) {\n  return pathPattern.test(tryGetUrlPath(urlOrPath) || \"\");\n}\nfunction tryGetAssetPath(src) {\n  if (isAssetObjectStub(src))\n    return tryGetAssetPath(src.asset);\n  if (!isReference(src)) {\n    if (typeof src == \"string\")\n      return hasPath(src) ? getUrlPath(src) : void 0;\n    if (isAssetPathStub(src))\n      return src.path;\n    if (isAssetUrlStub(src))\n      return getUrlPath(src.url);\n  }\n}\nfunction getUrlPath(url) {\n  if (pathPattern.test(url))\n    return url;\n  if (!isCdnUrl(url))\n    throw new UnresolvableError(`Failed to resolve path from URL \"${url}\"`);\n  return new URL(url).pathname.replace(/^\\/+/, \"\");\n}\nconst tryGetUrlPath = getForgivingResolver(getUrlPath);\nfunction getUrlFilename(url) {\n  const filename = (tryGetUrlPath(url) || url).replace(/^(images|files)\\/[a-z0-9]+\\/[a-z0-9][-\\w]\\/*/, \"\");\n  if (!isValidFilename(filename))\n    throw new UnresolvableError(`Failed to resolve filename from URL \"${url}\"`);\n  return filename;\n}\nconst tryGetUrlFilename = getForgivingResolver(getUrlFilename);\nfunction isValidFilename(filename) {\n  return fileAssetFilenamePattern.test(filename) || imageAssetFilenamePattern.test(filename);\n}\nfunction getVanityStub(originalFilename, vanityFilename, options) {\n  const vanity = vanityFilename || originalFilename;\n  return options?.useVanityName === !1 || !vanity ? \"\" : `/${vanity}`;\n}\nconst exampleFileId = \"file-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-pdf\", exampleImageId = \"image-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-2000x3000-jpg\";\nfunction parseAssetId(documentId) {\n  if (imageAssetIdPattern.test(documentId))\n    return parseImageAssetId(documentId);\n  if (fileAssetIdPattern.test(documentId))\n    return parseFileAssetId(documentId);\n  throw new Error(`Invalid image/file asset ID: ${documentId}`);\n}\nfunction parseFileAssetId(documentId) {\n  if (!fileAssetIdPattern.test(documentId))\n    throw new Error(\n      `Malformed file asset ID '${documentId}'. Expected an id like \"${exampleFileId}\"`\n    );\n  const [, assetId, extension] = documentId.split(\"-\");\n  return { type: \"file\", assetId, extension };\n}\nfunction parseImageAssetId(documentId) {\n  const [, assetId, dimensionString, extension] = documentId.split(\"-\"), [width, height] = (dimensionString || \"\").split(\"x\").map(Number);\n  if (!assetId || !dimensionString || !extension || !(width > 0) || !(height > 0))\n    throw new Error(`Malformed asset ID '${documentId}'. Expected an id like \"${exampleImageId}\".`);\n  return { type: \"image\", assetId, width, height, extension };\n}\nfunction parseAssetFilename(filename) {\n  const file = tryGetUrlFilename(filename) || \"\";\n  if (!isValidFilename(file))\n    throw new Error(`Invalid image/file asset filename: ${filename}`);\n  try {\n    const type = imageAssetFilenamePattern.test(file) ? \"image\" : \"file\", assetId = file.replace(/\\.([a-z0-9+]+)$/i, \"-$1\");\n    return parseAssetId(`${type}-${assetId}`);\n  } catch {\n    throw new Error(`Invalid image/file asset filename: ${filename}`);\n  }\n}\nfunction parseAssetUrl(url) {\n  if (!isCdnUrl(url))\n    throw new Error(`URL is not a valid Sanity asset URL: ${url}`);\n  const path = new URL(url).pathname.replace(/^\\/+/, \"\"), [projectPath, , projectId, dataset] = path.match(pathPattern) || [];\n  if (!projectPath || !projectId || !dataset)\n    throw new Error(`URL is not a valid Sanity asset URL: ${url}`);\n  const [filename, vanityFilename] = path.slice(projectPath.length).split(\"/\");\n  return {\n    ...parseAssetFilename(filename),\n    projectId,\n    dataset,\n    vanityFilename\n  };\n}\nfunction parseImageAssetUrl(url) {\n  const parsed = parseAssetUrl(url);\n  if (parsed.type !== \"image\")\n    throw new Error(`URL is not a valid Sanity image asset URL: ${url}`);\n  return parsed;\n}\nfunction parseFileAssetUrl(url) {\n  const parsed = parseAssetUrl(url);\n  if (parsed.type !== \"file\")\n    throw new Error(`URL is not a valid Sanity file asset URL: ${url}`);\n  return parsed;\n}\nfunction getAssetUrlType(url) {\n  try {\n    return parseAssetUrl(url).type;\n  } catch {\n    return !1;\n  }\n}\nfunction getImageDimensions(src) {\n  if (isInProgressUpload(src))\n    return { width: 0, height: 0, aspectRatio: 0 };\n  const imageId = getAssetDocumentId(src), { width, height } = parseImageAssetId(imageId), aspectRatio = width / height;\n  return { width, height, aspectRatio };\n}\nconst tryGetImageDimensions = getForgivingResolver(getImageDimensions);\nfunction getExtension(src) {\n  return isInProgressUpload(src) ? inProgressAssetExtension : isFileSource(src) ? getFile(src, dummyProject).asset.extension : getImage(src, dummyProject).asset.extension;\n}\nconst tryGetExtension = getForgivingResolver(getExtension);\nfunction getImage(src, project) {\n  if (isInProgressUpload(src))\n    return {\n      asset: {\n        _id: inProgressAssetId,\n        _type: imageAssetType,\n        assetId: inProgressAssetAssetId,\n        extension: inProgressAssetExtension,\n        url: \"\",\n        path: \"\",\n        metadata: {\n          dimensions: { width: 1, height: 1, aspectRatio: 1 }\n        }\n      },\n      crop: getDefaultCrop(),\n      hotspot: getDefaultHotspot()\n    };\n  const projectDetails = project || tryGetProject(src), asset = getImageAsset(src, projectDetails), img = src;\n  return {\n    asset,\n    crop: img.crop || getDefaultCrop(),\n    hotspot: img.hotspot || getDefaultHotspot()\n  };\n}\nconst tryGetImage = getForgivingResolver(getImage);\nfunction getImageAsset(src, project) {\n  const pathOptions = { ...project || getProject(src), useVanityName: !1 }, _id = getAssetDocumentId(src), metadata = (src.asset || src).metadata || {}, { assetId, width, height, extension } = parseImageAssetId(_id), aspectRatio = width / height, baseAsset = {\n    ...isSanityImageAsset(src) ? src : {},\n    _id,\n    _type: \"sanity.imageAsset\",\n    assetId,\n    extension,\n    metadata: {\n      ...metadata,\n      dimensions: { width, height, aspectRatio }\n    },\n    // Placeholders, overwritten below\n    url: \"\",\n    path: \"\"\n  };\n  return {\n    ...baseAsset,\n    path: buildImagePath(baseAsset, pathOptions),\n    url: buildImageUrl(baseAsset, pathOptions)\n  };\n}\nconst tryGetImageAsset = getForgivingResolver(getImageAsset);\nfunction getFile(src, project) {\n  if (isInProgressUpload(src))\n    return {\n      asset: {\n        _id: inProgressAssetId,\n        _type: fileAssetType,\n        assetId: inProgressAssetAssetId,\n        extension: inProgressAssetExtension,\n        url: \"\",\n        path: \"\",\n        metadata: {}\n      }\n    };\n  const projectDetails = project || tryGetProject(src);\n  return { asset: getFileAsset(src, projectDetails) };\n}\nconst tryGetFile = getForgivingResolver(getFile);\nfunction getFileAsset(src, options) {\n  if (isInProgressUpload(src))\n    return {\n      assetId: inProgressAssetAssetId,\n      _id: inProgressAssetId,\n      _type: fileAssetType,\n      extension: inProgressAssetExtension,\n      metadata: {},\n      url: \"\",\n      path: \"\"\n    };\n  const projectDetails = { ...options || getProject(src), useVanityName: !1 }, _id = getAssetDocumentId(src), source = src.asset || src, { assetId, extension } = parseFileAssetId(_id), baseAsset = {\n    ...isSanityFileAsset(src) ? src : {},\n    _id,\n    _type: \"sanity.fileAsset\",\n    assetId,\n    extension,\n    metadata: source.metadata || {},\n    // Placeholders, overwritten below\n    url: \"\",\n    path: \"\"\n  };\n  return {\n    ...baseAsset,\n    path: buildFilePath(baseAsset, projectDetails),\n    url: buildFileUrl(baseAsset, projectDetails)\n  };\n}\nconst tryGetFileAsset = getForgivingResolver(getFileAsset);\nfunction getAssetDocumentId(src) {\n  if (isInProgressUpload(src))\n    return inProgressAssetId;\n  const source = isAssetObjectStub(src) ? src.asset : src;\n  let id = \"\";\n  if (typeof source == \"string\" ? id = getIdFromString(source) : isReference(source) ? id = source._ref : isAssetIdStub(source) ? id = source._id : isAssetPathStub(source) ? id = idFromUrl(`${cdnUrl}/${source.path}`) : isAssetUrlStub(source) && (id = idFromUrl(source.url)), !(id && idPattern.test(id)))\n    throw new UnresolvableError(src);\n  return id;\n}\nconst tryGetAssetDocumentId = getForgivingResolver(getAssetDocumentId);\nfunction getIdFromString(str) {\n  if (idPattern.test(str))\n    return str;\n  const path = isCdnUrl(str) ? new URL(str).pathname : str;\n  if (path.indexOf(\"/images\") === 0 || path.indexOf(\"/files\") === 0)\n    return idFromUrl(str);\n  if (pathPattern.test(str))\n    return idFromUrl(`${cdnUrl}/${str}`);\n  if (isFileAssetFilename(str))\n    return idFromUrl(`${cdnUrl}/files/a/b/${str}`);\n  if (isImageAssetFilename(str))\n    return idFromUrl(`${cdnUrl}/images/a/b/${str}`);\n  throw new UnresolvableError(str);\n}\nconst tryGetIdFromString = getForgivingResolver(getIdFromString);\nfunction idFromUrl(url) {\n  const path = getUrlPath(url), [type, , , fileName] = path.split(\"/\");\n  return `${type.replace(/s$/, \"\")}-${fileName.replace(/\\./g, \"-\")}`;\n}\nfunction getProject(src) {\n  const path = tryGetAssetPath(src);\n  if (!path)\n    throw new UnresolvableError(src, \"Failed to resolve project ID and dataset from source\");\n  const [, , projectId, dataset] = path.match(pathPattern) || [];\n  if (!projectId || !dataset)\n    throw new UnresolvableError(src, \"Failed to resolve project ID and dataset from source\");\n  return { projectId, dataset };\n}\nconst tryGetProject = getForgivingResolver(getProject);\nfunction isImageAssetFilename(filename) {\n  return imageAssetFilenamePattern.test(filename);\n}\nfunction isFileAssetFilename(filename) {\n  return fileAssetFilenamePattern.test(filename);\n}\nfunction isAssetFilename(filename) {\n  return isImageAssetFilename(filename) || isFileAssetFilename(filename);\n}\nfunction isFileSource(src) {\n  const assetId = tryGetAssetDocumentId(src);\n  return assetId ? assetId.startsWith(\"file-\") : !1;\n}\nfunction isImageSource(src) {\n  const assetId = tryGetAssetDocumentId(src);\n  return assetId ? assetId.startsWith(\"image-\") : !1;\n}\nfunction isSanityAssetUrl(url) {\n  return getAssetUrlType(url) !== !1;\n}\nfunction isSanityImageUrl(url) {\n  return getAssetUrlType(url) === \"image\";\n}\nfunction isSanityFileUrl(url) {\n  return getAssetUrlType(url) === \"file\";\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@sanity+asset-utils@2.3.0/node_modules/@sanity/asset-utils/dist/index.js\n");

/***/ })

};
;