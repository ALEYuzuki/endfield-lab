"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3";
exports.ids = ["vendor-chunks/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/_chunks-es/resolve.mjs":
/*!*******************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/_chunks-es/resolve.mjs ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_MAX_FIELD_DEPTH: () => (/* binding */ DEFAULT_MAX_FIELD_DEPTH),\n/* harmony export */   DEFAULT_OVERRIDEABLE_FIELDS: () => (/* binding */ DEFAULT_OVERRIDEABLE_FIELDS),\n/* harmony export */   OWN_PROPS_NAME: () => (/* binding */ OWN_PROPS_NAME),\n/* harmony export */   resolveSearchConfig: () => (/* binding */ resolveSearchConfig),\n/* harmony export */   resolveSearchConfigForBaseFieldPaths: () => (/* binding */ resolveSearchConfigForBaseFieldPaths)\n/* harmony export */ });\n/* harmony import */ var lodash_isFinite_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isFinite.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isFinite.js\");\n/* harmony import */ var lodash_uniqBy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/uniqBy.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/uniqBy.js\");\n\n\nconst DEFAULT_OVERRIDEABLE_FIELDS = [\n  \"jsonType\",\n  \"type\",\n  \"name\",\n  \"title\",\n  \"description\",\n  \"options\",\n  \"fieldsets\",\n  \"validation\",\n  \"readOnly\",\n  \"hidden\",\n  \"components\",\n  \"diffComponent\",\n  \"initialValue\",\n  \"deprecated\"\n], OWN_PROPS_NAME = \"_internal_ownProps\", DEFAULT_MAX_FIELD_DEPTH = 5, stringFieldsSymbols = {}, getStringFieldSymbol = (maxDepth) => (stringFieldsSymbols[maxDepth] || (stringFieldsSymbols[maxDepth] = Symbol(`__cachedStringFields_${maxDepth}`)), stringFieldsSymbols[maxDepth]), isReference = (type) => type.type && type.type.name === \"reference\", portableTextFields = [\"style\", \"list\"], isPortableTextBlock = (type) => type.name === \"block\" || type.type && isPortableTextBlock(type.type), isPortableTextArray = (type) => type.jsonType === \"array\" && Array.isArray(type.of) && type.of.some(isPortableTextBlock);\nfunction reduceType(type, reducer, acc, path = [], maxDepth) {\n  if (maxDepth < 0)\n    return acc;\n  const accumulator = reducer(acc, type, path);\n  return type.jsonType === \"array\" && Array.isArray(type.of) ? reduceArray(type, reducer, accumulator, path, maxDepth) : type.jsonType === \"object\" && Array.isArray(type.fields) && !isReference(type) ? reduceObject(type, reducer, accumulator, path, maxDepth) : accumulator;\n}\nfunction reduceArray(arrayType, reducer, accumulator, path, maxDepth) {\n  return arrayType.of.reduce(\n    (acc, ofType) => reduceType(ofType, reducer, acc, path, maxDepth - 1),\n    accumulator\n  );\n}\nfunction reduceObject(objectType, reducer, accumulator, path, maxDepth) {\n  const isPtBlock = isPortableTextBlock(objectType);\n  return objectType.fields.reduce((acc, field) => {\n    if (isPtBlock && portableTextFields.includes(field.name))\n      return acc;\n    const segment = [field.name].concat(field.type.jsonType === \"array\" ? [[]] : []);\n    return reduceType(field.type, reducer, acc, path.concat(segment), maxDepth - 1);\n  }, accumulator);\n}\nconst BASE_WEIGHTS = [\n  { weight: 1, path: [\"_id\"] },\n  { weight: 1, path: [\"_type\"] }\n], PREVIEW_FIELD_WEIGHT_MAP = {\n  title: 10,\n  subtitle: 5,\n  description: 1.5\n};\nfunction deriveFromPreview(type, maxDepth) {\n  const select = type?.preview?.select;\n  if (!select)\n    return [];\n  const fields = [];\n  for (const fieldName of Object.keys(select)) {\n    if (!(fieldName in PREVIEW_FIELD_WEIGHT_MAP))\n      continue;\n    const path = select[fieldName].split(\".\");\n    maxDepth > -1 && path.length - 1 > maxDepth || fields.push({\n      weight: PREVIEW_FIELD_WEIGHT_MAP[fieldName],\n      path\n    });\n  }\n  return fields;\n}\nfunction getCachedStringFieldPaths(type, maxDepth) {\n  const symbol = getStringFieldSymbol(maxDepth);\n  return type[symbol] || (type[symbol] = lodash_uniqBy_js__WEBPACK_IMPORTED_MODULE_1__(\n    [\n      ...BASE_WEIGHTS,\n      ...deriveFromPreview(type, maxDepth),\n      ...getStringFieldPaths(type, maxDepth).map((path) => ({ weight: 1, path })),\n      ...getPortableTextFieldPaths(type, maxDepth).map((path) => ({\n        weight: 1,\n        path,\n        mapWith: \"pt::text\"\n      }))\n    ],\n    (spec) => spec.path.join(\".\")\n  )), type[symbol];\n}\nfunction getCachedBaseFieldPaths(type, maxDepth) {\n  const symbol = getStringFieldSymbol(maxDepth);\n  return type[symbol] || (type[symbol] = lodash_uniqBy_js__WEBPACK_IMPORTED_MODULE_1__(\n    [...BASE_WEIGHTS, ...deriveFromPreview(type, maxDepth)],\n    (spec) => spec.path.join(\".\")\n  )), type[symbol];\n}\nfunction getStringFieldPaths(type, maxDepth) {\n  return reduceType(type, (accumulator, childType, path) => childType.jsonType === \"string\" ? [...accumulator, path] : accumulator, [], [], maxDepth);\n}\nfunction getPortableTextFieldPaths(type, maxDepth) {\n  return reduceType(type, (accumulator, childType, path) => isPortableTextArray(childType) ? [...accumulator, path] : accumulator, [], [], maxDepth);\n}\nfunction resolveSearchConfigForBaseFieldPaths(type, maxDepth) {\n  return getCachedBaseFieldPaths(type, normalizeMaxDepth(maxDepth));\n}\nfunction resolveSearchConfig(type, maxDepth) {\n  return getCachedStringFieldPaths(type, normalizeMaxDepth(maxDepth));\n}\nfunction normalizeMaxDepth(maxDepth) {\n  return !lodash_isFinite_js__WEBPACK_IMPORTED_MODULE_0__(maxDepth) || maxDepth < 1 || maxDepth > DEFAULT_MAX_FIELD_DEPTH ? DEFAULT_MAX_FIELD_DEPTH - 1 : maxDepth - 1;\n}\n\n//# sourceMappingURL=resolve.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzYW5pdHkrc2NoZW1hQDMuOTkuMF9AdHlwZXMrcmVhY3RAMTguMy4yNF9kZWJ1Z0A0LjQuMy9ub2RlX21vZHVsZXMvQHNhbml0eS9zY2hlbWEvbGliL19jaHVua3MtZXMvcmVzb2x2ZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUEwQztBQUNKO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtGQUErRix5SUFBeUksU0FBUztBQUNqUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsSUFBSSwwQkFBMEI7QUFDOUIsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyw2Q0FBTTtBQUMvQztBQUNBO0FBQ0E7QUFDQSw4REFBOEQsaUJBQWlCO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyw2Q0FBTTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSwrQ0FBUTtBQUNsQjtBQU9FO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAc2FuaXR5K3NjaGVtYUAzLjk5LjBfQHR5cGVzK3JlYWN0QDE4LjMuMjRfZGVidWdANC40LjNcXG5vZGVfbW9kdWxlc1xcQHNhbml0eVxcc2NoZW1hXFxsaWJcXF9jaHVua3MtZXNcXHJlc29sdmUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc0Zpbml0ZSBmcm9tIFwibG9kYXNoL2lzRmluaXRlLmpzXCI7XG5pbXBvcnQgdW5pcUJ5IGZyb20gXCJsb2Rhc2gvdW5pcUJ5LmpzXCI7XG5jb25zdCBERUZBVUxUX09WRVJSSURFQUJMRV9GSUVMRFMgPSBbXG4gIFwianNvblR5cGVcIixcbiAgXCJ0eXBlXCIsXG4gIFwibmFtZVwiLFxuICBcInRpdGxlXCIsXG4gIFwiZGVzY3JpcHRpb25cIixcbiAgXCJvcHRpb25zXCIsXG4gIFwiZmllbGRzZXRzXCIsXG4gIFwidmFsaWRhdGlvblwiLFxuICBcInJlYWRPbmx5XCIsXG4gIFwiaGlkZGVuXCIsXG4gIFwiY29tcG9uZW50c1wiLFxuICBcImRpZmZDb21wb25lbnRcIixcbiAgXCJpbml0aWFsVmFsdWVcIixcbiAgXCJkZXByZWNhdGVkXCJcbl0sIE9XTl9QUk9QU19OQU1FID0gXCJfaW50ZXJuYWxfb3duUHJvcHNcIiwgREVGQVVMVF9NQVhfRklFTERfREVQVEggPSA1LCBzdHJpbmdGaWVsZHNTeW1ib2xzID0ge30sIGdldFN0cmluZ0ZpZWxkU3ltYm9sID0gKG1heERlcHRoKSA9PiAoc3RyaW5nRmllbGRzU3ltYm9sc1ttYXhEZXB0aF0gfHwgKHN0cmluZ0ZpZWxkc1N5bWJvbHNbbWF4RGVwdGhdID0gU3ltYm9sKGBfX2NhY2hlZFN0cmluZ0ZpZWxkc18ke21heERlcHRofWApKSwgc3RyaW5nRmllbGRzU3ltYm9sc1ttYXhEZXB0aF0pLCBpc1JlZmVyZW5jZSA9ICh0eXBlKSA9PiB0eXBlLnR5cGUgJiYgdHlwZS50eXBlLm5hbWUgPT09IFwicmVmZXJlbmNlXCIsIHBvcnRhYmxlVGV4dEZpZWxkcyA9IFtcInN0eWxlXCIsIFwibGlzdFwiXSwgaXNQb3J0YWJsZVRleHRCbG9jayA9ICh0eXBlKSA9PiB0eXBlLm5hbWUgPT09IFwiYmxvY2tcIiB8fCB0eXBlLnR5cGUgJiYgaXNQb3J0YWJsZVRleHRCbG9jayh0eXBlLnR5cGUpLCBpc1BvcnRhYmxlVGV4dEFycmF5ID0gKHR5cGUpID0+IHR5cGUuanNvblR5cGUgPT09IFwiYXJyYXlcIiAmJiBBcnJheS5pc0FycmF5KHR5cGUub2YpICYmIHR5cGUub2Yuc29tZShpc1BvcnRhYmxlVGV4dEJsb2NrKTtcbmZ1bmN0aW9uIHJlZHVjZVR5cGUodHlwZSwgcmVkdWNlciwgYWNjLCBwYXRoID0gW10sIG1heERlcHRoKSB7XG4gIGlmIChtYXhEZXB0aCA8IDApXG4gICAgcmV0dXJuIGFjYztcbiAgY29uc3QgYWNjdW11bGF0b3IgPSByZWR1Y2VyKGFjYywgdHlwZSwgcGF0aCk7XG4gIHJldHVybiB0eXBlLmpzb25UeXBlID09PSBcImFycmF5XCIgJiYgQXJyYXkuaXNBcnJheSh0eXBlLm9mKSA/IHJlZHVjZUFycmF5KHR5cGUsIHJlZHVjZXIsIGFjY3VtdWxhdG9yLCBwYXRoLCBtYXhEZXB0aCkgOiB0eXBlLmpzb25UeXBlID09PSBcIm9iamVjdFwiICYmIEFycmF5LmlzQXJyYXkodHlwZS5maWVsZHMpICYmICFpc1JlZmVyZW5jZSh0eXBlKSA/IHJlZHVjZU9iamVjdCh0eXBlLCByZWR1Y2VyLCBhY2N1bXVsYXRvciwgcGF0aCwgbWF4RGVwdGgpIDogYWNjdW11bGF0b3I7XG59XG5mdW5jdGlvbiByZWR1Y2VBcnJheShhcnJheVR5cGUsIHJlZHVjZXIsIGFjY3VtdWxhdG9yLCBwYXRoLCBtYXhEZXB0aCkge1xuICByZXR1cm4gYXJyYXlUeXBlLm9mLnJlZHVjZShcbiAgICAoYWNjLCBvZlR5cGUpID0+IHJlZHVjZVR5cGUob2ZUeXBlLCByZWR1Y2VyLCBhY2MsIHBhdGgsIG1heERlcHRoIC0gMSksXG4gICAgYWNjdW11bGF0b3JcbiAgKTtcbn1cbmZ1bmN0aW9uIHJlZHVjZU9iamVjdChvYmplY3RUeXBlLCByZWR1Y2VyLCBhY2N1bXVsYXRvciwgcGF0aCwgbWF4RGVwdGgpIHtcbiAgY29uc3QgaXNQdEJsb2NrID0gaXNQb3J0YWJsZVRleHRCbG9jayhvYmplY3RUeXBlKTtcbiAgcmV0dXJuIG9iamVjdFR5cGUuZmllbGRzLnJlZHVjZSgoYWNjLCBmaWVsZCkgPT4ge1xuICAgIGlmIChpc1B0QmxvY2sgJiYgcG9ydGFibGVUZXh0RmllbGRzLmluY2x1ZGVzKGZpZWxkLm5hbWUpKVxuICAgICAgcmV0dXJuIGFjYztcbiAgICBjb25zdCBzZWdtZW50ID0gW2ZpZWxkLm5hbWVdLmNvbmNhdChmaWVsZC50eXBlLmpzb25UeXBlID09PSBcImFycmF5XCIgPyBbW11dIDogW10pO1xuICAgIHJldHVybiByZWR1Y2VUeXBlKGZpZWxkLnR5cGUsIHJlZHVjZXIsIGFjYywgcGF0aC5jb25jYXQoc2VnbWVudCksIG1heERlcHRoIC0gMSk7XG4gIH0sIGFjY3VtdWxhdG9yKTtcbn1cbmNvbnN0IEJBU0VfV0VJR0hUUyA9IFtcbiAgeyB3ZWlnaHQ6IDEsIHBhdGg6IFtcIl9pZFwiXSB9LFxuICB7IHdlaWdodDogMSwgcGF0aDogW1wiX3R5cGVcIl0gfVxuXSwgUFJFVklFV19GSUVMRF9XRUlHSFRfTUFQID0ge1xuICB0aXRsZTogMTAsXG4gIHN1YnRpdGxlOiA1LFxuICBkZXNjcmlwdGlvbjogMS41XG59O1xuZnVuY3Rpb24gZGVyaXZlRnJvbVByZXZpZXcodHlwZSwgbWF4RGVwdGgpIHtcbiAgY29uc3Qgc2VsZWN0ID0gdHlwZT8ucHJldmlldz8uc2VsZWN0O1xuICBpZiAoIXNlbGVjdClcbiAgICByZXR1cm4gW107XG4gIGNvbnN0IGZpZWxkcyA9IFtdO1xuICBmb3IgKGNvbnN0IGZpZWxkTmFtZSBvZiBPYmplY3Qua2V5cyhzZWxlY3QpKSB7XG4gICAgaWYgKCEoZmllbGROYW1lIGluIFBSRVZJRVdfRklFTERfV0VJR0hUX01BUCkpXG4gICAgICBjb250aW51ZTtcbiAgICBjb25zdCBwYXRoID0gc2VsZWN0W2ZpZWxkTmFtZV0uc3BsaXQoXCIuXCIpO1xuICAgIG1heERlcHRoID4gLTEgJiYgcGF0aC5sZW5ndGggLSAxID4gbWF4RGVwdGggfHwgZmllbGRzLnB1c2goe1xuICAgICAgd2VpZ2h0OiBQUkVWSUVXX0ZJRUxEX1dFSUdIVF9NQVBbZmllbGROYW1lXSxcbiAgICAgIHBhdGhcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZmllbGRzO1xufVxuZnVuY3Rpb24gZ2V0Q2FjaGVkU3RyaW5nRmllbGRQYXRocyh0eXBlLCBtYXhEZXB0aCkge1xuICBjb25zdCBzeW1ib2wgPSBnZXRTdHJpbmdGaWVsZFN5bWJvbChtYXhEZXB0aCk7XG4gIHJldHVybiB0eXBlW3N5bWJvbF0gfHwgKHR5cGVbc3ltYm9sXSA9IHVuaXFCeShcbiAgICBbXG4gICAgICAuLi5CQVNFX1dFSUdIVFMsXG4gICAgICAuLi5kZXJpdmVGcm9tUHJldmlldyh0eXBlLCBtYXhEZXB0aCksXG4gICAgICAuLi5nZXRTdHJpbmdGaWVsZFBhdGhzKHR5cGUsIG1heERlcHRoKS5tYXAoKHBhdGgpID0+ICh7IHdlaWdodDogMSwgcGF0aCB9KSksXG4gICAgICAuLi5nZXRQb3J0YWJsZVRleHRGaWVsZFBhdGhzKHR5cGUsIG1heERlcHRoKS5tYXAoKHBhdGgpID0+ICh7XG4gICAgICAgIHdlaWdodDogMSxcbiAgICAgICAgcGF0aCxcbiAgICAgICAgbWFwV2l0aDogXCJwdDo6dGV4dFwiXG4gICAgICB9KSlcbiAgICBdLFxuICAgIChzcGVjKSA9PiBzcGVjLnBhdGguam9pbihcIi5cIilcbiAgKSksIHR5cGVbc3ltYm9sXTtcbn1cbmZ1bmN0aW9uIGdldENhY2hlZEJhc2VGaWVsZFBhdGhzKHR5cGUsIG1heERlcHRoKSB7XG4gIGNvbnN0IHN5bWJvbCA9IGdldFN0cmluZ0ZpZWxkU3ltYm9sKG1heERlcHRoKTtcbiAgcmV0dXJuIHR5cGVbc3ltYm9sXSB8fCAodHlwZVtzeW1ib2xdID0gdW5pcUJ5KFxuICAgIFsuLi5CQVNFX1dFSUdIVFMsIC4uLmRlcml2ZUZyb21QcmV2aWV3KHR5cGUsIG1heERlcHRoKV0sXG4gICAgKHNwZWMpID0+IHNwZWMucGF0aC5qb2luKFwiLlwiKVxuICApKSwgdHlwZVtzeW1ib2xdO1xufVxuZnVuY3Rpb24gZ2V0U3RyaW5nRmllbGRQYXRocyh0eXBlLCBtYXhEZXB0aCkge1xuICByZXR1cm4gcmVkdWNlVHlwZSh0eXBlLCAoYWNjdW11bGF0b3IsIGNoaWxkVHlwZSwgcGF0aCkgPT4gY2hpbGRUeXBlLmpzb25UeXBlID09PSBcInN0cmluZ1wiID8gWy4uLmFjY3VtdWxhdG9yLCBwYXRoXSA6IGFjY3VtdWxhdG9yLCBbXSwgW10sIG1heERlcHRoKTtcbn1cbmZ1bmN0aW9uIGdldFBvcnRhYmxlVGV4dEZpZWxkUGF0aHModHlwZSwgbWF4RGVwdGgpIHtcbiAgcmV0dXJuIHJlZHVjZVR5cGUodHlwZSwgKGFjY3VtdWxhdG9yLCBjaGlsZFR5cGUsIHBhdGgpID0+IGlzUG9ydGFibGVUZXh0QXJyYXkoY2hpbGRUeXBlKSA/IFsuLi5hY2N1bXVsYXRvciwgcGF0aF0gOiBhY2N1bXVsYXRvciwgW10sIFtdLCBtYXhEZXB0aCk7XG59XG5mdW5jdGlvbiByZXNvbHZlU2VhcmNoQ29uZmlnRm9yQmFzZUZpZWxkUGF0aHModHlwZSwgbWF4RGVwdGgpIHtcbiAgcmV0dXJuIGdldENhY2hlZEJhc2VGaWVsZFBhdGhzKHR5cGUsIG5vcm1hbGl6ZU1heERlcHRoKG1heERlcHRoKSk7XG59XG5mdW5jdGlvbiByZXNvbHZlU2VhcmNoQ29uZmlnKHR5cGUsIG1heERlcHRoKSB7XG4gIHJldHVybiBnZXRDYWNoZWRTdHJpbmdGaWVsZFBhdGhzKHR5cGUsIG5vcm1hbGl6ZU1heERlcHRoKG1heERlcHRoKSk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVNYXhEZXB0aChtYXhEZXB0aCkge1xuICByZXR1cm4gIWlzRmluaXRlKG1heERlcHRoKSB8fCBtYXhEZXB0aCA8IDEgfHwgbWF4RGVwdGggPiBERUZBVUxUX01BWF9GSUVMRF9ERVBUSCA/IERFRkFVTFRfTUFYX0ZJRUxEX0RFUFRIIC0gMSA6IG1heERlcHRoIC0gMTtcbn1cbmV4cG9ydCB7XG4gIERFRkFVTFRfTUFYX0ZJRUxEX0RFUFRILFxuICBERUZBVUxUX09WRVJSSURFQUJMRV9GSUVMRFMsXG4gIE9XTl9QUk9QU19OQU1FLFxuICByZXNvbHZlU2VhcmNoQ29uZmlnLFxuICByZXNvbHZlU2VhcmNoQ29uZmlnRm9yQmFzZUZpZWxkUGF0aHNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlLm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/_chunks-es/resolve.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/_internal.mjs":
/*!**********************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/_internal.mjs ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_MAX_FIELD_DEPTH: () => (/* reexport safe */ _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_10__.DEFAULT_MAX_FIELD_DEPTH),\n/* harmony export */   DescriptorConverter: () => (/* binding */ DescriptorConverter),\n/* harmony export */   builtinTypes: () => (/* binding */ builtinTypes),\n/* harmony export */   extractSchema: () => (/* binding */ extractSchema),\n/* harmony export */   groupProblems: () => (/* binding */ groupProblems),\n/* harmony export */   isActionEnabled: () => (/* binding */ isActionEnabled),\n/* harmony export */   processSchemaSynchronization: () => (/* binding */ processSchemaSynchronization),\n/* harmony export */   resolveSearchConfig: () => (/* reexport safe */ _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_10__.resolveSearchConfig),\n/* harmony export */   resolveSearchConfigForBaseFieldPaths: () => (/* reexport safe */ _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_10__.resolveSearchConfigForBaseFieldPaths),\n/* harmony export */   validateMediaLibraryAssetAspect: () => (/* binding */ validateMediaLibraryAssetAspect),\n/* harmony export */   validateSchema: () => (/* binding */ validateSchema)\n/* harmony export */ });\n/* harmony import */ var _sanity_descriptors__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @sanity/descriptors */ \"(ssr)/../node_modules/.pnpm/@sanity+descriptors@1.1.1/node_modules/@sanity/descriptors/dist/index.js\");\n/* harmony import */ var _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./_chunks-es/resolve.mjs */ \"(ssr)/../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/_chunks-es/resolve.mjs\");\n/* harmony import */ var lodash_difference_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/difference.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/difference.js\");\n/* harmony import */ var groq_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! groq-js */ \"(ssr)/../node_modules/.pnpm/groq-js@1.18.0/node_modules/groq-js/dist/1.mjs\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/flatten.js\");\n/* harmony import */ var lodash_get_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/get.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/get.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/uniq.js\");\n/* harmony import */ var humanize_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! humanize-list */ \"(ssr)/../node_modules/.pnpm/humanize-list@1.0.1/node_modules/humanize-list/index.js\");\n/* harmony import */ var lodash_partition_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/partition.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/partition.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isPlainObject.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/omit.js\");\n/* harmony import */ var leven__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! leven */ \"(ssr)/../node_modules/.pnpm/leven@3.1.0/node_modules/leven/index.js\");\n/* harmony import */ var object_inspect__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! object-inspect */ \"(ssr)/../node_modules/.pnpm/object-inspect@1.13.4/node_modules/object-inspect/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst MAX_DEPTH_UKNOWN = 5;\nclass DescriptorConverter {\n  opts;\n  cache = /* @__PURE__ */ new WeakMap();\n  constructor(opts) {\n    this.opts = opts;\n  }\n  /**\n   * Returns a synchronization object for a schema.\n   *\n   * This is automatically cached in a weak map.\n   */\n  get(schema) {\n    let value = this.cache.get(schema);\n    if (value) return value;\n    const builder = new _sanity_descriptors__WEBPACK_IMPORTED_MODULE_9__.SetBuilder();\n    for (const name of schema.getLocalTypeNames()) {\n      const typeDef = convertTypeDef(schema.get(name));\n      builder.addObject(\"sanity.schema.namedType\", { name, typeDef });\n    }\n    return schema.parent && builder.addSet(this.get(schema.parent)), value = builder.build(\"sanity.schema.registry\"), this.cache.set(schema, value), value;\n  }\n}\nfunction convertCommonTypeDef(schemaType, opts) {\n  const ownProps = _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_10__.OWN_PROPS_NAME in schemaType ? schemaType[_chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_10__.OWN_PROPS_NAME] : schemaType;\n  let fields;\n  Array.isArray(ownProps.fields) && (fields = ownProps.fields.map(\n    ({ name, group, fieldset, type }) => ({\n      name,\n      typeDef: convertTypeDef(type),\n      groups: arrayifyString(group),\n      fieldset\n    })\n  ));\n  let fieldsets;\n  Array.isArray(ownProps.fieldsets) && (fieldsets = filterStringKey(\n    \"name\",\n    ownProps.fieldsets.map(\n      ({ name, title, description, group, hidden, readOnly, options }) => ({\n        name,\n        title: maybeString(title),\n        description: maybeString(description),\n        group: maybeString(group),\n        hidden: conditionalTrue(hidden),\n        readOnly: conditionalTrue(readOnly),\n        options: convertUnknown(options)\n      })\n    )\n  ));\n  let groups;\n  Array.isArray(ownProps.groups) && (groups = filterStringKey(\n    \"name\",\n    ownProps.groups.map(\n      ({ name, title, hidden, default: def }) => ({\n        name,\n        title: maybeString(title),\n        hidden: conditionalTrue(hidden),\n        default: maybeTrue(def)\n      })\n    )\n  ));\n  const reason = ownProps.deprecated?.reason;\n  return {\n    title: maybeString(ownProps.title),\n    description: maybeStringOrJSX(ownProps.description),\n    readOnly: conditionalTrue(ownProps.readOnly),\n    hidden: conditionalTrue(ownProps.hidden),\n    liveEdit: maybeTrue(ownProps.liveEdit),\n    options: convertUnknown(ownProps.options),\n    initialValue: convertUnknown(ownProps.initialValue),\n    deprecated: typeof reason == \"string\" ? { reason } : void 0,\n    placeholder: maybeString(ownProps.placeholder),\n    rows: maybeNumberAsString(ownProps.rows),\n    fields,\n    fieldsets,\n    groups\n  };\n}\nfunction convertTypeDef(schemaType, opts) {\n  const common2 = convertCommonTypeDef(schemaType);\n  if (!schemaType.type)\n    return {\n      extends: null,\n      jsonType: schemaType.jsonType,\n      ...common2\n    };\n  switch (schemaType.type.name) {\n    case \"array\":\n      return {\n        extends: \"array\",\n        of: schemaType.of.map((ofType) => ({\n          name: ofType.name,\n          typeDef: convertTypeDef(ofType)\n        })),\n        ...common2\n      };\n    case \"reference\":\n    case \"globalDocumentReference\":\n    case \"crossDatasetReference\":\n      return {\n        extends: schemaType.type.name,\n        to: filterStringKey(\n          \"name\",\n          schemaType.to.map((toType) => ({ name: toType.name || toType.type?.name || toType.type }))\n        ),\n        ...common2\n      };\n    default:\n      return { extends: schemaType.type.name, ...common2 };\n  }\n}\nfunction maybeString(val) {\n  return typeof val == \"string\" ? val : void 0;\n}\nfunction maybeNumberAsString(val) {\n  return typeof val == \"number\" ? val.toString() : void 0;\n}\nfunction maybeTrue(val) {\n  return val === !0 ? !0 : void 0;\n}\nfunction conditionalTrue(val) {\n  return typeof val == \"function\" ? FUNCTION_MARKER : maybeTrue(val);\n}\nfunction filterStringKey(key, arr) {\n  return arr.filter((obj) => typeof obj[key] == \"string\");\n}\nfunction arrayifyString(val) {\n  if (typeof val == \"string\")\n    return [val];\n  if (Array.isArray(val))\n    return val.filter((elem) => typeof elem == \"string\");\n}\nconst FUNCTION_MARKER = { __type: \"function\" }, UNKNOWN_MARKER = { __type: \"unknown\" }, UNDEFINED_MARKER = { __type: \"undefined\" }, CYCLIC_MARKER = { __type: \"cyclic\" }, MAX_DEPTH_MARKER = { __type: \"maxDepth\" };\nfunction convertUnknown(val, seen = /* @__PURE__ */ new Set(), maxDepth = MAX_DEPTH_UKNOWN) {\n  if (maxDepth === 0) return MAX_DEPTH_MARKER;\n  if (typeof val == \"string\" || typeof val == \"boolean\" || val === null || val === void 0)\n    return val;\n  if (typeof val == \"number\")\n    return { __type: \"number\", value: val.toString() };\n  if (typeof val == \"function\") return FUNCTION_MARKER;\n  if (seen.has(val))\n    return CYCLIC_MARKER;\n  if (seen.add(val), typeof val == \"object\") {\n    if (Array.isArray(val))\n      return val.map((elem) => {\n        const res = convertUnknown(elem, seen, maxDepth - 1);\n        return res === void 0 ? UNDEFINED_MARKER : res;\n      });\n    if (\"$$typeof\" in val && \"type\" in val && \"props\" in val) {\n      const { type, props } = val, strType = typeof type == \"function\" ? type.name : type;\n      return typeof strType != \"string\" ? void 0 : {\n        __type: \"jsx\",\n        type: strType,\n        props: convertUnknown(props, seen, maxDepth - 1)\n      };\n    }\n    let hasType = !1;\n    const result = {};\n    for (const [key, field] of Object.entries(val))\n      key === \"__type\" && (hasType = !0), result[key] = convertUnknown(field, seen, maxDepth - 1);\n    return hasType ? { __type: \"object\", value: result } : result;\n  }\n  return UNKNOWN_MARKER;\n}\nfunction maybeStringOrJSX(val) {\n  if (typeof val == \"string\") return val;\n  if (val && typeof val == \"object\" && \"$$typeof\" in val && \"type\" in val && \"props\" in val) {\n    const { type, props } = val, strType = typeof type == \"function\" ? type.name : type;\n    return typeof strType != \"string\" ? void 0 : { __type: \"jsx\", type: strType, props: convertUnknown(props) };\n  }\n}\nfunction processSchemaSynchronization(sync, response) {\n  return (0,_sanity_descriptors__WEBPACK_IMPORTED_MODULE_9__.processSetSynchronization)(sync, response);\n}\nconst ACTIONS_FLAG = \"__experimental_actions\", DEFAULT_ACTIONS = [\"create\", \"update\", \"delete\", \"publish\"], VALID_ACTIONS = DEFAULT_ACTIONS, readActions = (schemaType) => ACTIONS_FLAG in schemaType ? schemaType[ACTIONS_FLAG] : DEFAULT_ACTIONS, validateActions = (typeName, actions) => {\n  if (!Array.isArray(actions))\n    throw new Error(\n      `The value of <type>.${ACTIONS_FLAG} should be an array with any of the actions ${VALID_ACTIONS.join(\n        \", \"\n      )}`\n    );\n  const invalid = lodash_difference_js__WEBPACK_IMPORTED_MODULE_0__(actions, VALID_ACTIONS);\n  if (invalid.length > 0)\n    throw new Error(\n      `Invalid action${invalid.length > 1 ? \"s\" : \"\"} configured for schema type \"${typeName}\": ${invalid.join(\n        \", \"\n      )}. Valid actions are: ${VALID_ACTIONS.join(\", \")}`\n    );\n  return actions;\n}, resolveEnabledActions = (schemaType) => validateActions(schemaType.name, readActions(schemaType)), isActionEnabled = (schemaType, action) => resolveEnabledActions(schemaType).includes(action);\nvar assetSourceData = {\n  name: \"sanity.assetSourceData\",\n  title: \"Asset Source Data\",\n  type: \"object\",\n  fields: [\n    {\n      name: \"name\",\n      title: \"Source name\",\n      description: \"A canonical name for the source this asset is originating from\",\n      type: \"string\"\n    },\n    {\n      name: \"id\",\n      title: \"Asset Source ID\",\n      description: \"The unique ID for the asset within the originating source so you can programatically find back to it\",\n      type: \"string\"\n    },\n    {\n      name: \"url\",\n      title: \"Asset information URL\",\n      description: \"A URL to find more information about this asset in the originating source\",\n      type: \"string\"\n    }\n  ]\n}, fileAsset = {\n  name: \"sanity.fileAsset\",\n  title: \"File\",\n  type: \"document\",\n  fieldsets: [\n    {\n      name: \"system\",\n      title: \"System fields\",\n      description: \"These fields are managed by the system and not editable\"\n    }\n  ],\n  fields: [\n    {\n      name: \"originalFilename\",\n      type: \"string\",\n      title: \"Original file name\",\n      readOnly: !0\n    },\n    {\n      name: \"label\",\n      type: \"string\",\n      title: \"Label\"\n    },\n    {\n      name: \"title\",\n      type: \"string\",\n      title: \"Title\"\n    },\n    {\n      name: \"description\",\n      type: \"string\",\n      title: \"Description\"\n    },\n    {\n      name: \"altText\",\n      type: \"string\",\n      title: \"Alternative text\"\n    },\n    {\n      name: \"sha1hash\",\n      type: \"string\",\n      title: \"SHA1 hash\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"extension\",\n      type: \"string\",\n      title: \"File extension\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"mimeType\",\n      type: \"string\",\n      title: \"Mime type\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"size\",\n      type: \"number\",\n      title: \"File size in bytes\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"assetId\",\n      type: \"string\",\n      title: \"Asset ID\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"uploadId\",\n      type: \"string\",\n      readOnly: !0,\n      hidden: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"path\",\n      type: \"string\",\n      title: \"Path\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"url\",\n      type: \"string\",\n      title: \"Url\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"source\",\n      type: \"sanity.assetSourceData\",\n      title: \"Source\",\n      readOnly: !0,\n      fieldset: \"system\"\n    }\n  ],\n  preview: {\n    select: {\n      title: \"originalFilename\",\n      path: \"path\",\n      mimeType: \"mimeType\",\n      size: \"size\"\n    },\n    prepare(doc) {\n      return {\n        title: doc.title || doc.path.split(\"/\").slice(-1)[0],\n        subtitle: `${doc.mimeType} (${(doc.size / 1024 / 1024).toFixed(2)} MB)`\n      };\n    }\n  },\n  orderings: [\n    {\n      title: \"File size\",\n      name: \"fileSizeDesc\",\n      by: [{ field: \"size\", direction: \"desc\" }]\n    }\n  ]\n}, geopoint = {\n  title: \"Geographical Point\",\n  name: \"geopoint\",\n  type: \"object\",\n  fields: [\n    {\n      name: \"lat\",\n      type: \"number\",\n      title: \"Latitude\"\n    },\n    {\n      name: \"lng\",\n      type: \"number\",\n      title: \"Longitude\"\n    },\n    {\n      name: \"alt\",\n      type: \"number\",\n      title: \"Altitude\"\n    }\n  ]\n}, imageAsset = {\n  name: \"sanity.imageAsset\",\n  title: \"Image\",\n  type: \"document\",\n  fieldsets: [\n    {\n      name: \"system\",\n      title: \"System fields\",\n      description: \"These fields are managed by the system and not editable\"\n    }\n  ],\n  fields: [\n    {\n      name: \"originalFilename\",\n      type: \"string\",\n      title: \"Original file name\",\n      readOnly: !0\n    },\n    {\n      name: \"label\",\n      type: \"string\",\n      title: \"Label\"\n    },\n    {\n      name: \"title\",\n      type: \"string\",\n      title: \"Title\"\n    },\n    {\n      name: \"description\",\n      type: \"string\",\n      title: \"Description\"\n    },\n    {\n      name: \"altText\",\n      type: \"string\",\n      title: \"Alternative text\"\n    },\n    {\n      name: \"sha1hash\",\n      type: \"string\",\n      title: \"SHA1 hash\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"extension\",\n      type: \"string\",\n      readOnly: !0,\n      title: \"File extension\",\n      fieldset: \"system\"\n    },\n    {\n      name: \"mimeType\",\n      type: \"string\",\n      readOnly: !0,\n      title: \"Mime type\",\n      fieldset: \"system\"\n    },\n    {\n      name: \"size\",\n      type: \"number\",\n      title: \"File size in bytes\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"assetId\",\n      type: \"string\",\n      title: \"Asset ID\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"uploadId\",\n      type: \"string\",\n      readOnly: !0,\n      hidden: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"path\",\n      type: \"string\",\n      title: \"Path\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"url\",\n      type: \"string\",\n      title: \"Url\",\n      readOnly: !0,\n      fieldset: \"system\"\n    },\n    {\n      name: \"metadata\",\n      type: \"sanity.imageMetadata\",\n      title: \"Metadata\"\n    },\n    {\n      name: \"source\",\n      type: \"sanity.assetSourceData\",\n      title: \"Source\",\n      readOnly: !0,\n      fieldset: \"system\"\n    }\n  ],\n  preview: {\n    select: {\n      id: \"_id\",\n      title: \"originalFilename\",\n      mimeType: \"mimeType\",\n      size: \"size\"\n    },\n    prepare(doc) {\n      return {\n        title: doc.title || typeof doc.path == \"string\" && doc.path.split(\"/\").slice(-1)[0],\n        media: { asset: { _ref: doc.id } },\n        subtitle: `${doc.mimeType} (${(Number(doc.size) / 1024 / 1024).toFixed(2)} MB)`\n      };\n    }\n  },\n  orderings: [\n    {\n      title: \"File size\",\n      name: \"fileSizeDesc\",\n      by: [{ field: \"size\", direction: \"desc\" }]\n    }\n  ]\n}, imageCrop = {\n  name: \"sanity.imageCrop\",\n  title: \"Image crop\",\n  type: \"object\",\n  fields: [\n    {\n      name: \"top\",\n      type: \"number\"\n    },\n    {\n      name: \"bottom\",\n      type: \"number\"\n    },\n    {\n      name: \"left\",\n      type: \"number\"\n    },\n    {\n      name: \"right\",\n      type: \"number\"\n    }\n  ]\n}, imageDimensions = {\n  name: \"sanity.imageDimensions\",\n  type: \"object\",\n  title: \"Image dimensions\",\n  fields: [\n    { name: \"height\", type: \"number\", title: \"Height\", readOnly: !0 },\n    { name: \"width\", type: \"number\", title: \"Width\", readOnly: !0 },\n    { name: \"aspectRatio\", type: \"number\", title: \"Aspect ratio\", readOnly: !0 }\n  ]\n}, imageHotspot = {\n  name: \"sanity.imageHotspot\",\n  title: \"Image hotspot\",\n  type: \"object\",\n  fields: [\n    {\n      name: \"x\",\n      type: \"number\"\n    },\n    {\n      name: \"y\",\n      type: \"number\"\n    },\n    {\n      name: \"height\",\n      type: \"number\"\n    },\n    {\n      name: \"width\",\n      type: \"number\"\n    }\n  ]\n}, imageMetadata = {\n  name: \"sanity.imageMetadata\",\n  title: \"Image metadata\",\n  type: \"object\",\n  fieldsets: [\n    {\n      name: \"extra\",\n      title: \"Extra metadata\\u2026\",\n      options: {\n        collapsable: !0\n      }\n    }\n  ],\n  fields: [\n    {\n      name: \"location\",\n      type: \"geopoint\"\n    },\n    {\n      name: \"dimensions\",\n      title: \"Dimensions\",\n      type: \"sanity.imageDimensions\",\n      fieldset: \"extra\"\n    },\n    {\n      name: \"palette\",\n      type: \"sanity.imagePalette\",\n      title: \"Palette\",\n      fieldset: \"extra\"\n    },\n    {\n      name: \"lqip\",\n      title: \"LQIP (Low-Quality Image Placeholder)\",\n      type: \"string\",\n      readOnly: !0\n    },\n    {\n      name: \"blurHash\",\n      title: \"BlurHash\",\n      type: \"string\",\n      readOnly: !0\n    },\n    {\n      name: \"hasAlpha\",\n      title: \"Has alpha channel\",\n      type: \"boolean\",\n      readOnly: !0\n    },\n    {\n      name: \"isOpaque\",\n      title: \"Is opaque\",\n      type: \"boolean\",\n      readOnly: !0\n    }\n  ]\n}, imagePalette = {\n  name: \"sanity.imagePalette\",\n  title: \"Image palette\",\n  type: \"object\",\n  fields: [\n    { name: \"darkMuted\", type: \"sanity.imagePaletteSwatch\", title: \"Dark Muted\" },\n    { name: \"lightVibrant\", type: \"sanity.imagePaletteSwatch\", title: \"Light Vibrant\" },\n    { name: \"darkVibrant\", type: \"sanity.imagePaletteSwatch\", title: \"Dark Vibrant\" },\n    { name: \"vibrant\", type: \"sanity.imagePaletteSwatch\", title: \"Vibrant\" },\n    { name: \"dominant\", type: \"sanity.imagePaletteSwatch\", title: \"Dominant\" },\n    { name: \"lightMuted\", type: \"sanity.imagePaletteSwatch\", title: \"Light Muted\" },\n    { name: \"muted\", type: \"sanity.imagePaletteSwatch\", title: \"Muted\" }\n  ]\n}, imagePaletteSwatch = {\n  name: \"sanity.imagePaletteSwatch\",\n  title: \"Image palette swatch\",\n  type: \"object\",\n  fields: [\n    { name: \"background\", type: \"string\", title: \"Background\", readOnly: !0 },\n    { name: \"foreground\", type: \"string\", title: \"Foreground\", readOnly: !0 },\n    { name: \"population\", type: \"number\", title: \"Population\", readOnly: !0 },\n    { name: \"title\", type: \"string\", title: \"String\", readOnly: !0 }\n  ]\n}, slug$1 = {\n  title: \"Slug\",\n  name: \"slug\",\n  type: \"object\",\n  fields: [\n    {\n      name: \"current\",\n      title: \"Current slug\",\n      type: \"string\",\n      validation: (Rule) => Rule.required()\n    },\n    {\n      // The source field is deprecated/unused, but leaving it included and hidden\n      // to prevent rendering \"Unknown field\" warnings on legacy data\n      name: \"source\",\n      title: \"Source field\",\n      type: \"string\",\n      hidden: !0\n    }\n  ]\n};\nconst builtinTypes = [\n  assetSourceData,\n  slug$1,\n  geopoint,\n  // legacyRichDate,\n  imageAsset,\n  fileAsset,\n  imageCrop,\n  imageHotspot,\n  imageMetadata,\n  imageDimensions,\n  imagePalette,\n  imagePaletteSwatch\n], documentDefaultFields = (typeName) => ({\n  _id: {\n    type: \"objectAttribute\",\n    value: { type: \"string\" }\n  },\n  _type: {\n    type: \"objectAttribute\",\n    value: { type: \"string\", value: typeName }\n  },\n  _createdAt: {\n    type: \"objectAttribute\",\n    value: { type: \"string\" }\n  },\n  _updatedAt: {\n    type: \"objectAttribute\",\n    value: { type: \"string\" }\n  },\n  _rev: {\n    type: \"objectAttribute\",\n    value: { type: \"string\" }\n  }\n}), typesMap = /* @__PURE__ */ new Map([\n  [\"text\", { type: \"string\" }],\n  [\"url\", { type: \"string\" }],\n  [\"datetime\", { type: \"string\" }],\n  [\"date\", { type: \"string\" }],\n  [\"boolean\", { type: \"boolean\" }],\n  [\"email\", { type: \"string\" }]\n]);\nfunction extractSchema(schemaDef, extractOptions = {}) {\n  const inlineFields = /* @__PURE__ */ new Set(), documentTypes = /* @__PURE__ */ new Map(), schema = [];\n  sortByDependencies(schemaDef).forEach((typeName) => {\n    const schemaType = schemaDef.get(typeName);\n    if (schemaType === void 0)\n      return;\n    const base = convertBaseType(schemaType);\n    base !== null && (base.type === \"type\" && inlineFields.add(schemaType), base.type === \"document\" && documentTypes.set(typeName, base), schema.push(base));\n  });\n  function convertBaseType(schemaType) {\n    let typeName;\n    if (schemaType.type ? typeName = schemaType.type.name : \"jsonType\" in schemaType && (typeName = schemaType.jsonType), typeName === \"document\" && isObjectType(schemaType)) {\n      const defaultAttributes = documentDefaultFields(schemaType.name), object2 = createObject(schemaType);\n      return object2.type === \"unknown\" ? null : {\n        name: schemaType.name,\n        type: \"document\",\n        attributes: {\n          ...defaultAttributes,\n          ...object2.attributes\n        }\n      };\n    }\n    const value = convertSchemaType(schemaType);\n    return value.type === \"unknown\" ? null : value.type === \"object\" ? {\n      name: schemaType.name,\n      type: \"type\",\n      value: {\n        type: \"object\",\n        attributes: {\n          _type: {\n            type: \"objectAttribute\",\n            value: {\n              type: \"string\",\n              value: schemaType.name\n            }\n          },\n          ...value.attributes\n        }\n      }\n    } : {\n      name: schemaType.name,\n      type: \"type\",\n      value\n    };\n  }\n  function convertSchemaType(schemaType) {\n    if (inlineFields.has(schemaType.type))\n      return { type: \"inline\", name: schemaType.type.name };\n    if (schemaType.type?.type?.name === \"object\")\n      return { type: \"inline\", name: schemaType.type.name };\n    if (isStringType(schemaType))\n      return createStringTypeNodeDefintion(schemaType);\n    if (isNumberType(schemaType))\n      return createNumberTypeNodeDefintion(schemaType);\n    if (schemaType.type && typesMap.has(schemaType.type.name))\n      return typesMap.get(schemaType.type.name);\n    if (isCrossDatasetReferenceType(schemaType))\n      return { type: \"unknown\" };\n    if (isGlobalDocumentReferenceType(schemaType))\n      return { type: \"unknown\" };\n    if (isReferenceType(schemaType))\n      return createReferenceTypeNodeDefintion(schemaType);\n    if (isArrayType(schemaType))\n      return createArray(schemaType);\n    if (isObjectType(schemaType))\n      return createObject(schemaType);\n    if (lastType(schemaType)?.name === \"document\") {\n      const doc = documentTypes.get(schemaType.name);\n      return doc === void 0 ? { type: \"unknown\" } : { type: \"object\", attributes: doc?.attributes };\n    }\n    throw new Error(`Type \"${schemaType.name}\" not found`);\n  }\n  function createObject(schemaType) {\n    const attributes = {}, fields = gatherFields(schemaType);\n    for (const field of fields) {\n      const fieldIsRequired = isFieldRequired(field), value = convertSchemaType(field.type);\n      if (value === null)\n        continue;\n      hasAssetRequired(field) && value.type === \"object\" && (value.attributes.asset.optional = !1);\n      const optional = extractOptions.enforceRequiredFields ? fieldIsRequired === !1 : !0;\n      attributes[field.name] = {\n        type: \"objectAttribute\",\n        value,\n        optional\n      };\n    }\n    return Object.keys(attributes).length === 0 ? { type: \"unknown\" } : (schemaType.type?.name !== \"document\" && schemaType.name !== \"object\" && (attributes._type = {\n      type: \"objectAttribute\",\n      value: {\n        type: \"string\",\n        value: schemaType.name\n      }\n    }), {\n      type: \"object\",\n      attributes\n    });\n  }\n  function createArray(arraySchemaType) {\n    const of = [];\n    for (const item of arraySchemaType.of) {\n      const field = convertSchemaType(item);\n      field.type === \"inline\" ? of.push({\n        type: \"object\",\n        attributes: {\n          _key: createKeyField()\n        },\n        rest: field\n      }) : (field.type === \"object\" && (field.rest = {\n        type: \"object\",\n        attributes: {\n          _key: createKeyField()\n        }\n      }), of.push(field));\n    }\n    return of.length === 0 ? { type: \"null\" } : {\n      type: \"array\",\n      of: of.length > 1 ? {\n        type: \"union\",\n        of\n      } : of[0]\n    };\n  }\n  return schema;\n}\nfunction createKeyField() {\n  return {\n    type: \"objectAttribute\",\n    value: {\n      type: \"string\"\n    }\n  };\n}\nfunction isFieldRequired(field) {\n  const { validation } = field.type;\n  if (!validation)\n    return !1;\n  const rules = Array.isArray(validation) ? validation : [validation];\n  for (const rule of rules) {\n    let required = !1;\n    const proxy = new Proxy(\n      {},\n      {\n        get: (target, methodName) => () => (methodName === \"required\" && (required = !0), proxy)\n      }\n    );\n    if (typeof rule == \"function\" && (rule(proxy), required) || typeof rule == \"object\" && rule !== null && \"_required\" in rule && rule._required === \"required\")\n      return !0;\n  }\n  return !1;\n}\nfunction hasAssetRequired(field) {\n  const { validation } = field.type;\n  if (!validation)\n    return !1;\n  const rules = Array.isArray(validation) ? validation : [validation];\n  for (const rule of rules) {\n    let assetRequired = !1;\n    const proxy = new Proxy(\n      {},\n      {\n        get: (target, methodName) => () => (methodName === \"assetRequired\" && (assetRequired = !0), proxy)\n      }\n    );\n    if (typeof rule == \"function\" && (rule(proxy), assetRequired) || typeof rule == \"object\" && rule !== null && \"_rules\" in rule && Array.isArray(rule._rules) && rule._rules.some((r) => r.flag === \"assetRequired\"))\n      return !0;\n  }\n  return !1;\n}\nfunction isObjectType(typeDef) {\n  return isType(typeDef, \"object\") || typeDef.jsonType === \"object\" || \"fields\" in typeDef;\n}\nfunction isArrayType(typeDef) {\n  return isType(typeDef, \"array\");\n}\nfunction isReferenceType(typeDef) {\n  return isType(typeDef, \"reference\");\n}\nfunction isCrossDatasetReferenceType(typeDef) {\n  return isType(typeDef, \"crossDatasetReference\");\n}\nfunction isGlobalDocumentReferenceType(typeDef) {\n  return isType(typeDef, \"globalDocumentReference\");\n}\nfunction isStringType(typeDef) {\n  return isType(typeDef, \"string\");\n}\nfunction isNumberType(typeDef) {\n  return isType(typeDef, \"number\");\n}\nfunction createStringTypeNodeDefintion(stringSchemaType) {\n  const listOptions = stringSchemaType.options?.list;\n  return listOptions && Array.isArray(listOptions) ? {\n    type: \"union\",\n    of: listOptions.map((v) => ({\n      type: \"string\",\n      value: typeof v == \"string\" ? v : v.value\n    }))\n  } : {\n    type: \"string\"\n  };\n}\nfunction createNumberTypeNodeDefintion(numberSchemaType) {\n  const listOptions = numberSchemaType.options?.list;\n  return listOptions && Array.isArray(listOptions) ? {\n    type: \"union\",\n    of: listOptions.map((v) => ({\n      type: \"number\",\n      value: typeof v == \"number\" ? v : v.value\n    }))\n  } : {\n    type: \"number\"\n  };\n}\nfunction createReferenceTypeNodeDefintion(reference2) {\n  const references = gatherReferenceNames(reference2);\n  return references.length === 1 ? (0,groq_js__WEBPACK_IMPORTED_MODULE_11__.createReferenceTypeNode)(references[0]) : {\n    type: \"union\",\n    of: references.map((name) => (0,groq_js__WEBPACK_IMPORTED_MODULE_11__.createReferenceTypeNode)(name))\n  };\n}\nfunction gatherReferenceNames(type) {\n  const allReferences = gatherReferenceTypes(type);\n  return [...new Set(allReferences.map((ref) => ref.name))];\n}\nfunction gatherReferenceTypes(type) {\n  const refTo = \"to\" in type ? type.to : [];\n  return \"type\" in type && isReferenceType(type.type) ? [...gatherReferenceTypes(type.type), ...refTo] : refTo;\n}\nfunction gatherFields(type) {\n  return \"fields\" in type ? type.type ? gatherFields(type.type).concat(type.fields) : type.fields : [];\n}\nfunction isType(typeDef, typeName) {\n  let type = typeDef;\n  for (; type; ) {\n    if (type.name === typeName || type.type && type.type.name === typeName)\n      return !0;\n    type = type.type;\n  }\n  return !1;\n}\nfunction lastType(typeDef) {\n  let type = typeDef;\n  for (; type; ) {\n    if (!type.type)\n      return type;\n    type = type.type;\n  }\n}\nfunction sortByDependencies(compiledSchema) {\n  const seen = /* @__PURE__ */ new Set();\n  function walkDependencies(schemaType, dependencies) {\n    if (!seen.has(schemaType)) {\n      if (seen.add(schemaType), \"fields\" in schemaType)\n        for (const field of gatherFields(schemaType)) {\n          const last = lastType(field.type);\n          if (last.name === \"document\") {\n            dependencies.add(last);\n            continue;\n          }\n          let schemaTypeName;\n          schemaType.type.type ? schemaTypeName = field.type.type.name : \"jsonType\" in schemaType.type && (schemaTypeName = field.type.jsonType), (schemaTypeName === \"object\" || schemaTypeName === \"block\") && (isReferenceType(field.type) ? field.type.to.forEach((ref) => dependencies.add(ref.type)) : dependencies.add(field.type)), walkDependencies(field.type, dependencies);\n        }\n      else if (\"of\" in schemaType)\n        for (const item of schemaType.of)\n          walkDependencies(item, dependencies);\n    }\n  }\n  const dependencyMap = /* @__PURE__ */ new Map();\n  compiledSchema.getTypeNames().forEach((typeName) => {\n    const schemaType = compiledSchema.get(typeName);\n    if (schemaType === void 0 || schemaType.type === null)\n      return;\n    const dependencies = /* @__PURE__ */ new Set();\n    walkDependencies(schemaType, dependencies), dependencyMap.set(schemaType, dependencies), seen.clear();\n  });\n  const typeNames = [], currentlyVisiting = /* @__PURE__ */ new Set(), visited = /* @__PURE__ */ new Set();\n  function visit(type) {\n    if (visited.has(type) || currentlyVisiting.has(type))\n      return;\n    currentlyVisiting.add(type);\n    const deps = dependencyMap.get(type);\n    deps !== void 0 && deps.forEach((dep) => visit(dep)), currentlyVisiting.delete(type), visited.add(type), typeNames.includes(type.name) || typeNames.unshift(type.name);\n  }\n  for (const [type] of dependencyMap)\n    visit(type);\n  return typeNames;\n}\nconst HELP_IDS = {\n  TYPE_INVALID: \"schema-type-invalid\",\n  TYPE_IS_ESM_MODULE: \"schema-type-is-esm-module\",\n  TYPE_NAME_RESERVED: \"schema-type-name-reserved\",\n  TYPE_MISSING_NAME: \"schema-type-missing-name-or-type\",\n  TYPE_MISSING_TYPE: \"schema-type-missing-name-or-type\",\n  TYPE_TITLE_RECOMMENDED: \"schema-type-title-is-recommended\",\n  TYPE_TITLE_INVALID: \"schema-type-title-is-recommended\",\n  OBJECT_FIELDS_INVALID: \"schema-object-fields-invalid\",\n  OBJECT_FIELD_NOT_UNIQUE: \"schema-object-fields-invalid\",\n  OBJECT_FIELD_NAME_INVALID: \"schema-object-fields-invalid\",\n  OBJECT_FIELD_DEFINITION_INVALID_TYPE: \"schema-object-fields-invalid\",\n  ARRAY_PREDEFINED_CHOICES_INVALID: \"schema-predefined-choices-invalid\",\n  ARRAY_OF_ARRAY: \"schema-array-of-array\",\n  ARRAY_OF_INVALID: \"schema-array-of-invalid\",\n  ARRAY_OF_NOT_UNIQUE: \"schema-array-of-invalid\",\n  ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT: \"schema-array-of-type-global-type-conflict\",\n  ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT: \"schema-array-of-type-builtin-type-conflict\",\n  REFERENCE_TO_INVALID: \"schema-reference-to-invalid\",\n  REFERENCE_TO_NOT_UNIQUE: \"schema-reference-to-invalid\",\n  REFERENCE_INVALID_OPTIONS: \"schema-reference-invalid-options\",\n  REFERENCE_INVALID_OPTIONS_LOCATION: \"schema-reference-options-nesting\",\n  REFERENCE_INVALID_FILTER_PARAMS_COMBINATION: \"schema-reference-filter-params-combination\",\n  SLUG_SLUGIFY_FN_RENAMED: \"slug-slugifyfn-renamed\",\n  ASSET_METADATA_FIELD_INVALID: \"asset-metadata-field-invalid\",\n  CROSS_DATASET_REFERENCE_INVALID: \"cross-dataset-reference-invalid\",\n  GLOBAL_DOCUMENT_REFERENCE_INVALID: \"global-document-reference-invalid\",\n  DEPRECATED_BLOCKEDITOR_KEY: \"schema-deprecated-blockeditor-key\",\n  STANDALONE_BLOCK_TYPE: \"schema-standalone-block-type\"\n};\nfunction createValidationResult(severity, message, helpId) {\n  if (helpId && !Object.keys(HELP_IDS).some((id) => HELP_IDS[id] === helpId))\n    throw new Error(\n      `Used the unknown helpId \"${helpId}\", please add it to the array in createValidationResult.js`\n    );\n  return {\n    severity,\n    message,\n    helpId\n  };\n}\nconst error = (message, helpId) => createValidationResult(\"error\", message, helpId), warning = (message, helpId) => createValidationResult(\"warning\", message, helpId);\nfunction groupProblems(types) {\n  return lodash_flatten_js__WEBPACK_IMPORTED_MODULE_1__(types.map((type) => getTypeProblems(type))).filter(\n    (type) => type.problems.length > 0\n  );\n}\nfunction createTypeWithMembersProblemsAccessor(memberPropertyName, getMembers = (type) => lodash_get_js__WEBPACK_IMPORTED_MODULE_2__(type, memberPropertyName)) {\n  return function(type, parentPath) {\n    const currentPath = [\n      ...parentPath,\n      { kind: \"type\", type: type.type, name: type.name }\n    ], members = getMembers(type) || [], memberProblems = Array.isArray(members) ? members.map((memberType) => {\n      const propertySegment = {\n        kind: \"property\",\n        name: memberPropertyName\n      }, memberPath = [...currentPath, propertySegment];\n      return getTypeProblems(memberType, memberPath);\n    }) : [\n      [\n        {\n          path: currentPath,\n          problems: [error(`Member declaration (${memberPropertyName}) is not an array`)]\n        }\n      ]\n    ];\n    return [\n      {\n        path: currentPath,\n        problems: type._problems || []\n      },\n      ...lodash_flatten_js__WEBPACK_IMPORTED_MODULE_1__(memberProblems)\n    ];\n  };\n}\nconst arrify = (val) => Array.isArray(val) ? val : typeof val > \"u\" && [] || [val], getObjectProblems = createTypeWithMembersProblemsAccessor(\"fields\"), getImageProblems = createTypeWithMembersProblemsAccessor(\"fields\"), getFileProblems = createTypeWithMembersProblemsAccessor(\"fields\"), getArrayProblems = createTypeWithMembersProblemsAccessor(\"of\"), getReferenceProblems = createTypeWithMembersProblemsAccessor(\n  \"to\",\n  (type) => \"to\" in type ? arrify(type.to) : []\n), getBlockAnnotationProblems = createTypeWithMembersProblemsAccessor(\"marks.annotations\"), getBlockMemberProblems = createTypeWithMembersProblemsAccessor(\"of\"), getBlockProblems = (type, problems) => [\n  ...getBlockAnnotationProblems(type, problems),\n  ...getBlockMemberProblems(type, problems)\n];\nfunction getDefaultProblems(type, path = []) {\n  return [\n    {\n      path: [...path, { kind: \"type\", type: type.type, name: type.name }],\n      problems: type._problems || []\n    }\n  ];\n}\nfunction getTypeProblems(type, path = []) {\n  switch (type.type) {\n    case \"object\":\n      return getObjectProblems(type, path);\n    case \"document\":\n      return getObjectProblems(type, path);\n    case \"array\":\n      return getArrayProblems(type, path);\n    case \"reference\":\n      return getReferenceProblems(type, path);\n    case \"block\":\n      return getBlockProblems(type, path);\n    case \"image\":\n      return getImageProblems(type, path);\n    case \"file\":\n      return getFileProblems(type, path);\n    default:\n      return getDefaultProblems(type, path);\n  }\n}\nfunction getDupes(array2, selector = (v) => v) {\n  const dupes = array2.reduce((acc, item) => {\n    const key = selector(item);\n    return acc[key] || (acc[key] = []), acc[key].push(item), acc;\n  }, {});\n  return Object.keys(dupes).map((key) => dupes[key].length > 1 ? dupes[key] : null).filter(Boolean);\n}\nconst NOOP_VISITOR = (typeDef) => typeDef, TYPE_TYPE = { name: \"type\", type: null }, FUTURE_RESERVED = [\"any\", \"time\", \"date\"];\nfunction traverseSchema(types = [], coreTypes2 = [], visitor = NOOP_VISITOR) {\n  const coreTypesRegistry = /* @__PURE__ */ Object.create(null), registry = /* @__PURE__ */ Object.create(null), coreTypeNames2 = coreTypes2.map((typeDef) => typeDef.name), reservedTypeNames = FUTURE_RESERVED.concat(coreTypeNames2), typeNames = types.map((typeDef) => typeDef && typeDef.name).filter(Boolean);\n  coreTypes2.forEach((coreType) => {\n    coreTypesRegistry[coreType.name] = coreType;\n  }), types.forEach((type, i) => {\n    registry[type && type.name || `__unnamed_${i}`] = {};\n  });\n  function getType(typeName) {\n    return typeName === \"type\" ? TYPE_TYPE : coreTypesRegistry[typeName] || registry[typeName] || null;\n  }\n  const duplicateNames = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_3__(lodash_flatten_js__WEBPACK_IMPORTED_MODULE_1__(getDupes(typeNames)));\n  function isDuplicate(typeName) {\n    return duplicateNames.includes(typeName);\n  }\n  function getTypeNames() {\n    return typeNames.concat(coreTypeNames2);\n  }\n  function isReserved(typeName) {\n    return typeName === \"type\" || reservedTypeNames.includes(typeName);\n  }\n  const visitType = (isRoot) => (typeDef, index) => visitor(typeDef, {\n    visit: visitType(!1),\n    isRoot,\n    getType,\n    getTypeNames,\n    isReserved,\n    isDuplicate,\n    index\n  });\n  return coreTypes2.forEach((coreTypeDef) => {\n    Object.assign(coreTypesRegistry[coreTypeDef.name], visitType(coreTypeDef));\n  }), types.forEach((typeDef, i) => {\n    Object.assign(\n      registry[typeDef && typeDef.name || `__unnamed_${i}`],\n      visitType(!0)(typeDef, i)\n    );\n  }), {\n    get(typeName) {\n      const res = registry[typeName] || coreTypesRegistry[typeName];\n      if (res)\n        return res;\n      throw new Error(`No such type: ${typeName}`);\n    },\n    has(typeName) {\n      return typeName in registry || typeName in coreTypesRegistry;\n    },\n    getTypeNames() {\n      return Object.keys(registry);\n    },\n    getTypes() {\n      return this.getTypeNames().map(this.get);\n    },\n    toJSON() {\n      return this.getTypes();\n    }\n  };\n}\nconst coreTypes = [\n  { name: \"array\", jsonType: \"array\", type: \"type\" },\n  { name: \"block\", jsonType: \"object\", type: \"type\" },\n  { name: \"boolean\", jsonType: \"boolean\", type: \"type\" },\n  { name: \"datetime\", jsonType: \"string\", type: \"type\" },\n  { name: \"date\", jsonType: \"string\", type: \"type\" },\n  { name: \"document\", jsonType: \"object\", type: \"type\" },\n  { name: \"email\", jsonType: \"string\", type: \"type\" },\n  { name: \"file\", jsonType: \"object\", type: \"type\" },\n  { name: \"geopoint\", jsonType: \"object\", type: \"type\" },\n  { name: \"image\", jsonType: \"object\", type: \"type\" },\n  { name: \"number\", jsonType: \"number\", type: \"type\" },\n  { name: \"object\", jsonType: \"object\", type: \"type\" },\n  { name: \"reference\", jsonType: \"object\", type: \"type\" },\n  { name: \"crossDatasetReference\", jsonType: \"object\", type: \"type\" },\n  { name: \"globalDocumentReference\", jsonType: \"object\", type: \"type\" },\n  { name: \"slug\", jsonType: \"object\", type: \"type\" },\n  { name: \"span\", jsonType: \"object\", type: \"type\" },\n  { name: \"string\", jsonType: \"string\", type: \"type\" },\n  { name: \"telephone\", jsonType: \"string\", type: \"type\" },\n  { name: \"text\", jsonType: \"string\", type: \"type\" },\n  { name: \"url\", jsonType: \"string\", type: \"type\" }\n], coreTypeNames = coreTypes.map((t) => t.name);\nfunction traverseSanitySchema(schemaTypes, visitor) {\n  return traverseSchema(schemaTypes, coreTypes, visitor);\n}\nfunction isPrimitiveTypeName(typeName) {\n  return typeName === \"string\" || typeName === \"number\" || typeName === \"boolean\";\n}\nfunction isAssignable(typeName, type) {\n  return (typeof type.name == \"string\" ? type.name : type.type) === typeName;\n}\nfunction quote$2(n) {\n  return `\"${n}\"`;\n}\nfunction pluralize(arr, suf = \"s\") {\n  return arr.length === 1 ? \"\" : suf;\n}\nfunction format(value) {\n  return Array.isArray(value) ? `array with ${value.length} entries` : typeof value == \"object\" && value !== null ? `object with keys ${humanize_list__WEBPACK_IMPORTED_MODULE_4__(Object.keys(value).map(quote$2))}` : quote$2(value);\n}\nvar array = (typeDef, visitorContext) => {\n  const ofIsArray = Array.isArray(typeDef.of);\n  if (ofIsArray) {\n    const invalid = typeDef.of.reduce((errs, def, idx) => {\n      if (typeof def.name == \"string\" && // specifying the same name as the type is redundant, but should not be a hard error at this point\n      // Consider showing a warning for this and deprecate this ability eventually\n      def.name !== def.type && coreTypeNames.includes(def.name))\n        return errs.concat(\n          error(\n            `Found array member declaration with the same type name as a built-in type (\"${def.name}\"). Array members can not be given the same name as a built-in type.`,\n            HELP_IDS.ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT\n          )\n        );\n      if (def.type === \"object\" && def.name && visitorContext.getType(def.name))\n        return errs.concat(\n          warning(\n            `Found array member declaration with the same name as the global schema type \"${def.name}\". It's recommended to use a unique name to avoid possibly incompatible data types that shares the same name.`,\n            HELP_IDS.ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT\n          )\n        );\n      if (def.type === \"array\")\n        return errs.concat(\n          error(\n            'Found array member declaration of type \"array\" - multidimensional arrays are not currently supported by Sanity',\n            HELP_IDS.ARRAY_OF_ARRAY\n          )\n        );\n      if (def)\n        return errs;\n      const err = `Found ${def === null ? \"null\" : typeof def}, expected member declaration`;\n      return errs.concat(\n        error(\n          `Found invalid type member declaration in array at index ${idx}: ${err}`,\n          HELP_IDS.ARRAY_OF_INVALID\n        )\n      );\n    }, []);\n    if (invalid.length > 0)\n      return {\n        ...typeDef,\n        of: [],\n        _problems: invalid\n      };\n  }\n  const problems = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_1__([\n    ofIsArray ? getDupes(typeDef.of, (t) => `${t.name};${t.type}`).map(\n      (dupes) => error(\n        `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in array. This makes it impossible to tell their values apart and you should consider naming them`,\n        HELP_IDS.ARRAY_OF_NOT_UNIQUE\n      )\n    ) : error(\n      'The array type is missing or having an invalid value for the required \"of\" property',\n      HELP_IDS.ARRAY_OF_INVALID\n    )\n  ]), of = ofIsArray ? typeDef.of : [], hasObjectTypesWithoutName = of.some(\n    (type) => type.type === \"object\" && typeof type.name > \"u\"\n  );\n  of.some((ofType) => ofType.type === \"block\") && hasObjectTypesWithoutName && problems.push(\n    error(\n      \"The array type's 'of' property can't have an object type without a 'name' property as member, when the 'block' type is also a member of that array.\",\n      HELP_IDS.ARRAY_OF_INVALID\n    )\n  );\n  const [primitiveTypes, objectTypes] = lodash_partition_js__WEBPACK_IMPORTED_MODULE_5__(\n    of,\n    (ofType) => isPrimitiveTypeName(ofType.type) || isPrimitiveTypeName(visitorContext.getType(ofType.type)?.jsonType)\n  ), isMixedArray = primitiveTypes.length > 0 && objectTypes.length > 0;\n  if (isMixedArray) {\n    const primitiveTypeNames = primitiveTypes.map((t) => t.type), objectTypeNames = objectTypes.map((t) => t.type);\n    problems.push(\n      error(\n        `The array type's 'of' property can't have both object types and primitive types (found primitive type ${pluralize(\n          primitiveTypeNames\n        )} ${humanize_list__WEBPACK_IMPORTED_MODULE_4__(primitiveTypeNames.map(quote$2))} and object type${pluralize(\n          objectTypeNames\n        )} ${humanize_list__WEBPACK_IMPORTED_MODULE_4__(objectTypeNames.map(quote$2))})`,\n        HELP_IDS.ARRAY_OF_INVALID\n      )\n    );\n  }\n  const list = typeDef?.options?.list;\n  return !isMixedArray && Array.isArray(list) && (primitiveTypes.length > 0 ? list.forEach((option) => {\n    const value = option?.value ?? option;\n    if (!primitiveTypes.some((primitiveType) => typeof value === visitorContext.getType(primitiveType.type).jsonType)) {\n      const formattedTypeList = humanize_list__WEBPACK_IMPORTED_MODULE_4__(\n        primitiveTypes.map((t) => t.name || t.type),\n        { conjunction: \"or\" }\n      );\n      problems.push(\n        error(\n          `An invalid entry found in options.list: ${format(\n            value\n          )}. Must be either a value of type ${formattedTypeList}, or an object with {title: string, value: ${formattedTypeList}}`,\n          HELP_IDS.ARRAY_PREDEFINED_CHOICES_INVALID\n        )\n      );\n    }\n  }) : list.forEach((option) => {\n    const optionTypeName = option._type || \"object\";\n    objectTypes.some(\n      (validObjectType) => isAssignable(optionTypeName, validObjectType)\n    ) || problems.push(\n      error(\n        `An invalid entry found in options.list: ${format(\n          option\n        )}. Must be an object with \"_type\" set to ${humanize_list__WEBPACK_IMPORTED_MODULE_4__(\n          objectTypes.map((t) => t.name || t.type).map((t) => t === \"object\" ? \"undefined\" : quote$2(t)),\n          { conjunction: \"or\" }\n        )}`,\n        HELP_IDS.ARRAY_PREDEFINED_CHOICES_INVALID\n      )\n    );\n  })), typeDef?.options?.list && typeDef?.options?.layout === \"tags\" && problems.push(\n    warning(\n      \"Found array member declaration with both tags layout and a list of predefined values. If you want to display a list of predefined values, remove the tags layout from `options`.\"\n    )\n  ), {\n    ...typeDef,\n    of: of.map(visitorContext.visit),\n    _problems: problems\n  };\n};\nfunction isJSONTypeOf(type, jsonType, visitorContext) {\n  if (\"jsonType\" in type)\n    return type.jsonType === jsonType;\n  const parentType = visitorContext.getType(type.type);\n  if (!parentType)\n    throw new Error(`Could not resolve jsonType of ${type.name}. No parent type found`);\n  return isJSONTypeOf(parentType, jsonType, visitorContext);\n}\nconst getTypeOf = (thing) => Array.isArray(thing) ? \"array\" : typeof thing, quote$1 = (str) => `\"${str}\"`, allowedKeys = [\n  \"components\",\n  \"lists\",\n  \"marks\",\n  \"name\",\n  \"of\",\n  \"options\",\n  \"styles\",\n  \"title\",\n  \"type\",\n  \"validation\"\n], allowedMarkKeys = [\"decorators\", \"annotations\"], allowedStyleKeys = [\"blockEditor\", \"title\", \"value\", \"icon\", \"component\"], allowedDecoratorKeys = [\"blockEditor\", \"title\", \"value\", \"icon\", \"component\"], allowedListKeys = [\"title\", \"value\", \"icon\", \"component\"], supportedBuiltInObjectTypes = [\n  \"file\",\n  \"image\",\n  \"object\",\n  \"reference\",\n  \"crossDatasetReference\",\n  \"globalDocumentReference\"\n];\nfunction validateBlockType(typeDef, visitorContext) {\n  const problems = [];\n  let styles = typeDef.styles, lists = typeDef.lists, marks = typeDef.marks, members = typeDef.of;\n  const disallowedKeys = Object.keys(typeDef).filter(\n    (key) => !allowedKeys.includes(key) && !key.startsWith(\"_\")\n  );\n  return disallowedKeys.length > 0 && problems.push(\n    error(\n      `Found unknown properties for block declaration: ${humanize_list__WEBPACK_IMPORTED_MODULE_4__(\n        disallowedKeys.map(quote$1)\n      )}`\n    )\n  ), marks && (marks = validateMarks(typeDef.marks, visitorContext, problems)), styles && (styles = validateStyles(styles, visitorContext, problems)), lists && (lists = validateLists(lists, visitorContext, problems)), members && (members = validateMembers(members, visitorContext, problems)), {\n    ...lodash_omit_js__WEBPACK_IMPORTED_MODULE_7__(typeDef, disallowedKeys),\n    marks,\n    styles,\n    name: typeDef.name || typeDef.type,\n    of: members,\n    _problems: problems\n  };\n}\nfunction validateMarks(marks, visitorContext, problems) {\n  let decorators = marks.decorators, annotations = marks.annotations;\n  if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(marks))\n    return problems.push(error(`\"marks\" declaration should be an object, got ${getTypeOf(marks)}`)), problems;\n  const disallowedMarkKeys = Object.keys(marks).filter(\n    (key) => !allowedMarkKeys.includes(key) && !key.startsWith(\"_\")\n  );\n  return disallowedMarkKeys.length > 0 && problems.push(\n    error(\n      `Found unknown properties for block declaration: ${humanize_list__WEBPACK_IMPORTED_MODULE_4__(\n        disallowedMarkKeys.map(quote$1)\n      )}`\n    )\n  ), decorators && !Array.isArray(decorators) ? problems.push(\n    error(`\"marks.decorators\" declaration should be an array, got ${getTypeOf(decorators)}`)\n  ) : decorators && (decorators.filter((dec) => !!dec.blockEditor).forEach((dec) => {\n    dec.icon = dec.blockEditor.icon, dec.component = dec.blockEditor.render;\n  }), decorators = validateDecorators(decorators, visitorContext, problems)), annotations && !Array.isArray(annotations) ? problems.push(\n    error(`\"marks.annotations\" declaration should be an array, got ${getTypeOf(annotations)}`)\n  ) : annotations && (annotations = validateAnnotations(annotations, visitorContext, problems)), { ...marks, decorators, annotations };\n}\nfunction validateLists(lists, visitorContext, problems) {\n  return Array.isArray(lists) ? (lists.forEach((list, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(list)) {\n      problems.push(error(`List must be an object, got ${getTypeOf(list)}`));\n      return;\n    }\n    const name = list.value || `#${index}`, disallowedKeys = Object.keys(list).filter(\n      (key) => !allowedListKeys.includes(key) && !key.startsWith(\"_\")\n    );\n    disallowedKeys.length > 0 && problems.push(\n      error(\n        `Found unknown properties for list ${name}: ${humanize_list__WEBPACK_IMPORTED_MODULE_4__(disallowedKeys.map(quote$1))}`\n      )\n    ), list.value ? typeof list.value != \"string\" ? problems.push(\n      error(\n        `List type #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n          list.value\n        )}`\n      )\n    ) : list.title || problems.push(warning(`List type ${name} is missing recommended \"title\" property`)) : problems.push(error(`List #${index} is missing required \"value\" property`));\n  }), lists) : (problems.push(error(`\"lists\" declaration should be an array, got ${getTypeOf(lists)}`)), problems);\n}\nfunction validateStyles(styles, visitorContext, problems) {\n  return Array.isArray(styles) ? (styles.forEach((style, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(style)) {\n      problems.push(error(`Style must be an object, got ${getTypeOf(style)}`));\n      return;\n    }\n    const name = style.value || `#${index}`, disallowedKeys = Object.keys(style).filter(\n      (key) => !allowedStyleKeys.includes(key) && !key.startsWith(\"_\")\n    );\n    disallowedKeys.length > 0 && problems.push(\n      error(\n        `Found unknown properties for style ${name}: ${humanize_list__WEBPACK_IMPORTED_MODULE_4__(disallowedKeys.map(quote$1))}`\n      )\n    ), style.value ? typeof style.value != \"string\" ? problems.push(\n      error(\n        `Style #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n          style.value\n        )}`\n      )\n    ) : style.title || problems.push(warning(`Style ${name} is missing recommended \"title\" property`)) : problems.push(error(`Style #${index} is missing required \"value\" property`)), typeof style.blockEditor < \"u\" && (problems.push(\n      warning(\n        'Style has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.',\n        HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY\n      )\n    ), style.component = style.component || style.blockEditor.render);\n  }), styles) : (problems.push(error(`\"styles\" declaration should be an array, got ${getTypeOf(styles)}`)), problems);\n}\nfunction validateDecorators(decorators, visitorContext, problems) {\n  return decorators.forEach((decorator, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(decorator)) {\n      problems.push(error(`Annotation must be an object, got ${getTypeOf(decorator)}`));\n      return;\n    }\n    const name = decorator.value || `#${index}`, disallowedKeys = Object.keys(decorator).filter(\n      (key) => !allowedDecoratorKeys.includes(key) && !key.startsWith(\"_\")\n    );\n    disallowedKeys.length > 0 && problems.push(\n      error(\n        `Found unknown properties for decorator ${name}: ${humanize_list__WEBPACK_IMPORTED_MODULE_4__(\n          disallowedKeys.map(quote$1)\n        )}`\n      )\n    ), decorator.value ? typeof decorator.value != \"string\" ? problems.push(\n      error(\n        `Decorator #${index} has an invalid \"value\" property, expected string, got ${getTypeOf(\n          decorator.value\n        )}`\n      )\n    ) : decorator.title || problems.push(warning(`Decorator ${name} is missing recommended \"title\" property`)) : problems.push(error(`Decorator #${index} is missing required \"value\" property`)), typeof decorator.blockEditor < \"u\" && (problems.push(\n      warning(\n        `Decorator \"${name}\" has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.`,\n        HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY\n      )\n    ), decorator.icon = decorator.icon || decorator.blockEditor.icon, decorator.component = decorator.component || decorator.blockEditor.render);\n  }), decorators;\n}\nfunction validateAnnotations(annotations, visitorContext, problems) {\n  return annotations.map((annotation) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(annotation))\n      return {\n        ...annotation,\n        _problems: [error(`Annotation must be an object, got ${getTypeOf(annotation)}`)]\n      };\n    const { _problems } = visitorContext.visit(annotation, visitorContext), targetType = annotation.type && visitorContext.getType(annotation.type);\n    return targetType && !isJSONTypeOf(targetType, \"object\", visitorContext) && _problems.push(\n      error(\n        `Annotation cannot have type \"${annotation.type}\" - annotation types must inherit from object`\n      )\n    ), typeof annotation.blockEditor < \"u\" && (problems.push(\n      warning(\n        'Annotation has deprecated key \"blockEditor\", please refer to the documentation on how to configure the block type for version 3.',\n        HELP_IDS.DEPRECATED_BLOCKEDITOR_KEY\n      )\n    ), annotation.icon = annotation.icon || annotation.blockEditor.icon, annotation.blockEditor?.render && !annotation.components?.annotation && (annotation.components = annotation.components || {}, annotation.components.annotation = annotation.components.annotation || annotation.blockEditor.render)), { ...annotation, _problems };\n  });\n}\nfunction validateMembers(members, visitorContext, problems) {\n  if (!Array.isArray(members)) {\n    problems.push(error(`\"of\" declaration should be an array, got ${getTypeOf(members)}`));\n    return;\n  }\n  return members.map((member) => {\n    const { _problems } = visitorContext.visit(member, visitorContext);\n    if (member.type === \"object\" && member.name && visitorContext.getType(member.name))\n      return {\n        ...member,\n        _problems: [\n          warning(\n            `Found array member declaration with the same name as the global schema type \"${member.name}\". It's recommended to use a unique name to avoid possibly incompatible data types that shares the same name.`,\n            HELP_IDS.ARRAY_OF_TYPE_GLOBAL_TYPE_CONFLICT\n          )\n        ]\n      };\n    let type = member;\n    for (; type && !type.jsonType; )\n      type = visitorContext.getType(type.type);\n    const nonObjectCoreTypes = coreTypeNames.filter((n) => !supportedBuiltInObjectTypes.includes(n));\n    return (\n      // Must be object-like type (to validate hoisted types)\n      type && type.jsonType !== \"object\" || // Can't be a core type, or core object type that isn't supported (like 'span')\n      nonObjectCoreTypes.some((coreName) => coreName === member.type) ? {\n        ...member,\n        _problems: [\n          error(\n            `Block member types must be a supported object-like type. The following built-in types are supported: '${supportedBuiltInObjectTypes.join(\n              \"', '\"\n            )}'. You can also use shorthands for previously defined object types like {type: 'myObjectType'}`,\n            HELP_IDS.ARRAY_OF_TYPE_BUILTIN_TYPE_CONFLICT\n          )\n        ]\n      } : { ...member, _problems }\n    );\n  });\n}\nfunction validateNonObjectFieldsProp(typeDef, visitorContext) {\n  if (!(\"fields\" in typeDef))\n    return [];\n  let type = typeDef;\n  for (; type && !type.jsonType; )\n    type = visitorContext.getType(type.type);\n  return type && type.jsonType !== \"object\" ? [error('Type has propery \"fields\", but is not an object/document type.')] : [];\n}\nconst quote = (str) => `\"${str}\"`;\nfunction validateTypeName(typeName, visitorContext) {\n  const possibleTypeNames = visitorContext.getTypeNames();\n  if (!typeName)\n    return [error(\"Type is missing a type.\", HELP_IDS.TYPE_MISSING_TYPE)];\n  if (typeof typeName != \"string\")\n    return [\n      error(\n        'Type has an invalid \"type\"-property - should be a string.',\n        HELP_IDS.TYPE_MISSING_TYPE\n      )\n    ];\n  if (!possibleTypeNames.includes(typeName)) {\n    const suggestions = possibleTypeNames.map((possibleTypeName) => [leven__WEBPACK_IMPORTED_MODULE_8__(typeName, possibleTypeName), possibleTypeName]).filter(([distance]) => distance < 3).map(([_, name]) => name), suggestion = suggestions.length > 0 ? ` Did you mean ${humanize_list__WEBPACK_IMPORTED_MODULE_4__(suggestions.map(quote), { conjunction: \"or\" })}?` : \"\";\n    return [error(`Unknown type: ${typeName}.${suggestion}`)];\n  }\n  return [];\n}\nfunction validateDeprecatedProperties(type) {\n  const warnings = [];\n  return type?.inputComponent && warnings.push(\n    warning('The \"inputComponent\" property is deprecated. Use \"components.input\" instead.')\n  ), type?.preview?.component && warnings.push(\n    warning('The \"preview.component\" property is deprecated. Use \"components.preview\" instead.')\n  ), type?.diffComponent && warnings.push(\n    warning('The \"diffComponent\" property is deprecated. Use \"components.diff\" instead.')\n  ), type?.options?.editModal && warnings.push(\n    warning('The \"options.editModal\" property is deprecated. Use \"options.modal\" instead.')\n  ), type?.options?.isHighlighted && warnings.push(\n    warning(\n      'The \"options.isHighlighted\" property is deprecated. You can put fields behind a collapsed fieldset if you want to hide them from plain sight.'\n    )\n  ), warnings;\n}\nvar common = (typeDef, visitorContext) => ({\n  ...typeDef,\n  _problems: [\n    ...validateTypeName(typeDef.type, visitorContext),\n    ...validateNonObjectFieldsProp(typeDef, visitorContext),\n    ...validateDeprecatedProperties(typeDef)\n  ].filter(Boolean)\n});\nfunction normalizeToProp$2(typeDef) {\n  return Array.isArray(typeDef.to) ? typeDef.to : typeDef.to ? [typeDef.to] : typeDef.to;\n}\nconst VALID_DATASET = /^[a-z0-9~][-_a-z0-9]+$/;\nfunction isValidDatasetName(name) {\n  return name.length >= 2 && name.toLowerCase() === name && VALID_DATASET.test(name) || `The provided dataset \"${name}\" doesn't look like a valid dataset. Dataset names must be more than 2 characters, can only contain lowercase characters, numbers, underscores and dashes and can not start with a dash or an underscore`;\n}\nvar crossDatasetReference = (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(typeDef.to), normalizedTo = normalizeToProp$2(typeDef), problems = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_1__([\n    isValidTo ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map(\n      (dupes) => error(\n        `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n      )\n    ) : error(\n      'The cross dataset reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n      HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n    )\n  ]);\n  if (isValidTo && normalizedTo.length === 0 && problems.push(\n    error(\n      'The cross dataset reference type should define at least one referenced type. Please check the \"to\" property.',\n      HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n    )\n  ), normalizedTo.forEach((crossDatasetTypeDef, index) => {\n    crossDatasetTypeDef.type || problems.push(\n      error(\n        `The referenced type at index ${index} must be named. Specify the name of the type you want to create references to.`,\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n      )\n    ), lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(crossDatasetTypeDef.preview) || problems.push(\n      error(\n        `Missing required preview config for the referenced type \"${crossDatasetTypeDef.type || \"<unknown type>\"}\"`,\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n      )\n    );\n  }), typeof typeDef.dataset == \"string\") {\n    const datasetValidation = isValidDatasetName(typeDef.dataset);\n    datasetValidation !== !0 && problems.push(error(datasetValidation, HELP_IDS.CROSS_DATASET_REFERENCE_INVALID));\n  } else\n    problems.push(\n      error(\n        \"A cross dataset reference must specify a `dataset`\",\n        HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n      )\n    );\n  return typeDef.studioUrl && typeof typeDef.studioUrl != \"function\" && problems.push(\n    error(\n      'The \"studioUrl\" property on a cross dataset reference must be a function taking \"{id, type}\" as argument and returning a studio url.',\n      HELP_IDS.CROSS_DATASET_REFERENCE_INVALID\n    )\n  ), problems.push(...getOptionErrors$2(typeDef)), {\n    ...typeDef,\n    _problems: problems\n  };\n};\nfunction getOptionErrors$2(typeDef) {\n  const { options } = typeDef, problems = [];\n  return problems.push(\n    ...[\"filter\", \"filterParams\"].filter((key) => key in typeDef).map(\n      (key) => error(\n        `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n        HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION\n      )\n    )\n  ), options ? lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(options) ? typeof options.filter == \"function\" && typeof options.filterParams < \"u\" ? problems.concat(\n    error(\n      \"`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.\",\n      HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION\n    )\n  ) : typeof options.filter == \"function\" || !options.filter && !options.filterParams ? problems : typeof options.filter != \"string\" ? problems.concat(\n    error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`)\n  ) : typeof options.filterParams < \"u\" && !lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(options.filterParams) ? problems.concat(error(\"If set, `filterParams` must be an object.\")) : options.filterParams ? problems.concat(\n    Object.keys(options.filterParams).filter((key) => key.startsWith(\"__\") || key.startsWith(\"$\")).map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`))\n  ) : problems : problems.concat(\n    error(\n      \"The reference type expects `options` to be an object\",\n      HELP_IDS.REFERENCE_INVALID_OPTIONS\n    )\n  ) : problems;\n}\nconst REACT_SYM_RE = /^Symbol\\(react\\..+\\)$/;\nfunction isComponentLike(value) {\n  return typeof value == \"function\" || typeof value?.$$typeof == \"symbol\" && REACT_SYM_RE.test(String(value?.$$typeof));\n}\nfunction validateComponent(typeDef) {\n  const components = \"components\" in typeDef ? typeDef.components : !1;\n  if (!components)\n    return [];\n  const warnings = [];\n  return components.input && !isComponentLike(components.input) && warnings.push(\n    warning(\n      `The \\`components.input\\` property is set but does not appear to be a valid React component (expected a function, but saw ${object_inspect__WEBPACK_IMPORTED_MODULE_12__(\n        components.input\n      )}). If you have imported a custom input component, please verify that you have imported the correct named/default export.`\n    )\n  ), components.field && !isComponentLike(components.field) && warnings.push(\n    warning(\n      `The \\`components.field\\` property is set but does not appear to be a valid React component (expected a function, but saw ${object_inspect__WEBPACK_IMPORTED_MODULE_12__(\n        components.field\n      )}). If you have imported a custom field component, please verify that you have imported the correct named/default export.`\n    )\n  ), components.item && !isComponentLike(components.item) && warnings.push(\n    warning(\n      `The \\`components.item\\` property is set but does not appear to be a valid React component (expected a function, but saw ${object_inspect__WEBPACK_IMPORTED_MODULE_12__(\n        components.item\n      )}). If you have imported a custom item component, please verify that you have imported the correct named/default export.`\n    )\n  ), components.preview && !isComponentLike(components.preview) && warnings.push(\n    warning(\n      `The \\`components.preview\\` property is set but does not appear to be a valid React component (expected a function, but saw ${object_inspect__WEBPACK_IMPORTED_MODULE_12__(\n        components.preview\n      )}). If you have imported a custom preview component, please verify that you have imported the correct named/default export.`\n    )\n  ), warnings;\n}\nconst VALID_FIELD_RE = /^[A-Za-z]+[0-9A-Za-z_]*$/, CONVENTIONAL_FIELD_RE = /^[A-Za-z_]+[0-9A-Za-z_]*$/;\nfunction validateFieldName(name) {\n  return typeof name != \"string\" ? [\n    error(\n      `Field names must be strings. Saw \"${object_inspect__WEBPACK_IMPORTED_MODULE_12__(name)}\"`,\n      HELP_IDS.OBJECT_FIELD_NAME_INVALID\n    )\n  ] : name.startsWith(\"_\") ? [\n    error(\n      `Invalid field name \"${name}\". Field names cannot start with underscores \"_\" as it's reserved for system fields.`,\n      HELP_IDS.OBJECT_FIELD_NAME_INVALID\n    )\n  ] : VALID_FIELD_RE.test(name) ? CONVENTIONAL_FIELD_RE.test(name) ? [] : [\n    warning(\n      \"Thats an interesting field name for sure! But it is... how to put it... a bit... unconventional? It may be wise to keep special characters out of field names for easier access later on.\"\n    ),\n    HELP_IDS.OBJECT_FIELD_NAME_INVALID\n  ] : [\n    error(\n      `Invalid field name: \"${name}\". Fields can only contain characters from A-Z, numbers and underscores and should not start with a number (must pass the regular expression ${String(\n        VALID_FIELD_RE\n      )}).`,\n      HELP_IDS.OBJECT_FIELD_NAME_INVALID\n    )\n  ];\n}\nfunction validateField(field, _visitorContext) {\n  if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(field))\n    return [\n      error(\n        `Incorrect type for field definition - should be an object, saw ${object_inspect__WEBPACK_IMPORTED_MODULE_12__(field)}`,\n        HELP_IDS.OBJECT_FIELD_DEFINITION_INVALID_TYPE\n      )\n    ];\n  const problems = [];\n  return problems.push(\n    ...\"name\" in field ? validateFieldName(field.name) : [error(\"Missing field name\", HELP_IDS.OBJECT_FIELD_NAME_INVALID)]\n  ), problems.push(...validateComponent(field)), problems;\n}\nfunction getDuplicateFields(array2) {\n  const dupes = {};\n  return array2.forEach((field) => {\n    dupes[field.name] || (dupes[field.name] = []), dupes[field.name].push(field);\n  }), Object.keys(dupes).map((fieldName) => dupes[fieldName].length > 1 ? dupes[fieldName] : null).filter(Boolean);\n}\nfunction validateFields(fields, options = { allowEmpty: !1 }) {\n  const problems = [];\n  if (!Array.isArray(fields))\n    return [\n      error(\n        `The \"fields\" property must be an array of fields. Instead saw \"${typeof fields}\"`,\n        HELP_IDS.OBJECT_FIELDS_INVALID\n      )\n    ];\n  const fieldsWithNames = fields.filter((field) => typeof field.name == \"string\");\n  getDuplicateFields(fieldsWithNames).forEach((dupes) => {\n    problems.push(\n      error(\n        `Found ${dupes.length} fields with name \"${dupes[0].name}\" in object`,\n        HELP_IDS.OBJECT_FIELD_NOT_UNIQUE\n      )\n    );\n  }), fields.length === 0 && !options.allowEmpty && problems.push(error(\"Object should have at least one field\", HELP_IDS.OBJECT_FIELDS_INVALID));\n  const standaloneBlockFields = fields.filter((field) => field.type === \"block\").map((field) => `\"${field.name}\"`);\n  if (standaloneBlockFields.length > 0) {\n    const fmtFields = standaloneBlockFields.join(\", \");\n    problems.push(\n      error(\n        `Invalid standalone block field(s) ${fmtFields}. Block content must be defined as an array of blocks`,\n        HELP_IDS.STANDALONE_BLOCK_TYPE\n      )\n    );\n  }\n  return problems;\n}\nfunction validatePreview(preview) {\n  return lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(preview) ? typeof preview.prepare < \"u\" && typeof preview.prepare != \"function\" ? [\n    error(\n      `The \"preview.prepare\" property must be a function, instead saw \"${typeof preview.prepare}\"`\n    )\n  ] : preview.select ? lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(preview.select) ? Object.keys(preview.select).reduce((errs, key) => typeof preview.select[key] == \"string\" ? errs : errs.concat(\n    error(\n      `The key \"${key}\" of \"preview.select\" must be a string, instead saw \"${typeof preview.select[key]}\"`\n    )\n  ), []) : [\n    error(\n      `The \"preview.select\" property must be an object, instead saw \"${typeof preview.prepare}\"`\n    )\n  ] : [] : [error(`The \"preview\" property must be an object, instead saw \"${typeof preview}\"`)];\n}\nvar object = (typeDef, visitorContext) => {\n  let problems = validateFields(typeDef.fields), preview = typeDef.preview;\n  if (preview) {\n    const previewErrors = validatePreview(typeDef.preview);\n    problems = problems.concat(previewErrors), preview = previewErrors.some((err) => err.severity === \"error\") ? {} : preview;\n  }\n  return typeDef.type !== \"document\" && typeDef.type !== \"object\" && typeof typeDef.initialValue < \"u\" && problems.push(\n    error('The \"initialValue\" property is currently only supported for document & object types.')\n  ), {\n    ...typeDef,\n    preview,\n    fields: (Array.isArray(typeDef.fields) ? typeDef.fields : []).map((field, index) => {\n      const { name, ...fieldTypeDef } = field, { _problems, ...fieldType } = visitorContext.visit(fieldTypeDef, index);\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field).concat(_problems || [])\n      };\n    }),\n    _problems: problems\n  };\n}, documentVisitor = (typeDefinition, visitorContext) => {\n  const typeDef = object(typeDefinition, visitorContext), { initialValue, initialValues } = typeDef;\n  return typeof initialValue < \"u\" && !lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(initialValue) && typeof initialValue != \"function\" && typeDef._problems.push(\n    error('The \"initialValue\" property must be either a plain object or a function')\n  ), typeof initialValues < \"u\" && typeDef._problems.push(error('Found property \"initialValues\" - did you mean \"initialValue\"?')), typeDef;\n}, file = (typeDef, visitorContext) => {\n  const problems = [], fields = typeDef.fields;\n  fields && problems.push(...validateFields(fields, { allowEmpty: !0 }));\n  const invalidFieldNames = Array.isArray(fields) ? fields?.filter((field) => field.name === \"asset\") : [];\n  return typeDef.options && typeof typeDef.options.metadata < \"u\" && !Array.isArray(typeDef.options.metadata) ? problems.push(\n    error(\n      \"Invalid type for file `metadata` field - must be an array of strings\",\n      HELP_IDS.ASSET_METADATA_FIELD_INVALID\n    )\n  ) : invalidFieldNames.length > 0 && problems.push(error(\"The name `asset` is not a valid field name for type `file`.\")), {\n    ...typeDef,\n    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {\n      const { name, ...fieldTypeDef } = field, { _problems, ...fieldType } = visitorContext.visit(fieldTypeDef, index);\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field).concat(_problems || [])\n      };\n    }),\n    _problems: problems\n  };\n};\nfunction normalizeToProp$1(typeDef) {\n  return Array.isArray(typeDef.to) ? typeDef.to : typeDef.to ? [typeDef.to] : [];\n}\nfunction isValidResourceType(resourceType) {\n  return resourceType ? resourceType != \"media-library\" && resourceType != \"dataset\" ? 'The resource type must be either \"media-library\" or \"dataset\"' : !0 : \"The resource type must be a non-empty string\";\n}\nfunction isValidResourceId(resourceType, resourceId) {\n  return resourceId ? resourceType === \"dataset\" ? resourceId.split(\".\").length !== 2 ? 'The resource ID for a dataset reference must be on the form \"<projectId>.<datasetName>\"' : !0 : resourceType === \"media-library\" ? !0 : `Cannot validate resource ID for resource type: ${resourceType}` : \"The resource ID must be a non-empty string\";\n}\nvar globalDocumentReference = (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(typeDef.to), normalizedTo = normalizeToProp$1(typeDef), problems = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_1__([\n    isValidTo ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map(\n      (dupes) => error(\n        `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n        HELP_IDS.GLOBAL_DOCUMENT_REFERENCE_INVALID\n      )\n    ) : error(\n      'The global document reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n      HELP_IDS.GLOBAL_DOCUMENT_REFERENCE_INVALID\n    )\n  ]);\n  if (isValidTo && normalizedTo.length === 0 && problems.push(\n    error(\n      'The global document reference type should define at least one referenced type. Please check the \"to\" property.',\n      HELP_IDS.GLOBAL_DOCUMENT_REFERENCE_INVALID\n    )\n  ), normalizedTo.forEach((crossDatasetTypeDef, index) => {\n    crossDatasetTypeDef.type || problems.push(\n      error(\n        `The referenced type at index ${index} must be named. Specify the name of the type you want to create references to.`,\n        HELP_IDS.GLOBAL_DOCUMENT_REFERENCE_INVALID\n      )\n    ), lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(crossDatasetTypeDef.preview) || problems.push(\n      error(\n        `Missing required preview config for the referenced type \"${crossDatasetTypeDef.type || \"<unknown type>\"}\"`,\n        HELP_IDS.GLOBAL_DOCUMENT_REFERENCE_INVALID\n      )\n    );\n  }), typeof typeDef.resourceType == \"string\") {\n    const validation = isValidResourceType(typeDef.resourceType);\n    validation !== !0 && problems.push(error(validation, HELP_IDS.GLOBAL_DOCUMENT_REFERENCE_INVALID));\n  } else\n    problems.push(\n      error(\n        \"A global document reference must specify a `resourceType`\",\n        HELP_IDS.GLOBAL_DOCUMENT_REFERENCE_INVALID\n      )\n    );\n  if (typeof typeDef.resourceId == \"string\") {\n    const datasetValidation = isValidResourceId(typeDef.resourceType, typeDef.resourceId);\n    datasetValidation !== !0 && problems.push(error(datasetValidation, HELP_IDS.GLOBAL_DOCUMENT_REFERENCE_INVALID));\n  } else\n    problems.push(\n      error(\n        \"A global document reference must specify a `resourceId`\",\n        HELP_IDS.GLOBAL_DOCUMENT_REFERENCE_INVALID\n      )\n    );\n  return typeDef.studioUrl && typeof typeDef.studioUrl != \"function\" && typeof typeDef.studioUrl != \"string\" && problems.push(\n    error(\n      'The \"studioUrl\" property on a global document reference must either be a function taking \"{id, type}\" as argument and returning a studio url, or a string being the base url pointing to a studio.',\n      HELP_IDS.GLOBAL_DOCUMENT_REFERENCE_INVALID\n    )\n  ), problems.push(...getOptionErrors$1(typeDef)), {\n    ...typeDef,\n    _problems: problems\n  };\n};\nfunction getOptionErrors$1(typeDef) {\n  const { options } = typeDef, problems = [];\n  return problems.push(\n    ...[\"filter\", \"filterParams\"].filter((key) => key in typeDef).map(\n      (key) => error(\n        `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n        HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION\n      )\n    )\n  ), options ? lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(options) ? typeof options.filter == \"function\" && typeof options.filterParams < \"u\" ? problems.concat(\n    error(\n      \"`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.\",\n      HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION\n    )\n  ) : typeof options.filter == \"function\" || !options.filter && !options.filterParams ? problems : typeof options.filter != \"string\" ? problems.concat(\n    error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`)\n  ) : typeof options.filterParams < \"u\" && !lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(options.filterParams) ? problems.concat(error(\"If set, `filterParams` must be an object.\")) : options.filterParams ? problems.concat(\n    Object.keys(options.filterParams).filter((key) => key.startsWith(\"__\") || key.startsWith(\"$\")).map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`))\n  ) : problems : problems.concat(\n    error(\n      \"The reference type expects `options` to be an object\",\n      HELP_IDS.REFERENCE_INVALID_OPTIONS\n    )\n  ) : problems;\n}\nconst autoMeta = [\"dimensions\", \"hasAlpha\", \"isOpaque\"];\nvar image = (typeDef, visitorContext) => {\n  const problems = [], fields = typeDef.fields;\n  fields && problems.push(...validateFields(fields, { allowEmpty: !0 }));\n  let options = typeDef.options;\n  const metadata = options?.metadata, superfluousMeta = Array.isArray(metadata) ? metadata.filter((meta) => autoMeta.includes(meta)) : [], invalidFieldNames = [\"asset\", \"hotspot\", \"crop\"], fieldsWithInvalidName = Array.isArray(fields) ? fields?.filter((field) => invalidFieldNames.includes(field.name)) : [];\n  return typeof metadata < \"u\" && !Array.isArray(metadata) ? problems.push(\n    error(\n      \"Invalid type for image `metadata` field - must be an array of strings\",\n      HELP_IDS.ASSET_METADATA_FIELD_INVALID\n    )\n  ) : superfluousMeta.length > 0 ? (problems.push(\n    warning(\n      `Image \\`metadata\\` field contains superfluous properties (they are always included): ${superfluousMeta.join(\n        \", \"\n      )}`\n    )\n  ), options = { ...options, metadata: metadata.filter((meta) => !autoMeta.includes(meta)) }) : fieldsWithInvalidName.length > 0 && problems.push(\n    error(\n      `The names \\`${invalidFieldNames.join(\n        \"`, `\"\n      )}\\` are invalid field names for type \\`image\\`.`\n    )\n  ), {\n    ...typeDef,\n    options,\n    fields: (Array.isArray(fields) ? fields : []).map((field, index) => {\n      const { name, ...fieldTypeDef } = field, { _problems, ...fieldType } = visitorContext.visit(fieldTypeDef, index);\n      return {\n        name,\n        ...fieldType,\n        _problems: validateField(field).concat(_problems || [])\n      };\n    }),\n    _problems: problems\n  };\n};\nfunction normalizeToProp(typeDef) {\n  return Array.isArray(typeDef.to) ? typeDef.to : typeDef.to ? [typeDef.to] : typeDef.to;\n}\nvar reference = (typeDef, visitorContext) => {\n  const isValidTo = Array.isArray(typeDef.to) || lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(typeDef.to), normalizedTo = normalizeToProp(typeDef), problems = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_1__([\n    isValidTo ? getDupes(normalizedTo, (t) => `${t.name};${t.type}`).map(\n      (dupes) => error(\n        `Found ${dupes.length} members with same type, but not unique names \"${dupes[0].type}\" in reference. This makes it impossible to tell their values apart and you should consider naming them`,\n        HELP_IDS.REFERENCE_TO_INVALID\n      )\n    ) : error(\n      'The reference type is missing or having an invalid value for the required \"to\" property. It should be an array of accepted types.',\n      HELP_IDS.REFERENCE_TO_INVALID\n    )\n  ]);\n  return isValidTo && normalizedTo.length === 0 && problems.push(\n    error(\n      'The reference type should define at least one accepted type. Please check the \"to\" property.',\n      HELP_IDS.REFERENCE_TO_INVALID\n    )\n  ), problems.push(...getOptionErrors(typeDef)), {\n    ...typeDef,\n    to: (isValidTo ? normalizedTo : []).map(visitorContext.visit),\n    _problems: problems\n  };\n};\nfunction getOptionErrors(typeDef) {\n  const { options } = typeDef, problems = [];\n  return problems.push(\n    ...[\"filter\", \"filterParams\"].filter((key) => key in typeDef).map(\n      (key) => error(\n        `\\`${key}\\` is not allowed on a reference type definition - did you mean \\`options.${key}\\`?`,\n        HELP_IDS.REFERENCE_INVALID_OPTIONS_LOCATION\n      )\n    )\n  ), options ? lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(options) ? typeof options.filter == \"function\" && typeof options.filterParams < \"u\" ? problems.concat(\n    error(\n      \"`filterParams` cannot be used if `filter` is a function. Either statically define `filter` as a string, or return `params` from the `filter`-function.\",\n      HELP_IDS.REFERENCE_INVALID_FILTER_PARAMS_COMBINATION\n    )\n  ) : typeof options.filter == \"function\" || !options.filter && !options.filterParams ? problems : typeof options.filter != \"string\" ? problems.concat(\n    error(`If set, \\`filter\\` must be a string. Got ${typeof options.filter}`)\n  ) : typeof options.filterParams < \"u\" && !lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_6__(options.filterParams) ? problems.concat(error(\"If set, `filterParams` must be an object.\")) : options.filterParams ? problems.concat(\n    Object.keys(options.filterParams).filter((key) => key.startsWith(\"__\") || key.startsWith(\"$\")).map((key) => error(`Filter parameter cannot be prefixed with \"$\" or \"__\". Got ${key}\".`))\n  ) : problems : problems.concat(\n    error(\n      \"The reference type expects `options` to be an object\",\n      HELP_IDS.REFERENCE_INVALID_OPTIONS\n    )\n  ) : problems;\n}\nvar rootType = (typeDef, visitorContext) => {\n  const hasName = !!typeDef.name;\n  if (!hasName && Object.keys(typeDef).length === 1)\n    return {\n      ...typeDef,\n      _problems: [\n        error(\n          \"Invalid/undefined type declaration, check declaration or the import/export of the schema type.\",\n          HELP_IDS.TYPE_INVALID\n        )\n      ]\n    };\n  const problems = [];\n  return looksLikeEsmModule(typeDef) ? problems.push(\n    error(\n      \"Type appears to be an ES6 module imported through CommonJS require - use an import statement or access the `.default` property\",\n      HELP_IDS.TYPE_IS_ESM_MODULE\n    )\n  ) : hasName ? visitorContext.isReserved(typeDef.name) && problems.push(\n    error(\n      `Invalid type name: \"${typeDef.name}\" is a reserved name.`,\n      HELP_IDS.TYPE_NAME_RESERVED\n    )\n  ) : problems.push(error(\"Missing type name\", HELP_IDS.TYPE_MISSING_NAME)), visitorContext.isDuplicate(typeDef.name) && problems.push(\n    error(\n      `Invalid type name: A type with name \"${typeDef.name}\" is already defined in the schema.`\n    )\n  ), problems.push(...validateComponent(typeDef)), \"title\" in typeDef && typeof typeDef.title != \"string\" && problems.push(warning(\"Type title is not a string.\", HELP_IDS.TYPE_TITLE_INVALID)), {\n    ...typeDef,\n    _problems: problems\n  };\n};\nfunction looksLikeEsmModule(typeDef) {\n  return !typeDef.name && typeDef.default && (typeDef.default.name || typeDef.default.title);\n}\nvar slug = (typeDef, visitorContext) => {\n  const problems = [];\n  return typeDef.options && typeDef.options.slugifyFn && (problems.push(\n    warning(\n      'Heads up! The \"slugifyFn\" option has been renamed to \"slugify\".',\n      HELP_IDS.SLUG_SLUGIFY_FN_RENAMED\n    )\n  ), typeDef.options.slugify = typeDef.options.slugifyFn), {\n    ...typeDef,\n    _problems: problems\n  };\n};\nconst typeVisitors = {\n  array,\n  object,\n  slug,\n  file,\n  image,\n  block: validateBlockType,\n  document: documentVisitor,\n  reference,\n  crossDatasetReference,\n  globalDocumentReference\n}, getNoopVisitor = (visitorContext) => (schemaDef) => ({\n  name: `<unnamed_type_@_index_${visitorContext.index}>`,\n  ...schemaDef,\n  _problems: []\n});\nfunction combine(...visitors) {\n  return (schemaType, visitorContext) => visitors.reduce(\n    (result, visitor) => {\n      const res = visitor(result, visitorContext);\n      return {\n        ...res,\n        _problems: result._problems.concat(res._problems)\n      };\n    },\n    { _problems: [], ...schemaType }\n  );\n}\nfunction validateSchema(schemaTypes, { transformTypeVisitors = (visitors) => visitors } = {}) {\n  return traverseSanitySchema(schemaTypes, (schemaDef, visitorContext) => {\n    const typeVisitor = schemaDef && schemaDef.type && transformTypeVisitors(typeVisitors)[schemaDef.type] || getNoopVisitor(visitorContext);\n    return visitorContext.isRoot ? combine(rootType, common, typeVisitor)(schemaDef, visitorContext) : combine(common, typeVisitor)(schemaDef, visitorContext);\n  });\n}\nfunction unsupportedTypeValidator(typeLabel) {\n  return function() {\n    return {\n      _problems: [\n        {\n          severity: \"error\",\n          message: `Type unsupported in Media Library aspects: ${typeLabel}.`\n        }\n      ]\n    };\n  };\n}\nfunction validateMediaLibraryAssetAspect(maybeAspect) {\n  const validated = validateSchema([maybeAspect], {\n    transformTypeVisitors: (typeVisitors2) => ({\n      ...typeVisitors2,\n      document: unsupportedTypeValidator(\"document\"),\n      image: unsupportedTypeValidator(\"image\"),\n      file: unsupportedTypeValidator(\"file\"),\n      video: unsupportedTypeValidator(\"sanity.video\"),\n      reference: unsupportedTypeValidator(\"reference\"),\n      crossDatasetReference: unsupportedTypeValidator(\"cross dataset reference\")\n    })\n  }), errors = groupProblems(validated.getTypes()).map((group) => group.problems.filter(({ severity }) => severity === \"error\")).filter((problems) => problems.length);\n  return [errors.length === 0, errors];\n}\n\n//# sourceMappingURL=_internal.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/_internal.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/index.mjs":
/*!******************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/index.mjs ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Schema: () => (/* binding */ Schema2),\n/* harmony export */   \"default\": () => (/* binding */ DeprecatedDefaultSchema)\n/* harmony export */ });\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/omit.js\");\n/* harmony import */ var lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/pick.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/pick.js\");\n/* harmony import */ var _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./_chunks-es/resolve.mjs */ \"(ssr)/../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/_chunks-es/resolve.mjs\");\n/* harmony import */ var arrify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! arrify */ \"(ssr)/../node_modules/.pnpm/arrify@2.0.1/node_modules/arrify/index.js\");\n/* harmony import */ var lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isUndefined.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isUndefined.js\");\n/* harmony import */ var lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/omitBy.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/omitBy.js\");\n/* harmony import */ var lodash_capitalize_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/capitalize.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/capitalize.js\");\n/* harmony import */ var lodash_castArray_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/castArray.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/castArray.js\");\n/* harmony import */ var lodash_flatMap_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/flatMap.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/flatMap.js\");\n/* harmony import */ var lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/startCase.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/startCase.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isPlainObject.js\");\n/* harmony import */ var lodash_toPath_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/toPath.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/toPath.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction lazyGetter(target, key, getter, config = {}) {\n  return Object.defineProperty(target, key, {\n    configurable: !0,\n    enumerable: config.enumerable !== !1,\n    get() {\n      const val = getter();\n      return Object.defineProperty(target, key, {\n        value: val,\n        writable: !!config.writable,\n        configurable: !1\n      }), val;\n    }\n  }), target;\n}\nfunction hiddenGetter(target, key, value) {\n  Object.defineProperty(target, key, {\n    enumerable: !1,\n    writable: !1,\n    configurable: !1,\n    value\n  });\n}\nconst OVERRIDABLE_FIELDS$f = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], ANY_CORE = {\n  name: \"any\",\n  type: null,\n  jsonType: \"any\"\n}, AnyType = {\n  get() {\n    return ANY_CORE;\n  },\n  extend(subTypeDef, extendMember) {\n    const ownProps = {\n      ...subTypeDef,\n      of: subTypeDef.of.map((fieldDef) => ({\n        name: fieldDef.name,\n        type: extendMember(lodash_omit_js__WEBPACK_IMPORTED_MODULE_0__(fieldDef, \"name\"))\n      }))\n    }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(ANY_CORE, OVERRIDABLE_FIELDS$f), ownProps, {\n      type: ANY_CORE\n    });\n    return hiddenGetter(parsed, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          if (extensionDef.of)\n            throw new Error('Cannot override `of` property of subtypes of \"array\"');\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$f), current = Object.assign({}, parent, subOwnProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n}, OVERRIDABLE_FIELDS$e = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], ARRAY_CORE = {\n  name: \"array\",\n  type: null,\n  jsonType: \"array\",\n  of: []\n}, ArrayType = {\n  get() {\n    return ARRAY_CORE;\n  },\n  extend(subTypeDef, createMemberType) {\n    const parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(ARRAY_CORE, OVERRIDABLE_FIELDS$e), subTypeDef, {\n      type: ARRAY_CORE\n    });\n    return lazyGetter(parsed, \"of\", () => subTypeDef.of.map((ofTypeDef) => createMemberType(ofTypeDef))), lazyGetter(parsed, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, () => ({ ...subTypeDef, of: parsed.of }), {\n      enumerable: !1,\n      writable: !1\n    }), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          if (extensionDef.of)\n            throw new Error('Cannot override `of` property of subtypes of \"array\"');\n          const ownProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$e), current = Object.assign({}, parent, ownProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(current);\n        }\n      };\n    }\n  }\n};\nfunction warnIfPreviewOnOptions(type) {\n  type.options && type.options.preview && console.warn(`Heads up! The preview config is no longer defined on \"options\", but instead on the type/field itself.\nPlease move {options: {preview: ...}} to {..., preview: ...} on the type/field definition of \"${type.name}\".\n`);\n}\nfunction warnIfPreviewHasFields(type) {\n  const preview = type.preview || (type.options || {}).preview;\n  preview && \"fields\" in preview && console.warn(`Heads up! \"preview.fields\" should be renamed to \"preview.select\". Please update the preview config for \"${type.name}\".\n`);\n}\nfunction isEmpty(object) {\n  for (const key in object)\n    if (object.hasOwnProperty(key))\n      return !1;\n  return !0;\n}\nfunction _stringify(value, options, depth) {\n  if (depth > options.maxDepth)\n    return \"...\";\n  if (Array.isArray(value)) {\n    if (value.length === 0)\n      return \"[empty]\";\n    const capLength = Math.max(value.length - options.maxBreadth), asString2 = value.slice(0, options.maxBreadth).map((item, index) => _stringify(item, options, depth + 1)).concat(capLength > 0 ? `\\u2026+${capLength}` : []).join(\", \");\n    return depth === 0 ? asString2 : `[${asString2}]`;\n  }\n  if (typeof value == \"object\" && value !== null) {\n    const keys = Object.keys(value).filter(\n      (key) => !options.ignoreKeys.includes(key) && typeof value[key] < \"u\"\n    );\n    if (isEmpty(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(value, keys)))\n      return \"{empty}\";\n    const asString2 = keys.slice(0, options.maxBreadth).map((key) => `${key}: ${_stringify(value[key], options, depth + 1)}`).join(\", \");\n    return depth === 0 ? asString2 : `{${asString2}}`;\n  }\n  const asString = String(value);\n  return asString === \"\" ? '\"\"' : asString;\n}\nfunction stringify(value, options = {}) {\n  const opts = {\n    maxDepth: \"maxDepth\" in options ? options.maxDepth : 2,\n    maxBreadth: \"maxBreadth\" in options ? options.maxBreadth : 2,\n    ignoreKeys: \"ignoreKeys\" in options ? options.ignoreKeys : []\n  };\n  return _stringify(value, opts, 0);\n}\nconst OPTIONS = {\n  maxEntries: 2,\n  maxDepth: 2,\n  maxBreadth: 2,\n  ignoreKeys: [\"_id\", \"_type\", \"_key\", \"_ref\"]\n};\nfunction createFallbackPrepare(fieldNames) {\n  return (value) => ({\n    title: stringify(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(value, fieldNames), OPTIONS)\n  });\n}\nfunction isBlockField(field) {\n  return field.type === \"array\" && field.of && field.of.some((member) => member.type === \"block\") || !1;\n}\nconst TITLE_CANDIDATES = [\"title\", \"name\", \"label\", \"heading\", \"header\", \"caption\"], DESCRIPTION_CANDIDATES = [\"description\", ...TITLE_CANDIDATES];\nfunction fieldHasReferenceTo(fieldDef, refType) {\n  return arrify__WEBPACK_IMPORTED_MODULE_2__(fieldDef.to || []).some((memberTypeDef) => memberTypeDef.type === refType);\n}\nfunction isImageAssetField(fieldDef) {\n  return fieldHasReferenceTo(fieldDef, \"sanity.imageAsset\");\n}\nfunction resolveImageAssetPath(typeDef) {\n  const fields = typeDef.fields || [], imageAssetField = fields.find(isImageAssetField);\n  if (imageAssetField)\n    return imageAssetField.name;\n  const fieldWithImageAsset = fields.find(\n    (fieldDef) => (fieldDef.fields || []).some(isImageAssetField)\n  );\n  return fieldWithImageAsset ? `${fieldWithImageAsset.name}.asset` : void 0;\n}\nfunction isFileAssetField(fieldDef) {\n  return fieldHasReferenceTo(fieldDef, \"sanity.fileAsset\");\n}\nfunction resolveFileAssetPath(typeDef) {\n  const fields = typeDef.fields || [], assetField = fields.find(isFileAssetField);\n  if (assetField)\n    return assetField.name;\n  const fieldWithFileAsset = fields.find(\n    (fieldDef) => (fieldDef.fields || []).some(isFileAssetField)\n  );\n  return fieldWithFileAsset ? `${fieldWithFileAsset.name}.asset` : void 0;\n}\nfunction guessPreviewFields(rawObjectTypeDef) {\n  const objectTypeDef = { fields: [], ...rawObjectTypeDef }, stringFieldNames = objectTypeDef.fields.filter((field) => field.type === \"string\").map((field) => field.name), blockFieldNames = objectTypeDef.fields.filter(isBlockField).map((field) => field.name);\n  let titleField = TITLE_CANDIDATES.find(\n    (candidate) => stringFieldNames.includes(candidate) || blockFieldNames.includes(candidate)\n  ), descField = DESCRIPTION_CANDIDATES.find(\n    (candidate) => candidate !== titleField && (stringFieldNames.includes(candidate) || blockFieldNames.includes(candidate))\n  );\n  titleField || (titleField = stringFieldNames[0] || blockFieldNames[0], descField = stringFieldNames[1] || blockFieldNames[1]);\n  const mediaField = objectTypeDef.fields.find((field) => field.type === \"image\"), imageAssetPath = resolveImageAssetPath(objectTypeDef);\n  if (!titleField) {\n    const fileAssetPath = resolveFileAssetPath(objectTypeDef);\n    fileAssetPath && (titleField = `${fileAssetPath}.originalFilename`), imageAssetPath && (titleField = `${imageAssetPath}.originalFilename`);\n  }\n  if (!titleField && !imageAssetPath) {\n    const fieldNames = objectTypeDef.fields.map((field) => field.name);\n    return {\n      select: fieldNames.reduce((acc, fieldName) => (acc[fieldName] = fieldName, acc), {}),\n      prepare: createFallbackPrepare(fieldNames)\n    };\n  }\n  return {\n    select: lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_4__(\n      {\n        title: titleField,\n        description: descField,\n        media: mediaField ? mediaField.name : imageAssetPath\n      },\n      lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_3__\n    )\n  };\n}\nfunction parseSelection(selection) {\n  return selection.reduce((acc, field) => (acc[field] = field, acc), {});\n}\nfunction parsePreview(preview) {\n  if (!preview)\n    return preview;\n  const select = preview.select || preview.fields || {};\n  return Array.isArray(select) ? {\n    ...lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(preview, [\"prepare\", \"component\"]),\n    select: parseSelection(select)\n  } : {\n    ...lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(preview, [\"prepare\", \"component\"]),\n    select\n  };\n}\nfunction createPreviewGetter(objectTypeDef) {\n  return function() {\n    return warnIfPreviewOnOptions(objectTypeDef), warnIfPreviewHasFields(objectTypeDef), parsePreview(objectTypeDef.preview || (objectTypeDef.options || {}).preview) || guessPreviewFields(objectTypeDef);\n  };\n}\nconst DEFAULT_LINK_ANNOTATION = {\n  type: \"object\",\n  name: \"link\",\n  title: \"Link\",\n  i18nTitleKey: \"inputs.portable-text.annotation.link\",\n  options: {\n    modal: { type: \"popover\" }\n  },\n  fields: [\n    {\n      name: \"href\",\n      type: \"url\",\n      title: \"Link\",\n      description: \"A valid web, email, phone, or relative link.\",\n      validation: (Rule) => Rule.uri({\n        scheme: [\"http\", \"https\", \"tel\", \"mailto\"],\n        allowRelative: !0\n      })\n    }\n  ]\n}, DEFAULT_TEXT_FIELD = {\n  type: \"text\",\n  name: \"text\",\n  title: \"Text\"\n}, DEFAULT_MARKS_FIELD = {\n  name: \"marks\",\n  type: \"array\",\n  of: [{ type: \"string\" }],\n  title: \"Marks\"\n}, LIST_TYPES = {\n  bullet: {\n    title: \"Bulleted list\",\n    value: \"bullet\",\n    i18nTitleKey: \"inputs.portable-text.list-type.bullet\"\n  },\n  numbered: {\n    title: \"Numbered list\",\n    value: \"number\",\n    i18nTitleKey: \"inputs.portable-text.list-type.number\"\n  }\n}, DEFAULT_LIST_TYPES = [LIST_TYPES.bullet, LIST_TYPES.numbered], BLOCK_STYLES = {\n  normal: { title: \"Normal\", value: \"normal\", i18nTitleKey: \"inputs.portable-text.style.normal\" },\n  h1: { title: \"Heading 1\", value: \"h1\", i18nTitleKey: \"inputs.portable-text.style.h1\" },\n  h2: { title: \"Heading 2\", value: \"h2\", i18nTitleKey: \"inputs.portable-text.style.h2\" },\n  h3: { title: \"Heading 3\", value: \"h3\", i18nTitleKey: \"inputs.portable-text.style.h3\" },\n  h4: { title: \"Heading 4\", value: \"h4\", i18nTitleKey: \"inputs.portable-text.style.h4\" },\n  h5: { title: \"Heading 5\", value: \"h5\", i18nTitleKey: \"inputs.portable-text.style.h5\" },\n  h6: { title: \"Heading 6\", value: \"h6\", i18nTitleKey: \"inputs.portable-text.style.h6\" },\n  blockquote: {\n    title: \"Quote\",\n    value: \"blockquote\",\n    i18nTitleKey: \"inputs.portable-text.style.quote\"\n  }\n}, DEFAULT_BLOCK_STYLES = [\n  BLOCK_STYLES.normal,\n  BLOCK_STYLES.h1,\n  BLOCK_STYLES.h2,\n  BLOCK_STYLES.h3,\n  BLOCK_STYLES.h4,\n  BLOCK_STYLES.h5,\n  BLOCK_STYLES.h6,\n  BLOCK_STYLES.blockquote\n], DECORATOR_STRONG = {\n  title: \"Strong\",\n  value: \"strong\",\n  i18nTitleKey: \"inputs.portable-text.decorator.strong\"\n}, DECORATOR_EMPHASIS = {\n  title: \"Italic\",\n  value: \"em\",\n  i18nTitleKey: \"inputs.portable-text.decorator.emphasis\"\n}, DECORATOR_CODE = {\n  title: \"Code\",\n  value: \"code\",\n  i18nTitleKey: \"inputs.portable-text.decorator.code\"\n}, DECORATOR_UNDERLINE = {\n  title: \"Underline\",\n  value: \"underline\",\n  i18nTitleKey: \"inputs.portable-text.decorator.underline\"\n}, DECORATOR_STRIKE = {\n  title: \"Strike\",\n  value: \"strike-through\",\n  i18nTitleKey: \"inputs.portable-text.decorator.strike-through\"\n}, DECORATORS = {\n  strong: DECORATOR_STRONG,\n  em: DECORATOR_EMPHASIS,\n  code: DECORATOR_CODE,\n  underline: DECORATOR_UNDERLINE,\n  strikeThrough: DECORATOR_STRIKE\n}, DEFAULT_DECORATORS = [\n  DECORATORS.strong,\n  DECORATORS.em,\n  DECORATORS.code,\n  DECORATORS.underline,\n  DECORATORS.strikeThrough\n], INHERITED_FIELDS$1 = [\n  \"type\",\n  \"name\",\n  \"title\",\n  \"jsonType\",\n  \"description\",\n  \"options\",\n  \"fieldsets\",\n  \"icon\"\n], BLOCK_CORE = {\n  name: \"block\",\n  title: \"Block\",\n  type: null,\n  jsonType: \"object\"\n}, DEFAULT_OPTIONS$3 = {}, BlockType = {\n  get() {\n    return BLOCK_CORE;\n  },\n  extend(subTypeDef, extendMember) {\n    const options = { ...subTypeDef.options || DEFAULT_OPTIONS$3 }, { marks, styles, lists, of, ...rest } = subTypeDef, childrenField = createChildrenField(marks, of), styleField = createStyleField(styles), listItemField = createListItemField(lists), markDefsField = {\n      name: \"markDefs\",\n      title: \"Mark definitions\",\n      type: \"array\",\n      of: marks?.annotations || DEFAULT_ANNOTATIONS\n    }, fields = [childrenField, styleField, listItemField, markDefsField, {\n      name: \"level\",\n      title: \"Indentation\",\n      type: \"number\"\n    }].concat(\n      subTypeDef.fields || []\n    ), ownProps = { ...rest, options }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(BLOCK_CORE, INHERITED_FIELDS$1), ownProps, {\n      type: BLOCK_CORE\n    });\n    return lazyGetter(parsed, \"fields\", () => fields.map((fieldDef) => {\n      const { name, ...type } = fieldDef;\n      return {\n        name,\n        type: extendMember(type)\n      };\n    })), lazyGetter(parsed, \"preview\", createPreviewGetter(subTypeDef)), lazyGetter(\n      parsed,\n      _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME,\n      () => ({\n        ...ownProps,\n        fields: parsed.fields,\n        preview: parsed.preview\n      }),\n      { enumerable: !1, writable: !1 }\n    ), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          if (extensionDef.fields)\n            throw new Error('Cannot override `fields` of subtypes of \"block\"');\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, INHERITED_FIELDS$1), current = Object.assign({}, parent, subOwnProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n};\nfunction ensureNormalStyle(styles) {\n  return styles.some((style) => style.value === \"normal\") ? styles : [BLOCK_STYLES.normal, ...styles];\n}\nfunction createStyleField(styles) {\n  return {\n    name: \"style\",\n    title: \"Style\",\n    type: \"string\",\n    options: {\n      list: ensureNormalStyle(styles || DEFAULT_BLOCK_STYLES)\n    }\n  };\n}\nfunction createListItemField(lists) {\n  return {\n    name: \"listItem\",\n    title: \"List type\",\n    type: \"string\",\n    options: {\n      list: lists || DEFAULT_LIST_TYPES\n    }\n  };\n}\nconst DEFAULT_ANNOTATIONS = [DEFAULT_LINK_ANNOTATION];\nfunction createChildrenField(marks, of = []) {\n  return {\n    name: \"children\",\n    title: \"Content\",\n    type: \"array\",\n    of: [\n      {\n        type: \"span\",\n        fields: [DEFAULT_TEXT_FIELD, DEFAULT_MARKS_FIELD],\n        annotations: marks && marks.annotations ? marks.annotations : DEFAULT_ANNOTATIONS,\n        decorators: marks && marks.decorators ? marks.decorators : DEFAULT_DECORATORS\n      },\n      ...of.filter((memberType) => memberType.type !== \"span\")\n    ]\n  };\n}\nconst INHERITED_FIELDS = [\n  \"type\",\n  \"name\",\n  \"title\",\n  \"jsonType\",\n  \"description\",\n  \"options\",\n  \"fieldsets\",\n  \"icon\"\n], SPAN_CORE = {\n  name: \"span\",\n  title: \"Span\",\n  type: null,\n  jsonType: \"object\"\n}, MARKS_FIELD = {\n  name: \"marks\",\n  title: \"Marks\",\n  type: \"array\",\n  of: [{ type: \"string\" }]\n}, TEXT_FIELD = {\n  name: \"text\",\n  title: \"Text\",\n  type: \"string\"\n}, DEFAULT_OPTIONS$2 = {}, SpanType = {\n  get() {\n    return SPAN_CORE;\n  },\n  extend(subTypeDef, extendMember) {\n    const options = { ...subTypeDef.options || DEFAULT_OPTIONS$2 }, { annotations = [], marks = [] } = subTypeDef, fields = [MARKS_FIELD, TEXT_FIELD], ownProps = { ...subTypeDef, options }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(SPAN_CORE, INHERITED_FIELDS), ownProps, {\n      type: SPAN_CORE\n    });\n    return lazyGetter(parsed, \"fields\", () => fields.map((fieldDef) => {\n      const { name, ...type } = fieldDef;\n      return {\n        name,\n        type: extendMember(type)\n      };\n    })), lazyGetter(parsed, \"annotations\", () => annotations.map(extendMember)), lazyGetter(parsed, \"marks\", () => marks.map(extendMember)), lazyGetter(parsed, \"preview\", createPreviewGetter(subTypeDef)), lazyGetter(\n      parsed,\n      _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME,\n      () => ({\n        ...ownProps,\n        fields: parsed.fields,\n        annotations: parsed.annotations,\n        marks: parsed.marks,\n        preview: parsed.preview\n      }),\n      { enumerable: !1, writable: !1 }\n    ), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          if (extensionDef.fields)\n            throw new Error('Cannot override `fields` of subtypes of \"span\"');\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, INHERITED_FIELDS), current = Object.assign({}, parent, subOwnProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n};\nvar primitivePreview = {\n  prepare: (val) => ({ title: String(val) })\n};\nconst OVERRIDABLE_FIELDS$d = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], BOOLEAN_CORE = {\n  name: \"boolean\",\n  title: \"Boolean\",\n  type: null,\n  jsonType: \"boolean\"\n}, BooleanType = {\n  get() {\n    return BOOLEAN_CORE;\n  },\n  extend(subTypeDef) {\n    const ownProps = {\n      ...subTypeDef,\n      preview: primitivePreview\n    }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(BOOLEAN_CORE, OVERRIDABLE_FIELDS$d), ownProps, {\n      type: BOOLEAN_CORE\n    });\n    return hiddenGetter(parsed, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$d), current = Object.assign({}, parent, subOwnProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n}, REF_FIELD$2 = {\n  name: \"_ref\",\n  title: \"Referenced document ID\",\n  type: \"string\"\n}, WEAK_FIELD$2 = {\n  name: \"_weak\",\n  title: \"Weak reference marker\",\n  type: \"boolean\"\n}, DATASET_FIELD = {\n  name: \"_dataset\",\n  title: \"Target dataset\",\n  type: \"string\"\n}, PROJECT_ID_FIELD = {\n  name: \"_projectId\",\n  title: \"Target project ID\",\n  type: \"string\",\n  hidden: !0\n}, REFERENCE_FIELDS$2 = [REF_FIELD$2, WEAK_FIELD$2, DATASET_FIELD, PROJECT_ID_FIELD], OVERRIDABLE_FIELDS$c = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], CROSS_DATASET_REFERENCE_CORE = {\n  name: \"crossDatasetReference\",\n  type: null,\n  jsonType: \"object\"\n};\nfunction humanize$2(arr, conjunction) {\n  const len = arr.length;\n  if (len === 1)\n    return arr[0];\n  const first = arr.slice(0, len - 1), last = arr[len - 1];\n  return `${first.join(\", \")} ${conjunction} ${last}`;\n}\nfunction buildTitle$2(type) {\n  return !type.to || type.to.length === 0 ? \"Cross dataset Reference\" : `Cross dataset reference to ${humanize$2(\n    arrify__WEBPACK_IMPORTED_MODULE_2__(type.to).map((toType) => toType.title || lodash_capitalize_js__WEBPACK_IMPORTED_MODULE_5__(toType.type)),\n    \"or\"\n  ).toLowerCase()}`;\n}\nconst CrossDatasetReferenceType = {\n  get() {\n    return CROSS_DATASET_REFERENCE_CORE;\n  },\n  extend(subTypeDef, createMemberType) {\n    if (!subTypeDef.to)\n      throw new Error(\n        `Missing \"to\" field in cross dataset reference definition. Check the type ${subTypeDef.name}`\n      );\n    const parsed = Object.assign(\n      lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(CROSS_DATASET_REFERENCE_CORE, OVERRIDABLE_FIELDS$c),\n      subTypeDef,\n      {\n        type: CROSS_DATASET_REFERENCE_CORE\n      }\n    );\n    return lazyGetter(parsed, \"fields\", () => REFERENCE_FIELDS$2.map((fieldDef) => {\n      const { name, ...type } = fieldDef;\n      return {\n        name,\n        type: createMemberType(type)\n      };\n    })), lazyGetter(parsed, \"to\", () => arrify__WEBPACK_IMPORTED_MODULE_2__(subTypeDef.to).map((toType) => ({\n      ...toType,\n      // eslint-disable-next-line camelcase\n      __experimental_search: (0,_chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.resolveSearchConfigForBaseFieldPaths)(toType)\n    }))), lazyGetter(parsed, \"title\", () => subTypeDef.title || buildTitle$2(parsed)), lazyGetter(\n      parsed,\n      _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME,\n      () => ({\n        ...subTypeDef,\n        fields: parsed.fields,\n        to: parsed.to,\n        title: parsed.title\n      }),\n      { enumerable: !1, writable: !1 }\n    ), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          if (extensionDef.of)\n            throw new Error('Cannot override `of` of subtypes of \"reference\"');\n          const ownProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$c), current = Object.assign({}, parent, ownProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(current);\n        }\n      };\n    }\n  }\n}, OVERRIDABLE_FIELDS$b = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], DATE_CORE = {\n  name: \"date\",\n  title: \"Datetime\",\n  type: null,\n  jsonType: \"string\"\n}, DateType = {\n  get() {\n    return DATE_CORE;\n  },\n  extend(subTypeDef) {\n    const ownProps = {\n      ...subTypeDef,\n      preview: primitivePreview\n    }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(DATE_CORE, OVERRIDABLE_FIELDS$b), ownProps, {\n      type: DATE_CORE\n    });\n    return hiddenGetter(parsed, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$b), current = Object.assign({}, parent, subOwnProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n}, OVERRIDABLE_FIELDS$a = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], DATETIME_CORE = {\n  name: \"datetime\",\n  title: \"Datetime\",\n  type: null,\n  jsonType: \"string\"\n}, DateTimeType = {\n  get() {\n    return DATETIME_CORE;\n  },\n  extend(subTypeDef) {\n    const ownProps = {\n      ...subTypeDef,\n      preview: primitivePreview\n    }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(DATETIME_CORE, OVERRIDABLE_FIELDS$a), ownProps, {\n      type: DATETIME_CORE\n    });\n    return hiddenGetter(parsed, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$a), current = Object.assign({}, parent, subOwnProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n}, CANDIDATES = [\"title\", \"name\", \"label\", \"heading\", \"header\", \"caption\", \"description\"], PRIMITIVES = [\"string\", \"boolean\", \"number\"], isPrimitive = (field) => PRIMITIVES.includes(field.type);\nfunction guessOrderingConfig(objectTypeDef) {\n  let candidates = CANDIDATES.filter(\n    (candidate) => objectTypeDef.fields.some((field) => isPrimitive(field) && field.name === candidate)\n  );\n  return candidates.length === 0 && (candidates = objectTypeDef.fields.filter(isPrimitive).map((field) => field.name)), candidates.map(\n    (name) => ({\n      name,\n      i18n: {\n        title: { key: `default-orderings.${name}`, ns: \"studio\" }\n      },\n      title: lodash_capitalize_js__WEBPACK_IMPORTED_MODULE_5__(lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(name)),\n      by: [{ field: name, direction: \"asc\" }]\n    })\n  );\n}\nfunction normalizeSearchConfigs(configs) {\n  if (!Array.isArray(configs))\n    throw new Error(\n      \"The search config of a document type must be an array of search config objects\"\n    );\n  return configs.map((conf) => {\n    if (conf === \"defaults\")\n      return conf;\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__(conf))\n      throw new Error(\"Search config must be an object of {path: string, weight: number}\");\n    return {\n      weight: \"weight\" in conf ? conf.weight : 1,\n      path: lodash_toPath_js__WEBPACK_IMPORTED_MODULE_10__(conf.path),\n      mapWith: typeof conf.mapWith == \"string\" ? conf.mapWith : void 0\n    };\n  });\n}\nconst OVERRIDABLE_FIELDS$9 = [\n  ..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS,\n  \"orderings\",\n  \"__experimental_search\",\n  \"blockEditor\",\n  \"icon\"\n], ObjectType = {\n  get() {\n    return {\n      name: \"object\",\n      title: \"Object\",\n      type: null,\n      jsonType: \"object\"\n    };\n  },\n  extend(rawSubTypeDef, createMemberType) {\n    const subTypeDef = { fields: [], ...rawSubTypeDef }, options = { ...subTypeDef.options }, ownProps = {\n      ...subTypeDef,\n      title: subTypeDef.title || (subTypeDef.name ? lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(subTypeDef.name) : \"Object\"),\n      options,\n      orderings: subTypeDef.orderings || guessOrderingConfig(subTypeDef),\n      fields: subTypeDef.fields.map((fieldDef) => {\n        const { name, fieldset, group, ...rest } = fieldDef;\n        return lazyGetter({\n          name,\n          group,\n          fieldset\n        }, \"type\", () => createMemberType({\n          ...rest,\n          title: fieldDef.title || lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(name)\n        }));\n      })\n    }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(this.get(), OVERRIDABLE_FIELDS$9), ownProps, {\n      type: this.get()\n    });\n    return lazyGetter(parsed, \"fieldsets\", () => createFieldsets(subTypeDef, parsed.fields)), lazyGetter(parsed, \"groups\", () => createFieldsGroups(subTypeDef, parsed.fields)), lazyGetter(parsed, \"preview\", createPreviewGetter(subTypeDef)), lazyGetter(\n      parsed,\n      _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME,\n      () => ({\n        ...ownProps,\n        preview: parsed.preview\n      }),\n      { enumerable: !1, writable: !1 }\n    ), lazyGetter(\n      parsed,\n      \"__experimental_search\",\n      () => {\n        const userProvidedSearchConfig = subTypeDef.__experimental_search ? normalizeSearchConfigs(subTypeDef.__experimental_search) : null;\n        return userProvidedSearchConfig ? userProvidedSearchConfig.map(\n          (entry) => entry === \"defaults\" ? normalizeSearchConfigs(subTypeDef) : entry\n        ) : (0,_chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.resolveSearchConfig)(parsed);\n      },\n      {\n        enumerable: !1\n      }\n    ), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          if (extensionDef.fields)\n            throw new Error('Cannot override `fields` of subtypes of \"object\"');\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$9);\n          subOwnProps.title = extensionDef.title || subTypeDef.title || (subTypeDef.name ? lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(subTypeDef.name) : \"Object\");\n          const current = Object.assign({}, parent, lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$9), {\n            type: parent\n          });\n          return lazyGetter(current, \"__experimental_search\", () => parent.__experimental_search), hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n};\nfunction createFieldsets(typeDef, fields) {\n  const fieldsetsByName = {};\n  for (const fieldset of typeDef.fieldsets || []) {\n    if (fieldsetsByName[fieldset.name])\n      throw new Error(\n        `Duplicate fieldset name \"${fieldset.name}\" found for type '${typeDef.title ? typeDef.title : lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(typeDef.name)}'`\n      );\n    fieldsetsByName[fieldset.name] = { title: lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(fieldset.name), ...fieldset, fields: [] };\n  }\n  const fieldsets = /* @__PURE__ */ new Set();\n  for (const field of fields) {\n    if (!field.fieldset) {\n      fieldsets.add({ single: !0, field });\n      continue;\n    }\n    const fieldset = fieldsetsByName[field.fieldset];\n    if (!fieldset)\n      throw new Error(\n        `Fieldset '${field.fieldset}' is not defined in schema for type '${typeDef.name}'`\n      );\n    fieldset.fields.push(field), fieldsets.add(fieldset);\n  }\n  return Array.from(fieldsets);\n}\nfunction createFieldsGroups(typeDef, fields) {\n  const groupsByName = {};\n  let numDefaultGroups = 0;\n  for (const group of typeDef.groups || []) {\n    if (groupsByName[group.name])\n      throw new Error(\n        `Duplicate group name \"${group.name}\" found for type '${typeDef.title ? typeDef.title : lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(typeDef.name)}'`\n      );\n    if (groupsByName[group.name] = { title: lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(group.name), ...group, fields: [] }, group.default && ++numDefaultGroups > 1)\n      throw new Error(\n        `More than one field group defined as default for type '${typeDef.title ? typeDef.title : lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(typeDef.name)}' - only 1 is supported`\n      );\n  }\n  return fields.forEach((field) => {\n    const fieldGroupNames = lodash_castArray_js__WEBPACK_IMPORTED_MODULE_6__(field.group || []);\n    fieldGroupNames.length !== 0 && fieldGroupNames.forEach((fieldGroupName) => {\n      const currentGroup = groupsByName[fieldGroupName];\n      if (!currentGroup)\n        throw new Error(\n          `Field group '${fieldGroupName}' is not defined in schema for type '${typeDef.title ? typeDef.name : lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(typeDef.name)}'`\n        );\n      currentGroup.fields.push(field);\n    });\n  }), lodash_flatMap_js__WEBPACK_IMPORTED_MODULE_7__(groupsByName).filter((group) => group.fields.length > 0);\n}\nconst DOCUMENT_CORE = {\n  name: \"document\",\n  title: \"Document\",\n  type: null,\n  jsonType: \"object\"\n}, DocumentType = {\n  get() {\n    return DOCUMENT_CORE;\n  },\n  extend: ObjectType.extend\n}, OVERRIDABLE_FIELDS$8 = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], EMAIL_CORE = {\n  name: \"email\",\n  title: \"Email\",\n  type: null,\n  jsonType: \"string\"\n};\nlazyGetter(\n  EMAIL_CORE,\n  _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME,\n  () => ({\n    ...EMAIL_CORE,\n    validation: (Rule) => Rule.email()\n  }),\n  { enumerable: !1 }\n);\nconst EmailType = {\n  get() {\n    return EMAIL_CORE;\n  },\n  extend(subTypeDef) {\n    const ownProps = {\n      ...subTypeDef,\n      preview: primitivePreview\n    }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(EMAIL_CORE, OVERRIDABLE_FIELDS$8), ownProps, {\n      type: EMAIL_CORE\n    });\n    return hiddenGetter(parsed, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$8), current = Object.assign({}, parent, subOwnProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n}, ASSET_FIELD$1 = {\n  name: \"asset\",\n  type: \"reference\",\n  to: { type: \"sanity.fileAsset\" }\n}, MEDIA_LIBRARY_ASSET_FIELD$1 = {\n  name: \"media\",\n  type: \"globalDocumentReference\",\n  hidden: !0,\n  to: [{ type: \"sanity.asset\" }]\n}, OVERRIDABLE_FIELDS$7 = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], FILE_CORE = {\n  name: \"file\",\n  title: \"File\",\n  type: null,\n  jsonType: \"object\"\n}, DEFAULT_OPTIONS$1 = {\n  accept: \"\"\n}, FileType = {\n  get() {\n    return FILE_CORE;\n  },\n  extend(rawSubTypeDef, createMemberType) {\n    const options = { ...rawSubTypeDef.options || DEFAULT_OPTIONS$1 }, fields = [ASSET_FIELD$1, MEDIA_LIBRARY_ASSET_FIELD$1, ...rawSubTypeDef.fields || []], subTypeDef = { ...rawSubTypeDef, fields }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(FILE_CORE, OVERRIDABLE_FIELDS$7), subTypeDef, {\n      type: FILE_CORE,\n      title: subTypeDef.title || (subTypeDef.name ? lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(subTypeDef.name) : FILE_CORE.title),\n      options,\n      fields: subTypeDef.fields.map((fieldDef) => {\n        const { name, fieldset, ...rest } = fieldDef, compiledField = {\n          name,\n          fieldset,\n          isCustomized: !!rawSubTypeDef.fields\n        };\n        return lazyGetter(compiledField, \"type\", () => createMemberType({\n          ...rest,\n          title: fieldDef.title || lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(name)\n        }));\n      })\n    });\n    return lazyGetter(parsed, \"fieldsets\", () => createFieldsets(subTypeDef, parsed.fields)), lazyGetter(parsed, \"preview\", createPreviewGetter(Object.assign({}, subTypeDef, { fields }))), lazyGetter(\n      parsed,\n      _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME,\n      () => ({\n        ...subTypeDef,\n        options,\n        fields: parsed.fields,\n        title: parsed.title,\n        fieldsets: parsed.fieldsets,\n        preview: parsed.preview\n      }),\n      { enumerable: !1, writable: !1 }\n    ), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          if (extensionDef.fields)\n            throw new Error('Cannot override `fields` of subtypes of \"file\"');\n          const ownProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$7), current = Object.assign({}, parent, ownProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(current);\n        }\n      };\n    }\n  }\n}, REF_FIELD$1 = {\n  name: \"_ref\",\n  title: \"Referenced document ID\",\n  type: \"string\"\n}, WEAK_FIELD$1 = {\n  name: \"_weak\",\n  title: \"Weak reference\",\n  type: \"boolean\"\n}, REFERENCE_FIELDS$1 = [REF_FIELD$1, WEAK_FIELD$1], OVERRIDABLE_FIELDS$6 = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], GLOBAL_DOCUMENT_REFERENCE_CORE = {\n  name: \"globalDocumentReference\",\n  title: \"Global Document Reference\",\n  type: null,\n  jsonType: \"object\"\n};\nfunction humanize$1(arr, conjunction) {\n  const len = arr.length;\n  if (len === 1)\n    return arr[0];\n  const first = arr.slice(0, len - 1), last = arr[len - 1];\n  return `${first.join(\", \")} ${conjunction} ${last}`;\n}\nfunction buildTitle$1(type) {\n  return !type.to || type.to.length === 0 ? \"Global Document Reference\" : `Global Document Reference to ${humanize$1(\n    arrify__WEBPACK_IMPORTED_MODULE_2__(type.to).map((toType) => toType.title),\n    \"or\"\n  ).toLowerCase()}`;\n}\nconst GlobalDocumentReferenceType = {\n  get() {\n    return GLOBAL_DOCUMENT_REFERENCE_CORE;\n  },\n  extend(subTypeDef, createMemberType) {\n    if (!subTypeDef.to)\n      throw new Error(\n        `Missing \"to\" field in global document reference definition. Check the type ${subTypeDef.name}`\n      );\n    const parsed = Object.assign(\n      lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(GLOBAL_DOCUMENT_REFERENCE_CORE, OVERRIDABLE_FIELDS$6),\n      subTypeDef,\n      {\n        type: GLOBAL_DOCUMENT_REFERENCE_CORE\n      }\n    );\n    return lazyGetter(parsed, \"fields\", () => REFERENCE_FIELDS$1.map((fieldDef) => {\n      const { name, ...type } = fieldDef;\n      return {\n        name,\n        type: createMemberType(type)\n      };\n    })), lazyGetter(parsed, \"to\", () => arrify__WEBPACK_IMPORTED_MODULE_2__(subTypeDef.to).map((toType) => ({\n      ...toType\n    }))), lazyGetter(parsed, \"title\", () => subTypeDef.title || buildTitle$1(parsed)), lazyGetter(\n      parsed,\n      _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME,\n      () => ({\n        ...subTypeDef,\n        fields: parsed.fields,\n        to: parsed.to,\n        title: parsed.title\n      }),\n      { enumerable: !1, writable: !1 }\n    ), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          if (extensionDef.of)\n            throw new Error('Cannot override `of` of subtypes of \"globalDocumentReference\"');\n          const ownProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$6), current = Object.assign({}, parent, ownProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(current);\n        }\n      };\n    }\n  }\n}, ASSET_FIELD = {\n  name: \"asset\",\n  type: \"reference\",\n  to: [{ type: \"sanity.imageAsset\" }]\n}, HOTSPOT_FIELD = {\n  name: \"hotspot\",\n  type: \"sanity.imageHotspot\"\n}, CROP_FIELD = {\n  name: \"crop\",\n  type: \"sanity.imageCrop\"\n}, MEDIA_LIBRARY_ASSET_FIELD = {\n  name: \"media\",\n  type: \"globalDocumentReference\",\n  hidden: !0,\n  to: [{ type: \"sanity.asset\" }]\n}, OVERRIDABLE_FIELDS$5 = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], IMAGE_CORE = {\n  name: \"image\",\n  title: \"Image\",\n  type: null,\n  jsonType: \"object\"\n}, DEFAULT_OPTIONS = {}, ImageType = {\n  get() {\n    return IMAGE_CORE;\n  },\n  extend(rawSubTypeDef, createMemberType) {\n    const options = { ...rawSubTypeDef.options || DEFAULT_OPTIONS };\n    let hotspotFields = [HOTSPOT_FIELD, CROP_FIELD];\n    options.hotspot || (hotspotFields = hotspotFields.map((field) => ({ ...field, hidden: !0 })));\n    const fields = [\n      ASSET_FIELD,\n      MEDIA_LIBRARY_ASSET_FIELD,\n      ...hotspotFields,\n      ...rawSubTypeDef.fields || []\n    ], subTypeDef = { ...rawSubTypeDef, fields }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(this.get(), OVERRIDABLE_FIELDS$5), subTypeDef, {\n      type: IMAGE_CORE,\n      title: subTypeDef.title || (subTypeDef.name ? lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(subTypeDef.name) : IMAGE_CORE.title),\n      options,\n      fields: subTypeDef.fields.map((fieldDef) => {\n        const { name, fieldset, ...rest } = fieldDef, compiledField = {\n          name,\n          fieldset,\n          isCustomized: !!rawSubTypeDef.fields\n        };\n        return lazyGetter(compiledField, \"type\", () => createMemberType({\n          ...rest,\n          title: fieldDef.title || lodash_startCase_js__WEBPACK_IMPORTED_MODULE_8__(name)\n        }));\n      })\n    });\n    return lazyGetter(parsed, \"fieldsets\", () => createFieldsets(subTypeDef, parsed.fields)), lazyGetter(parsed, \"preview\", createPreviewGetter(Object.assign({}, subTypeDef, { fields }))), lazyGetter(\n      parsed,\n      _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME,\n      () => ({\n        ...subTypeDef,\n        options,\n        fields: parsed.fields,\n        title: parsed.title,\n        fieldsets: parsed.fieldsets,\n        preview: parsed.preview\n      }),\n      { enumerable: !1, writable: !1 }\n    ), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          if (extensionDef.fields)\n            throw new Error('Cannot override `fields` of subtypes of \"image\"');\n          const ownProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$5), current = Object.assign({}, parent, ownProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(current);\n        }\n      };\n    }\n  }\n}, OVERRIDABLE_FIELDS$4 = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], NUMBER_CORE = {\n  name: \"number\",\n  title: \"Number\",\n  type: null,\n  jsonType: \"number\"\n}, NumberType = {\n  get() {\n    return NUMBER_CORE;\n  },\n  extend(subTypeDef) {\n    const ownProps = {\n      ...subTypeDef,\n      preview: primitivePreview\n    }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(NUMBER_CORE, OVERRIDABLE_FIELDS$4), ownProps, {\n      type: NUMBER_CORE\n    });\n    return hiddenGetter(parsed, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$4), current = Object.assign({}, parent, subOwnProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n}, REF_FIELD = {\n  name: \"_ref\",\n  title: \"Referenced document ID\",\n  type: \"string\"\n}, WEAK_FIELD = {\n  name: \"_weak\",\n  title: \"Weak reference\",\n  type: \"boolean\"\n}, REFERENCE_FIELDS = [REF_FIELD, WEAK_FIELD], OVERRIDABLE_FIELDS$3 = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], REFERENCE_CORE = {\n  name: \"reference\",\n  title: \"Reference\",\n  type: null,\n  jsonType: \"object\"\n};\nfunction humanize(arr, conjunction) {\n  const len = arr.length;\n  if (len === 1)\n    return arr[0];\n  const first = arr.slice(0, len - 1), last = arr[len - 1];\n  return `${first.join(\", \")} ${conjunction} ${last}`;\n}\nfunction buildTitle(type) {\n  return !type.to || type.to.length === 0 ? \"Reference\" : `Reference to ${humanize(\n    arrify__WEBPACK_IMPORTED_MODULE_2__(type.to).map((toType) => toType.title),\n    \"or\"\n  ).toLowerCase()}`;\n}\nconst ReferenceType = {\n  get() {\n    return REFERENCE_CORE;\n  },\n  extend(subTypeDef, createMemberType) {\n    if (!subTypeDef.to)\n      throw new Error(\n        `Missing \"to\" field in reference definition. Check the type ${subTypeDef.name}`\n      );\n    const parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(REFERENCE_CORE, OVERRIDABLE_FIELDS$3), subTypeDef, {\n      type: REFERENCE_CORE\n    });\n    return lazyGetter(parsed, \"fields\", () => REFERENCE_FIELDS.map((fieldDef) => {\n      const { name, ...type } = fieldDef;\n      return {\n        name,\n        type: createMemberType(type)\n      };\n    })), lazyGetter(parsed, \"fieldsets\", () => createFieldsets(subTypeDef, parsed.fields)), lazyGetter(parsed, \"to\", () => arrify__WEBPACK_IMPORTED_MODULE_2__(subTypeDef.to).map((toType) => createMemberType(toType))), lazyGetter(parsed, \"title\", () => subTypeDef.title || buildTitle(parsed)), lazyGetter(\n      parsed,\n      _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME,\n      () => ({\n        ...subTypeDef,\n        fields: parsed.fields,\n        fieldsets: parsed.fieldsets,\n        to: parsed.to,\n        title: parsed.title\n      }),\n      { enumerable: !1, writable: !1 }\n    ), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          if (extensionDef.of)\n            throw new Error('Cannot override `of` of subtypes of \"reference\"');\n          const ownProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$3), current = Object.assign({}, parent, ownProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(current);\n        }\n      };\n    }\n  }\n}, OVERRIDABLE_FIELDS$2 = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], STRING_CORE = {\n  name: \"string\",\n  title: \"String\",\n  type: null,\n  jsonType: \"string\"\n}, StringType = {\n  get() {\n    return STRING_CORE;\n  },\n  extend(subTypeDef) {\n    const ownProps = {\n      ...subTypeDef,\n      preview: primitivePreview\n    }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(STRING_CORE, OVERRIDABLE_FIELDS$2), ownProps, {\n      type: STRING_CORE\n    });\n    return hiddenGetter(parsed, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$2), current = Object.assign({}, parent, subOwnProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n}, OVERRIDABLE_FIELDS$1 = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS, \"rows\"], TEXT_CORE = {\n  name: \"text\",\n  title: \"Text\",\n  type: null,\n  jsonType: \"string\"\n}, TextType = {\n  get() {\n    return TEXT_CORE;\n  },\n  extend(subTypeDef) {\n    const ownProps = {\n      ...subTypeDef,\n      preview: primitivePreview\n    }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(TEXT_CORE, OVERRIDABLE_FIELDS$1), ownProps, {\n      type: TEXT_CORE\n    });\n    return hiddenGetter(parsed, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          const subOwnProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS$1), current = Object.assign({}, parent, subOwnProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnProps), subtype(current);\n        }\n      };\n    }\n  }\n}, OVERRIDABLE_FIELDS = [..._chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_OVERRIDEABLE_FIELDS], URL_CORE = {\n  name: \"url\",\n  title: \"Url\",\n  type: null,\n  jsonType: \"string\"\n}, UrlType = {\n  get() {\n    return URL_CORE;\n  },\n  extend(subTypeDef) {\n    const ownProps = {\n      ...subTypeDef,\n      preview: primitivePreview\n    }, parsed = Object.assign(lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(URL_CORE, OVERRIDABLE_FIELDS), ownProps, {\n      type: URL_CORE\n    });\n    return hiddenGetter(parsed, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, ownProps), subtype(parsed);\n    function subtype(parent) {\n      return {\n        get() {\n          return parent;\n        },\n        extend: (extensionDef) => {\n          const subOwnownProps = lodash_pick_js__WEBPACK_IMPORTED_MODULE_1__(extensionDef, OVERRIDABLE_FIELDS), current = Object.assign({}, parent, subOwnownProps, {\n            type: parent\n          });\n          return hiddenGetter(current, _chunks_es_resolve_mjs__WEBPACK_IMPORTED_MODULE_11__.OWN_PROPS_NAME, subOwnownProps), subtype(current);\n        }\n      };\n    }\n  }\n};\nvar types = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  any: AnyType,\n  array: ArrayType,\n  block: BlockType,\n  boolean: BooleanType,\n  crossDatasetReference: CrossDatasetReferenceType,\n  date: DateType,\n  datetime: DateTimeType,\n  document: DocumentType,\n  email: EmailType,\n  file: FileType,\n  globalDocumentReference: GlobalDocumentReferenceType,\n  image: ImageType,\n  number: NumberType,\n  object: ObjectType,\n  reference: ReferenceType,\n  span: SpanType,\n  string: StringType,\n  text: TextType,\n  url: UrlType\n});\nfunction compileRegistry(schemaDef) {\n  const registry = /* @__PURE__ */ Object.create(null);\n  let localTypeNames;\n  schemaDef.parent ? (Object.assign(registry, schemaDef.parent._registry), localTypeNames = []) : (Object.assign(registry, types), localTypeNames = Object.keys(types));\n  const defsByName = schemaDef.types.reduce((acc, def) => {\n    if (acc[def.name])\n      throw new Error(`Duplicate type name added to schema: ${def.name}`);\n    return acc[def.name] = def, acc;\n  }, {});\n  return schemaDef.types.forEach(add), {\n    registry,\n    localTypeNames\n  };\n  function ensure(typeName) {\n    if (!registry[typeName]) {\n      if (!defsByName[typeName])\n        throw new Error(`Unknown type: ${typeName}`);\n      add(defsByName[typeName]);\n    }\n  }\n  function extendMember(memberDef) {\n    return ensure(memberDef.type), registry[memberDef.type].extend(memberDef, extendMember).get();\n  }\n  function add(typeDef) {\n    ensure(typeDef.type), !registry[typeDef.name] && (localTypeNames.push(typeDef.name), registry[typeDef.name] = registry[typeDef.type].extend(typeDef, extendMember));\n  }\n}\nlet Schema$1 = class Schema {\n  _original;\n  _registry;\n  #localTypeNames;\n  static compile(schemaDef) {\n    return new Schema(schemaDef);\n  }\n  constructor(schemaDef) {\n    this._original = schemaDef;\n    const { registry, localTypeNames } = compileRegistry(schemaDef);\n    this._registry = registry, this.#localTypeNames = localTypeNames;\n  }\n  get name() {\n    return this._original.name;\n  }\n  /**\n   * Returns the parent schema.\n   */\n  get parent() {\n    return this._original.parent;\n  }\n  get(name) {\n    return this._registry[name] && this._registry[name].get();\n  }\n  has(name) {\n    return name in this._registry;\n  }\n  getTypeNames() {\n    return Object.keys(this._registry);\n  }\n  getLocalTypeNames() {\n    return this.#localTypeNames;\n  }\n};\nclass DeprecatedDefaultSchema extends Schema$1 {\n  static compile(schemaDef) {\n    return new DeprecatedDefaultSchema(schemaDef);\n  }\n  constructor(schemaDef) {\n    super(schemaDef);\n    const stack = new Error(\n      'The default export of `@sanity/schema` is deprecated. Use `import {Schema} from \"@sanity/schema\"` instead.'\n    ).stack.replace(/^Error/, \"Warning\");\n    console.warn(stack);\n  }\n}\nconst Schema2 = Schema$1;\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/index.mjs\n");

/***/ })

};
;