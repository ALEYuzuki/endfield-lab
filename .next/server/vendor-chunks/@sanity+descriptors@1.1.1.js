"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity+descriptors@1.1.1";
exports.ids = ["vendor-chunks/@sanity+descriptors@1.1.1"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@sanity+descriptors@1.1.1/node_modules/@sanity/descriptors/dist/index.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sanity+descriptors@1.1.1/node_modules/@sanity/descriptors/dist/index.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SetBuilder: () => (/* binding */ SetBuilder),\n/* harmony export */   SetSketch: () => (/* binding */ SetSketch),\n/* harmony export */   decodeBase64: () => (/* binding */ decodeBase64),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   encodeBase64Sha256: () => (/* binding */ encodeBase64Sha256),\n/* harmony export */   processSetSynchronization: () => (/* binding */ processSetSynchronization)\n/* harmony export */ });\n/* harmony import */ var sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha256-uint8array */ \"(ssr)/../node_modules/.pnpm/sha256-uint8array@0.10.7/node_modules/sha256-uint8array/dist/sha256-uint8array.mjs\");\n\nfunction arrayEquals(arr1, arr2) {\n  for (let i = 0; i < arr1.length; i++)\n    if (arr1[i] != arr2[i]) return !1;\n  return !0;\n}\nfunction arrayCompare(arr1, arr2) {\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] < arr2[i]) return -1;\n    if (arr1[i] > arr2[i]) return 1;\n  }\n  return 0;\n}\nfunction arrayZero(arr) {\n  for (let i = 0; i < arr.length; i++)\n    if (arr[i] != 0) return !1;\n  return !0;\n}\nconst MULTIHASH_SHA256 = \"\u0012 \";\nclass IDEncoder {\n  hash = new sha256_uint8array__WEBPACK_IMPORTED_MODULE_0__.Hash();\n  buffer = new ArrayBuffer(4);\n  uint8 = new Uint8Array(this.buffer);\n  uint8_byte = new Uint8Array(this.buffer, 0, 1);\n  int32 = new Int32Array(this.buffer);\n  encodeByte(byte) {\n    this.uint8_byte[0] = byte, this.hash.update(this.uint8_byte);\n  }\n  encodeString(val) {\n    this.hash.update(val, \"utf8\");\n  }\n  encodeInt32(val) {\n    if (this.int32[0] = val, this.int32[0] !== val) throw new Error(\"Only 32-bit numbers can be encoded as descriptors\");\n    this.hash.update(this.uint8);\n  }\n  encodeValue(val) {\n    if (val === null)\n      this.encodeByte(\n        110\n        /* NULL */\n      );\n    else if (val === !0)\n      this.encodeByte(\n        116\n        /* TRUE */\n      );\n    else if (val === !1)\n      this.encodeByte(\n        102\n        /* FALSE */\n      );\n    else if (typeof val == \"string\")\n      this.encodeByte(\n        115\n        /* STRING */\n      ), this.encodeString(val);\n    else if (Array.isArray(val)) {\n      this.encodeByte(\n        97\n        /* ARRAY_START */\n      );\n      for (const elem of val)\n        this.encodeValue(elem);\n      this.encodeByte(\n        65\n        /* ARRAY_END */\n      );\n    } else {\n      const digests = [];\n      for (const [key, field] of Object.entries(val)) {\n        if (field === void 0)\n          continue;\n        const fieldEncoder = new IDEncoder();\n        fieldEncoder.encodeString(key), fieldEncoder.encodeValue(field), digests.push(fieldEncoder.getDigest());\n      }\n      digests.sort((a, b) => arrayCompare(a, b)), this.encodeByte(\n        111\n        /* OBJECT_START */\n      );\n      for (const digest of digests)\n        this.hash.update(digest);\n      this.encodeByte(\n        79\n        /* OBJECT_END */\n      );\n    }\n  }\n  encodeObjectWithType(type, val) {\n    const digests = [];\n    for (const [key, field] of Object.entries(val)) {\n      if (field === void 0)\n        continue;\n      const fieldEncoder = new IDEncoder();\n      fieldEncoder.encodeString(key), fieldEncoder.encodeValue(field), digests.push(fieldEncoder.getDigest());\n    }\n    const typeEncoder = new IDEncoder();\n    typeEncoder.encodeString(\"type\"), typeEncoder.encodeValue(type), digests.push(typeEncoder.getDigest()), digests.sort((a, b) => arrayCompare(a, b)), this.encodeByte(\n      111\n      /* OBJECT_START */\n    );\n    for (const digest of digests)\n      this.hash.update(digest);\n    this.encodeByte(\n      79\n      /* OBJECT_END */\n    );\n  }\n  getDigest() {\n    return this.hash.digest();\n  }\n}\nfunction encodeBase64(data, prefix = \"\") {\n  let binary = prefix;\n  for (let i = 0; i < data.length; i++)\n    binary += String.fromCharCode(data[i]);\n  return \"u\" + globalThis.btoa(binary).replaceAll(\"+\", \"-\").replaceAll(\"/\", \"_\").replaceAll(\"=\", \"\");\n}\nfunction encodeBase64Sha256(data) {\n  return encodeBase64(data, MULTIHASH_SHA256);\n}\nfunction decodeBase64(input, into) {\n  if (input[0] !== \"u\") throw new Error(\"Invalid base64\");\n  const binary = globalThis.atob(input.slice(1).replaceAll(\"-\", \"+\").replaceAll(\"_\", \"/\"));\n  for (let i = 0; i < binary.length; i++)\n    into[i] = binary.charCodeAt(i);\n}\nfunction encode(type, props, options) {\n  const idEncoder = new IDEncoder();\n  idEncoder.encodeObjectWithType(type, props);\n  const digest = idEncoder.getDigest();\n  return options?.withDigest && options.withDigest(digest), { id: encodeBase64(digest, MULTIHASH_SHA256), type, ...props };\n}\nconst NUM_HASH = 3;\nclass SetSketch {\n  arr;\n  byteSize;\n  numBuckets;\n  constructor(byteSize, numBuckets) {\n    if (numBuckets >= 31) throw new Error(\"numBuckets must be less than 31\");\n    this.byteSize = byteSize, this.numBuckets = numBuckets, this.arr = new Uint8Array(this.byteSize * this.numBuckets);\n  }\n  toggle(val, yieldBucket) {\n    for (let k = 0; k < NUM_HASH; k++) {\n      const bucket = val[k] % this.numBuckets;\n      yieldBucket && yieldBucket(bucket);\n      const offset = bucket * this.byteSize;\n      for (let idx = 0; idx < this.byteSize; idx++)\n        this.arr[offset + idx] ^= val[idx];\n    }\n  }\n  toggleAll(other) {\n    for (let i = 0; i < this.arr.length; i++)\n      this.arr[i] ^= other.arr[i];\n  }\n  copy() {\n    const result = new SetSketch(this.byteSize, this.numBuckets);\n    for (let idx = 0; idx < this.arr.length; idx++)\n      result.arr[idx] = this.arr[idx];\n    return result;\n  }\n  decode() {\n    const max = this.numBuckets * 2, set = new BufferSet(this.byteSize, max), queue = new BitQueue(this.numBuckets);\n    let t = 0;\n    for (; !queue.isEmpty(); ) {\n      const bucket = queue.pop();\n      if (this.looksPure(bucket)) {\n        if (t >= max)\n          return null;\n        const offset = bucket * this.byteSize, slice = this.arr.slice(offset, offset + this.byteSize);\n        set.toggle(slice), this.toggle(slice, (otherBuckets) => {\n          otherBuckets !== bucket && queue.set(otherBuckets);\n        }), t++;\n      }\n    }\n    return arrayZero(this.arr) ? set : null;\n  }\n  looksPure(bucket) {\n    const offset = bucket * this.byteSize, val = this.arr.subarray(offset, offset + this.byteSize);\n    if (arrayZero(val)) return !1;\n    let hashedToBucketCount = 0;\n    for (let k = 0; k < NUM_HASH; k++)\n      val[k] % this.numBuckets === bucket && hashedToBucketCount++;\n    return hashedToBucketCount % 2 == 1;\n  }\n}\nclass BufferSet {\n  arr;\n  byteSize;\n  length;\n  capacity;\n  constructor(byteSize, capacity) {\n    this.arr = new Uint8Array(byteSize * capacity), this.byteSize = byteSize, this.length = 0, this.capacity = capacity;\n  }\n  toggle(val) {\n    for (let i = 0; i < this.length; i++) {\n      const start = i * this.byteSize, slice = this.arr.subarray(start, start + this.byteSize);\n      if (arrayEquals(val, slice)) {\n        if (i != this.length - 1) {\n          const lastEntryByteIdx = (this.length - 1) * this.byteSize;\n          for (let j = 0; j < this.byteSize; j++)\n            slice[j] = this.arr[lastEntryByteIdx + j];\n        }\n        this.length--;\n        return;\n      }\n    }\n    if (this.length === this.capacity) throw new Error(\"BufferSet is full\");\n    const byteIdx = this.length * this.byteSize;\n    for (let i = 0; i < this.byteSize; i++)\n      this.arr[byteIdx + i] = val[i];\n    this.length++;\n  }\n  forEach(fn) {\n    for (let i = 0; i < this.length; i++) {\n      const start = i * this.byteSize;\n      fn(this.arr.subarray(start, start + this.byteSize));\n    }\n  }\n  /**\n   * Returns a normalized JSON representation.\n   *\n   * This is not optimized and should mainly be used for debugging.\n   */\n  toJSON() {\n    const result = [];\n    return this.forEach((entry) => {\n      result.push(Array.from(entry));\n    }), result.sort((a, b) => arrayCompare(a, b)), result;\n  }\n}\nclass BitQueue {\n  bitset;\n  queue;\n  constructor(size) {\n    this.bitset = (1 << size) - 1, this.queue = Array.from({ length: size }, (_, i) => i);\n  }\n  set(idx) {\n    const mask = 1 << idx;\n    this.bitset & mask || (this.queue.push(idx), this.bitset |= mask);\n  }\n  isEmpty() {\n    return this.bitset === 0;\n  }\n  pop() {\n    const idx = this.queue.shift(), mask = 1 << idx;\n    return this.bitset &= ~mask, idx;\n  }\n}\nclass SetBuilder {\n  objectValues = {};\n  setValues = {};\n  keys = [];\n  sketch = new SetSketch(32, 8);\n  /**\n   * Add an object to the set.\n   */\n  addObject(type, obj) {\n    const value = encode(type, obj, {\n      withDigest: (digest) => {\n        this.sketch.toggle(digest);\n      }\n    });\n    this.objectValues[value.id] = value, this.keys.push(value.id);\n  }\n  /**\n   * Add another set to the set.\n   */\n  addSet(sync) {\n    this.setValues[sync.set.id] = sync, this.sketch.toggle(sync.digest), this.keys.push(sync.set.id);\n  }\n  build(type) {\n    this.keys.sort();\n    let digest;\n    return {\n      set: encode(\n        type,\n        { keys: this.keys },\n        {\n          withDigest: (d) => {\n            digest = d;\n          }\n        }\n      ),\n      digest,\n      objectValues: this.objectValues,\n      setValues: this.setValues,\n      sketch: this.sketch\n    };\n  }\n}\nfunction processSetSynchronization(sync, prevResult) {\n  const id = sync.set.id;\n  if (!prevResult) return { id };\n  if (prevResult.type === \"complete\") return null;\n  const descriptors = [];\n  for (const missingId of prevResult.missingIds) {\n    const descriptor = findDescriptor(sync, missingId);\n    if (!descriptor) throw new Error(\"Synchronization server is requested an unknonwn descriptor\");\n    descriptors.push(descriptor);\n  }\n  return { id, descriptors };\n}\nfunction findDescriptor(sync, id) {\n  if (sync.set.id === id) return sync.set;\n  const desc = sync.objectValues[id];\n  if (desc) return desc;\n  for (const child of Object.values(sync.setValues)) {\n    const childDesc = findDescriptor(child, id);\n    if (childDesc) return childDesc;\n  }\n  return null;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@sanity+descriptors@1.1.1/node_modules/@sanity/descriptors/dist/index.js\n");

/***/ })

};
;