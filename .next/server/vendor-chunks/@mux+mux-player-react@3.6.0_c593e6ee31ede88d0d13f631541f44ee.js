"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mux+mux-player-react@3.6.0_c593e6ee31ede88d0d13f631541f44ee";
exports.ids = ["vendor-chunks/@mux+mux-player-react@3.6.0_c593e6ee31ede88d0d13f631541f44ee"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@mux+mux-player-react@3.6.0_c593e6ee31ede88d0d13f631541f44ee/node_modules/@mux/mux-player-react/dist/index.mjs":
/*!********************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mux+mux-player-react@3.6.0_c593e6ee31ede88d0d13f631541f44ee/node_modules/@mux/mux-player-react/dist/index.mjs ***!
  \********************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MaxResolution: () => (/* reexport safe */ _mux_playback_core__WEBPACK_IMPORTED_MODULE_1__.MaxResolution),\n/* harmony export */   MediaError: () => (/* reexport safe */ _mux_mux_player__WEBPACK_IMPORTED_MODULE_2__.MediaError),\n/* harmony export */   MinResolution: () => (/* reexport safe */ _mux_playback_core__WEBPACK_IMPORTED_MODULE_1__.MinResolution),\n/* harmony export */   RenditionOrder: () => (/* reexport safe */ _mux_playback_core__WEBPACK_IMPORTED_MODULE_1__.RenditionOrder),\n/* harmony export */   \"default\": () => (/* binding */ ze),\n/* harmony export */   generatePlayerInitTime: () => (/* reexport safe */ _mux_playback_core__WEBPACK_IMPORTED_MODULE_1__.generatePlayerInitTime),\n/* harmony export */   playerSoftwareName: () => (/* binding */ fe),\n/* harmony export */   playerSoftwareVersion: () => (/* binding */ de)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/.pnpm/next@15.5.2_@babel+core@7.2_a4e656b99e842170c0a22eb76d21770b/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _mux_playback_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mux/playback-core */ \"(ssr)/../node_modules/.pnpm/@mux+playback-core@0.31.0/node_modules/@mux/playback-core/dist/index.mjs\");\n/* harmony import */ var _mux_mux_player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mux/mux-player */ \"(ssr)/../node_modules/.pnpm/@mux+mux-player@3.6.0_react@18.3.1/node_modules/@mux/mux-player/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ MaxResolution,MediaError,MinResolution,RenditionOrder,default,generatePlayerInitTime,playerSoftwareName,playerSoftwareVersion auto */ \n\n\n\nvar M = parseInt(react__WEBPACK_IMPORTED_MODULE_0__.version) >= 19, E = {\n    className: \"class\",\n    classname: \"class\",\n    htmlFor: \"for\",\n    crossOrigin: \"crossorigin\",\n    viewBox: \"viewBox\",\n    playsInline: \"playsinline\",\n    autoPlay: \"autoplay\",\n    playbackRate: \"playbackrate\"\n}, B = (e)=>e == null, ee = (e, t)=>B(t) ? !1 : e in t, te = (e)=>e.replace(/[A-Z]/g, (t)=>`-${t.toLowerCase()}`), ne = (e, t)=>{\n    if (!(!M && typeof t == \"boolean\" && !t)) {\n        if (ee(e, E)) return E[e];\n        if (typeof t != \"undefined\") return /[A-Z]/.test(e) ? te(e) : e;\n    }\n};\nvar ae = (e, t)=>!M && typeof e == \"boolean\" ? \"\" : e, P = (e = {})=>{\n    let { ref: t, ...n } = e;\n    return Object.entries(n).reduce((o, [a, l])=>{\n        let i = ne(a, l);\n        if (!i) return o;\n        let c = ae(l, a);\n        return o[i] = c, o;\n    }, {});\n};\n\nfunction x(e, t) {\n    if (typeof e == \"function\") return e(t);\n    e != null && (e.current = t);\n}\nfunction re(...e) {\n    return (t)=>{\n        let n = !1, o = e.map((a)=>{\n            let l = x(a, t);\n            return !n && typeof l == \"function\" && (n = !0), l;\n        });\n        if (n) return ()=>{\n            for(let a = 0; a < o.length; a++){\n                let l = o[a];\n                typeof l == \"function\" ? l() : x(e[a], null);\n            }\n        };\n    };\n}\nfunction f(...e) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(re(...e), e);\n}\n\nvar oe = Object.prototype.hasOwnProperty, ue = (e, t)=>{\n    if (Object.is(e, t)) return !0;\n    if (typeof e != \"object\" || e === null || typeof t != \"object\" || t === null) return !1;\n    if (Array.isArray(e)) return !Array.isArray(t) || e.length !== t.length ? !1 : e.some((a, l)=>t[l] === a);\n    let n = Object.keys(e), o = Object.keys(t);\n    if (n.length !== o.length) return !1;\n    for(let a = 0; a < n.length; a++)if (!oe.call(t, n[a]) || !Object.is(e[n[a]], t[n[a]])) return !1;\n    return !0;\n}, p = (e, t, n)=>!ue(t, e[n]), se = (e, t, n)=>{\n    e[n] = t;\n}, ie = (e, t, n, o = se, a = p)=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let l = n == null ? void 0 : n.current;\n        l && a(l, t, e) && o(l, t, e);\n    }, [\n        n == null ? void 0 : n.current,\n        t\n    ]), u = ie;\nvar ye = ()=>{\n    try {\n        return \"3.6.0\";\n    } catch  {}\n    return \"UNKNOWN\";\n}, me = ye(), g = ()=>me;\n\nvar r = (e, t, n)=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let o = t == null ? void 0 : t.current;\n        if (!o || !n) return;\n        let a = e, l = n;\n        return o.addEventListener(a, l), ()=>{\n            o.removeEventListener(a, l);\n        };\n    }, [\n        t == null ? void 0 : t.current,\n        n,\n        e\n    ]);\nvar Pe = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(({ children: e, ...t }, n)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"mux-player\", {\n        suppressHydrationWarning: !0,\n        ...P(t),\n        ref: n\n    }, e)), xe = (e, t)=>{\n    let { onAbort: n, onCanPlay: o, onCanPlayThrough: a, onEmptied: l, onLoadStart: i, onLoadedData: c, onLoadedMetadata: v, onProgress: R, onDurationChange: T, onVolumeChange: h, onRateChange: b, onResize: C, onWaiting: k, onPlay: O, onPlaying: S, onTimeUpdate: w, onPause: N, onSeeking: L, onSeeked: A, onStalled: I, onSuspend: _, onEnded: K, onError: H, onCuePointChange: D, onChapterChange: V, metadata: W, tokens: U, paused: z, playbackId: F, playbackRates: G, currentTime: Z, themeProps: j, extraSourceParams: q, castCustomData: J, _hlsConfig: Y, ...$ } = t;\n    return u(\"tokens\", U, e), u(\"playbackId\", F, e), u(\"playbackRates\", G, e), u(\"metadata\", W, e), u(\"extraSourceParams\", q, e), u(\"_hlsConfig\", Y, e), u(\"themeProps\", j, e), u(\"castCustomData\", J, e), u(\"paused\", z, e, (s, y)=>{\n        y != null && (y ? s.pause() : s.play());\n    }, (s, y, Q)=>s.hasAttribute(\"autoplay\") && !s.hasPlayed ? !1 : p(s, y, Q)), u(\"currentTime\", Z, e, (s, y)=>{\n        y != null && (s.currentTime = y);\n    }), r(\"abort\", e, n), r(\"canplay\", e, o), r(\"canplaythrough\", e, a), r(\"emptied\", e, l), r(\"loadstart\", e, i), r(\"loadeddata\", e, c), r(\"loadedmetadata\", e, v), r(\"progress\", e, R), r(\"durationchange\", e, T), r(\"volumechange\", e, h), r(\"ratechange\", e, b), r(\"resize\", e, C), r(\"waiting\", e, k), r(\"play\", e, O), r(\"playing\", e, S), r(\"timeupdate\", e, w), r(\"pause\", e, N), r(\"seeking\", e, L), r(\"seeked\", e, A), r(\"stalled\", e, I), r(\"suspend\", e, _), r(\"ended\", e, K), r(\"error\", e, H), r(\"cuepointchange\", e, D), r(\"chapterchange\", e, V), [\n        $\n    ];\n}, de = g(), fe = \"mux-player-react\", ge = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((e, t)=>{\n    var i;\n    let n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), o = f(n, t), [a] = xe(n, e), [l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((i = e.playerInitTime) != null ? i : (0,_mux_playback_core__WEBPACK_IMPORTED_MODULE_1__.generatePlayerInitTime)());\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Pe, {\n        ref: o,\n        defaultHiddenCaptions: e.defaultHiddenCaptions,\n        playerSoftwareName: fe,\n        playerSoftwareVersion: de,\n        playerInitTime: l,\n        ...a\n    });\n}), ze = ge;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@mux+mux-player-react@3.6.0_c593e6ee31ede88d0d13f631541f44ee/node_modules/@mux/mux-player-react/dist/index.mjs\n");

/***/ })

};
;