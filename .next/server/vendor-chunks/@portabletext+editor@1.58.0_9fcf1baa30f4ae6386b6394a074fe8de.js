"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de";
exports.ids = ["vendor-chunks/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js":
/*!***********************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js ***!
  \***********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockTextBefore: () => (/* binding */ getBlockTextBefore)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selector.is-selection-expanded.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js\");\n\n\nconst getBlockTextBefore = (snapshot) => {\n  if (!snapshot.context.selection)\n    return \"\";\n  const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(snapshot.context.selection), block = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_1__.getFocusBlock)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint\n      }\n    }\n  });\n  if (!block)\n    return \"\";\n  const startOfBlock = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockStartPoint)({\n    context: snapshot.context,\n    block\n  });\n  return (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionText)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startOfBlock,\n        focus: startPoint\n      }\n    }\n  });\n};\n\n//# sourceMappingURL=selector.get-text-before.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3J0YWJsZXRleHQrZWRpdG9yQDEuNTguMF85ZmNmMWJhYTMwZjRhZTYzODZiNjM5NGEwNzRmZThkZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvRjtBQUNFO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2RUFBc0Isc0NBQXNDLGlGQUFhO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHVCQUF1Qix5RUFBa0I7QUFDekM7QUFDQTtBQUNBLEdBQUc7QUFDSCxTQUFTLG9GQUFnQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBR0U7QUFDRiIsInNvdXJjZXMiOlsiRDpcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEBwb3J0YWJsZXRleHQrZWRpdG9yQDEuNTguMF85ZmNmMWJhYTMwZjRhZTYzODZiNjM5NGEwNzRmZThkZVxcbm9kZV9tb2R1bGVzXFxAcG9ydGFibGV0ZXh0XFxlZGl0b3JcXGxpYlxcX2NodW5rcy1lc1xcc2VsZWN0b3IuZ2V0LXRleHQtYmVmb3JlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldFNlbGVjdGlvblN0YXJ0UG9pbnQsIGdldEJsb2NrU3RhcnRQb2ludCB9IGZyb20gXCIuL3V0aWwuc2xpY2UtYmxvY2tzLmpzXCI7XG5pbXBvcnQgeyBnZXRGb2N1c0Jsb2NrLCBnZXRTZWxlY3Rpb25UZXh0IH0gZnJvbSBcIi4vc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWV4cGFuZGVkLmpzXCI7XG5jb25zdCBnZXRCbG9ja1RleHRCZWZvcmUgPSAoc25hcHNob3QpID0+IHtcbiAgaWYgKCFzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbilcbiAgICByZXR1cm4gXCJcIjtcbiAgY29uc3Qgc3RhcnRQb2ludCA9IGdldFNlbGVjdGlvblN0YXJ0UG9pbnQoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pLCBibG9jayA9IGdldEZvY3VzQmxvY2soe1xuICAgIC4uLnNuYXBzaG90LFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiBzdGFydFBvaW50LFxuICAgICAgICBmb2N1czogc3RhcnRQb2ludFxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGlmICghYmxvY2spXG4gICAgcmV0dXJuIFwiXCI7XG4gIGNvbnN0IHN0YXJ0T2ZCbG9jayA9IGdldEJsb2NrU3RhcnRQb2ludCh7XG4gICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICBibG9ja1xuICB9KTtcbiAgcmV0dXJuIGdldFNlbGVjdGlvblRleHQoe1xuICAgIC4uLnNuYXBzaG90LFxuICAgIGNvbnRleHQ6IHtcbiAgICAgIC4uLnNuYXBzaG90LmNvbnRleHQsXG4gICAgICBzZWxlY3Rpb246IHtcbiAgICAgICAgYW5jaG9yOiBzdGFydE9mQmxvY2ssXG4gICAgICAgIGZvY3VzOiBzdGFydFBvaW50XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5leHBvcnQge1xuICBnZXRCbG9ja1RleHRCZWZvcmVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWxlY3Rvci5nZXQtdGV4dC1iZWZvcmUuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getActiveAnnotations: () => (/* binding */ getActiveAnnotations),\n/* harmony export */   getActiveAnnotationsMarks: () => (/* binding */ getActiveAnnotationsMarks),\n/* harmony export */   getActiveDecorators: () => (/* binding */ getActiveDecorators),\n/* harmony export */   getActiveListItem: () => (/* binding */ getActiveListItem),\n/* harmony export */   getActiveStyle: () => (/* binding */ getActiveStyle),\n/* harmony export */   getCaretWordSelection: () => (/* binding */ getCaretWordSelection),\n/* harmony export */   getFirstBlock: () => (/* binding */ getFirstBlock),\n/* harmony export */   getFocusBlockObject: () => (/* binding */ getFocusBlockObject),\n/* harmony export */   getFocusInlineObject: () => (/* binding */ getFocusInlineObject),\n/* harmony export */   getFocusListBlock: () => (/* binding */ getFocusListBlock),\n/* harmony export */   getLastBlock: () => (/* binding */ getLastBlock),\n/* harmony export */   getMarkState: () => (/* binding */ getMarkState),\n/* harmony export */   getNextBlock: () => (/* binding */ getNextBlock),\n/* harmony export */   getNextInlineObject: () => (/* binding */ getNextInlineObject),\n/* harmony export */   getPreviousBlock: () => (/* binding */ getPreviousBlock),\n/* harmony export */   getSelectedBlocks: () => (/* binding */ getSelectedBlocks),\n/* harmony export */   getSelectedSpans: () => (/* binding */ getSelectedSpans),\n/* harmony export */   getSelectedTextBlocks: () => (/* binding */ getSelectedTextBlocks),\n/* harmony export */   getSelectionEndBlock: () => (/* binding */ getSelectionEndBlock),\n/* harmony export */   getSelectionEndPoint: () => (/* binding */ getSelectionEndPoint),\n/* harmony export */   getSelectionStartBlock: () => (/* binding */ getSelectionStartBlock),\n/* harmony export */   getTrimmedSelection: () => (/* binding */ getTrimmedSelection),\n/* harmony export */   isActiveAnnotation: () => (/* binding */ isActiveAnnotation),\n/* harmony export */   isActiveDecorator: () => (/* binding */ isActiveDecorator),\n/* harmony export */   isActiveListItem: () => (/* binding */ isActiveListItem),\n/* harmony export */   isActiveStyle: () => (/* binding */ isActiveStyle),\n/* harmony export */   isAtTheEndOfBlock: () => (/* binding */ isAtTheEndOfBlock),\n/* harmony export */   isAtTheStartOfBlock: () => (/* binding */ isAtTheStartOfBlock),\n/* harmony export */   isOverlappingSelection: () => (/* binding */ isOverlappingSelection),\n/* harmony export */   isPointAfterSelection: () => (/* binding */ isPointAfterSelection),\n/* harmony export */   isPointBeforeSelection: () => (/* binding */ isPointBeforeSelection),\n/* harmony export */   isSelectingEntireBlocks: () => (/* binding */ isSelectingEntireBlocks)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.is-selection-collapsed.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js\");\n/* harmony import */ var _selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selector.is-selection-expanded.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/../node_modules/.pnpm/@sanity+types@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/types/lib/index.mjs\");\n\n\n\n\nfunction isSelectionExpanded(selection) {\n  return selection ? !(0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isSelectionCollapsed)(selection) : !1;\n}\nconst getSelectionEndBlock = (snapshot) => {\n  const endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot.context.selection);\n  if (endPoint)\n    return (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: endPoint,\n          focus: endPoint\n        }\n      }\n    });\n}, getSelectionEndPoint = (snapshot) => {\n  if (snapshot.context.selection)\n    return snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus;\n}, getNextSpan = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot), selectionEndPoint = getSelectionEndPoint(snapshot);\n  if (!selectionEndBlock || !selectionEndPoint || !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, selectionEndBlock.node))\n    return;\n  const selectionEndPointChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(selectionEndPoint);\n  let endPointChildFound = !1, nextSpan;\n  for (const child of selectionEndBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = !0;\n      continue;\n    }\n    if ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && endPointChildFound) {\n      nextSpan = {\n        node: child,\n        path: [...selectionEndBlock.path, \"children\", {\n          _key: child._key\n        }]\n      };\n      break;\n    }\n  }\n  return nextSpan;\n}, getSelectionStartBlock = (snapshot) => {\n  const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot.context.selection);\n  if (startPoint)\n    return (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: startPoint,\n          focus: startPoint\n        }\n      }\n    });\n}, getPreviousSpan = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot), selectionStartPoint = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot);\n  if (!selectionStartBlock || !selectionStartPoint || !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, selectionStartBlock.node))\n    return;\n  const selectionStartPointChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(selectionStartPoint);\n  let previousSpan;\n  for (const child of selectionStartBlock.node.children) {\n    if (child._key === selectionStartPointChildKey)\n      break;\n    (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && (previousSpan = {\n      node: child,\n      path: [...selectionStartBlock.path, \"children\", {\n        _key: child._key\n      }]\n    });\n  }\n  return previousSpan;\n}, getSelectedSpans = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedSpans = [], startPoint = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot), endPoint = getSelectionEndPoint(snapshot);\n  if (!startPoint || !endPoint)\n    return selectedSpans;\n  const startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(endPoint), startSpanKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(startPoint), endSpanKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return selectedSpans;\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return selectedSpans;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  let startBlockFound = !1;\n  for (const block of slicedValue)\n    if (block._key === startBlockKey && (startBlockFound = !0), !!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block)) {\n      if (block._key === startBlockKey) {\n        for (const child of block.children)\n          if ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child)) {\n            if (startSpanKey && child._key === startSpanKey) {\n              if (startPoint.offset < child.text.length && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              }), startSpanKey === endSpanKey)\n                break;\n              continue;\n            }\n            if (endSpanKey && child._key === endSpanKey) {\n              endPoint.offset > 0 && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              });\n              break;\n            }\n            selectedSpans.length > 0 && selectedSpans.push({\n              node: child,\n              path: [{\n                _key: block._key\n              }, \"children\", {\n                _key: child._key\n              }]\n            });\n          }\n        if (startBlockKey === endBlockKey)\n          break;\n        continue;\n      }\n      if (block._key === endBlockKey) {\n        for (const child of block.children)\n          if ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child)) {\n            if (endSpanKey && child._key === endSpanKey) {\n              endPoint.offset > 0 && selectedSpans.push({\n                node: child,\n                path: [{\n                  _key: block._key\n                }, \"children\", {\n                  _key: child._key\n                }]\n              });\n              break;\n            }\n            selectedSpans.push({\n              node: child,\n              path: [{\n                _key: block._key\n              }, \"children\", {\n                _key: child._key\n              }]\n            });\n          }\n        break;\n      }\n      if (startBlockFound)\n        for (const child of block.children)\n          (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && selectedSpans.push({\n            node: child,\n            path: [{\n              _key: block._key\n            }, \"children\", {\n              _key: child._key\n            }]\n          });\n    }\n  return selectedSpans;\n}, getMarkState = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const focusTextBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusTextBlock)(snapshot), focusSpan = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusSpan)(snapshot);\n  if (!focusTextBlock || !focusSpan)\n    return;\n  if (isSelectionExpanded(snapshot.context.selection)) {\n    const selectedSpans = getSelectedSpans(snapshot);\n    let index = 0, marks2 = [];\n    for (const span of selectedSpans) {\n      if (index === 0)\n        marks2 = span.node.marks ?? [];\n      else {\n        if (span.node.marks?.length === 0) {\n          marks2 = [];\n          continue;\n        }\n        marks2 = marks2.filter((mark) => (span.node.marks ?? []).some((spanMark) => spanMark === mark));\n      }\n      index++;\n    }\n    return {\n      state: \"unchanged\",\n      marks: marks2\n    };\n  }\n  const decorators = snapshot.context.schema.decorators.map((decorator) => decorator.name), marks = focusSpan.node.marks ?? [], marksWithoutAnnotations = marks.filter((mark) => decorators.includes(mark)), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = focusSpan.node.text.length === 0, atTheBeginningOfSpan = snapshot.context.selection.anchor.offset === 0, atTheEndOfSpan = snapshot.context.selection.anchor.offset === focusSpan.node.text.length, previousSpan = getPreviousSpan(snapshot), nextSpan = getNextSpan(snapshot), nextSpanAnnotations = nextSpan?.node?.marks?.filter((mark) => !decorators.includes(mark)) ?? [], spanAnnotations = marks.filter((mark) => !decorators.includes(mark)), previousSpanHasAnnotations = previousSpan ? previousSpan.node.marks?.some((mark) => !decorators.includes(mark)) : !1, previousSpanHasSameAnnotations = previousSpan ? previousSpan.node.marks?.filter((mark) => !decorators.includes(mark)).every((mark) => marks.includes(mark)) : !1, previousSpanHasSameAnnotation = previousSpan ? previousSpan.node.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.node.marks?.every((mark) => marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) => nextSpanAnnotations?.includes(mark));\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks)\n        return {\n          state: \"changed\",\n          marks: previousSpan?.node.marks ?? []\n        };\n      if (previousSpanHasSameAnnotations)\n        return {\n          state: \"changed\",\n          marks: previousSpan?.node.marks ?? []\n        };\n      if (previousSpanHasSameAnnotation)\n        return {\n          state: \"unchanged\",\n          marks: focusSpan.node.marks ?? []\n        };\n      if (!previousSpan)\n        return {\n          state: \"changed\",\n          marks: []\n        };\n    }\n    if (atTheEndOfSpan) {\n      if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations)\n        return {\n          state: \"changed\",\n          marks: nextSpan?.node.marks ?? []\n        };\n      if (!nextSpan)\n        return {\n          state: \"changed\",\n          marks: []\n        };\n    }\n  }\n  return atTheBeginningOfSpan && !spanIsEmpty && previousSpan ? previousSpanHasAnnotations ? {\n    state: \"changed\",\n    marks: []\n  } : {\n    state: \"changed\",\n    marks: (previousSpan?.node.marks ?? []).filter((mark) => decorators.includes(mark))\n  } : {\n    state: \"unchanged\",\n    marks: focusSpan.node.marks ?? []\n  };\n}, getSelectedBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedBlocks = [], startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot.context.selection), endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot.context.selection), startKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(startPoint), endKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (!startKey || !endKey)\n    return selectedBlocks;\n  const startBlockIndex = snapshot.blockIndexMap.get(startKey), endBlockIndex = snapshot.blockIndexMap.get(endKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return selectedBlocks;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  for (const block of slicedValue) {\n    if (block._key === startKey) {\n      if (selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startKey === endKey)\n        break;\n      continue;\n    }\n    if (block._key === endKey) {\n      selectedBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedBlocks.length > 0 && selectedBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedBlocks;\n}, getActiveAnnotations = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedBlocks = getSelectedBlocks(snapshot), activeAnnotations = (getMarkState(snapshot)?.marks ?? []).filter((mark) => !snapshot.context.schema.decorators.map((decorator) => decorator.name).includes(mark));\n  return selectedBlocks.flatMap((block) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block.node) ? block.node.markDefs ?? [] : []).filter((markDef) => activeAnnotations.includes(markDef._key));\n}, getActiveListItem = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const selectedTextBlocks = getSelectedBlocks(snapshot).map((block) => block.node).filter((block) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block)), firstTextBlock = selectedTextBlocks.at(0);\n  if (!firstTextBlock)\n    return;\n  const firstListItem = firstTextBlock.listItem;\n  if (firstListItem && selectedTextBlocks.every((block) => block.listItem === firstListItem))\n    return firstListItem;\n}, getActiveStyle = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const selectedTextBlocks = getSelectedBlocks(snapshot).map((block) => block.node).filter((block) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block)), firstTextBlock = selectedTextBlocks.at(0);\n  if (!firstTextBlock)\n    return;\n  const firstStyle = firstTextBlock.style;\n  if (firstStyle && selectedTextBlocks.every((block) => block.style === firstStyle))\n    return firstStyle;\n}, getNextInlineObject = (snapshot) => {\n  const focusTextBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusTextBlock)(snapshot), selectionEndPoint = getSelectionEndPoint(snapshot), selectionEndPointChildKey = selectionEndPoint && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isKeySegment)(selectionEndPoint.path[2]) ? selectionEndPoint.path[2]._key : void 0;\n  if (!focusTextBlock || !selectionEndPointChildKey)\n    return;\n  let endPointChildFound = !1, inlineObject;\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = !0;\n      continue;\n    }\n    if (!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan$1)(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, \"children\", {\n          _key: child._key\n        }]\n      };\n      break;\n    }\n  }\n  return inlineObject;\n}, getCaretWordSelection = (snapshot) => {\n  if (!snapshot.context.selection || !(0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionCollapsed)(snapshot))\n    return null;\n  const focusTextBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusTextBlock)(snapshot), selectionStartPoint = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot), selectionStartOffset = selectionStartPoint ? (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.spanSelectionPointToBlockOffset)({\n    context: snapshot.context,\n    selectionPoint: selectionStartPoint\n  }) : void 0;\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset)\n    return null;\n  const previousInlineObject = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getPreviousInlineObject)(snapshot), blockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)({\n    context: snapshot.context,\n    block: focusTextBlock\n  }), textDirectlyBefore = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionText)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject ? {\n          path: previousInlineObject.path,\n          offset: 0\n        } : blockStartPoint,\n        focus: selectionStartPoint\n      }\n    }\n  }).split(/\\s+/).at(-1), nextInlineObject = getNextInlineObject(snapshot), blockEndPoint = (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getBlockEndPoint)({\n    context: snapshot.context,\n    block: focusTextBlock\n  }), textDirectlyAfter = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionText)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject ? {\n          path: nextInlineObject.path,\n          offset: 0\n        } : blockEndPoint\n      }\n    }\n  }).split(/\\s+/).at(0);\n  if ((textDirectlyBefore === void 0 || textDirectlyBefore === \"\") && (textDirectlyAfter === void 0 || textDirectlyAfter === \"\"))\n    return null;\n  const caretWordStartOffset = textDirectlyBefore ? {\n    ...selectionStartOffset,\n    offset: selectionStartOffset.offset - textDirectlyBefore.length\n  } : selectionStartOffset, caretWordEndOffset = textDirectlyAfter ? {\n    ...selectionStartOffset,\n    offset: selectionStartOffset.offset + textDirectlyAfter.length\n  } : selectionStartOffset, caretWordStartSelectionPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.blockOffsetToSpanSelectionPoint)({\n    context: snapshot.context,\n    blockOffset: caretWordStartOffset,\n    direction: \"backward\"\n  }), caretWordEndSelectionPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.blockOffsetToSpanSelectionPoint)({\n    context: snapshot.context,\n    blockOffset: caretWordEndOffset,\n    direction: \"forward\"\n  });\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint)\n    return null;\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint\n  };\n  return (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionExpanded)({\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection\n    }\n  }) ? caretWordSelection : null;\n}, getFirstBlock = (snapshot) => {\n  const node = snapshot.context.value[0];\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getFocusBlockObject = (snapshot) => {\n  const focusBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusBlock)(snapshot);\n  return focusBlock && !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusInlineObject = (snapshot) => {\n  const focusChild = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusChild)(snapshot);\n  return focusChild && !(0,_sanity_types__WEBPACK_IMPORTED_MODULE_3__.isPortableTextSpan)(focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getFocusListBlock = (snapshot) => {\n  const focusTextBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusTextBlock)(snapshot);\n  return focusTextBlock && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isListBlock)(snapshot.context, focusTextBlock.node) ? {\n    node: focusTextBlock.node,\n    path: focusTextBlock.path\n  } : void 0;\n}, getLastBlock = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1] ? snapshot.context.value[snapshot.context.value.length - 1] : void 0;\n  return node ? {\n    node,\n    path: [{\n      _key: node._key\n    }]\n  } : void 0;\n}, getNextBlock = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot);\n  if (!selectionEndBlock)\n    return;\n  const index = snapshot.blockIndexMap.get(selectionEndBlock.node._key);\n  if (index === void 0 || index === snapshot.context.value.length - 1)\n    return;\n  const nextBlock = snapshot.context.value.at(index + 1);\n  return nextBlock ? {\n    node: nextBlock,\n    path: [{\n      _key: nextBlock._key\n    }]\n  } : void 0;\n}, getPreviousBlock = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot);\n  if (!selectionStartBlock)\n    return;\n  const index = snapshot.blockIndexMap.get(selectionStartBlock.node._key);\n  if (index === void 0 || index === 0)\n    return;\n  const previousBlock = snapshot.context.value.at(index - 1);\n  return previousBlock ? {\n    node: previousBlock,\n    path: [{\n      _key: previousBlock._key\n    }]\n  } : void 0;\n}, getSelectedTextBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return [];\n  const selectedTextBlocks = [], startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot.context.selection), endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot.context.selection), startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return selectedTextBlocks;\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return selectedTextBlocks;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      if ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block) && selectedTextBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      }), startBlockKey === endBlockKey)\n        break;\n      continue;\n    }\n    if (block._key === endBlockKey) {\n      (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block) && selectedTextBlocks.push({\n        node: block,\n        path: [{\n          _key: block._key\n        }]\n      });\n      break;\n    }\n    selectedTextBlocks.length > 0 && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block) && selectedTextBlocks.push({\n      node: block,\n      path: [{\n        _key: block._key\n      }]\n    });\n  }\n  return selectedTextBlocks;\n}, getTrimmedSelection = (snapshot) => {\n  if (!snapshot.context.selection)\n    return snapshot.context.selection;\n  const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot.context.selection), endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot.context.selection), startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(startPoint), startChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(endPoint), endChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return snapshot.context.selection;\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return snapshot.context.selection;\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  let startBlockFound = !1, adjustedStartPoint, trimStartPoint = !1, adjustedEndPoint, trimEndPoint = !1, previousPotentialEndpoint;\n  for (const block of slicedValue)\n    if (!(block._key === startBlockKey && (startBlockFound = !0, (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block) && (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEmptyTextBlock)(snapshot.context, block))) && startBlockFound && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block)) {\n      if (block._key === endBlockKey && (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEmptyTextBlock)(snapshot.context, block))\n        break;\n      for (const child of block.children) {\n        if (child._key === endChildKey && (!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) || endPoint.offset === 0)) {\n          adjustedEndPoint = previousPotentialEndpoint ? {\n            path: [{\n              _key: previousPotentialEndpoint.blockKey\n            }, \"children\", {\n              _key: previousPotentialEndpoint.span._key\n            }],\n            offset: previousPotentialEndpoint.span.text.length\n          } : void 0, trimEndPoint = !0;\n          break;\n        }\n        if (trimStartPoint) {\n          const lonelySpan = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && block.children.length === 1;\n          ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && child.text.length > 0 || lonelySpan) && (adjustedStartPoint = {\n            path: [{\n              _key: block._key\n            }, \"children\", {\n              _key: child._key\n            }],\n            offset: 0\n          }, previousPotentialEndpoint = {\n            blockKey: block._key,\n            span: child\n          }, trimStartPoint = !1);\n          continue;\n        }\n        if (child._key === startChildKey) {\n          if (!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child)) {\n            trimStartPoint = !0;\n            continue;\n          }\n          if (startPoint.offset === child.text.length) {\n            trimStartPoint = !0, previousPotentialEndpoint = child.text.length > 0 ? {\n              blockKey: block._key,\n              span: child\n            } : previousPotentialEndpoint;\n            continue;\n          }\n        }\n        previousPotentialEndpoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isSpan)(snapshot.context, child) && child.text.length > 0 ? {\n          blockKey: block._key,\n          span: child\n        } : previousPotentialEndpoint;\n      }\n      if (block._key === endBlockKey)\n        break;\n    }\n  const trimmedSelection = snapshot.context.selection.backward ? {\n    anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n    focus: adjustedStartPoint ?? startPoint,\n    backward: !0\n  } : {\n    anchor: adjustedStartPoint ?? startPoint,\n    focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint\n  };\n  if ((0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionCollapsed)({\n    context: {\n      ...snapshot.context,\n      selection: trimmedSelection\n    }\n  })) {\n    const focusTextBlock = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getFocusTextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection\n      }\n    });\n    if (focusTextBlock && !(0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node))\n      return null;\n  }\n  return trimmedSelection;\n};\nfunction getActiveAnnotationsMarks(snapshot) {\n  const schema = snapshot.context.schema;\n  return (getMarkState(snapshot)?.marks ?? []).filter((mark) => !schema.decorators.map((decorator) => decorator.name).includes(mark));\n}\nfunction isActiveAnnotation(annotation) {\n  return (snapshot) => {\n    const selectionMarkDefs = getSelectedBlocks(snapshot).flatMap((block) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, block.node) ? block.node.markDefs ?? [] : []), activeAnnotations = getActiveAnnotationsMarks(snapshot);\n    return selectionMarkDefs.filter((markDef) => markDef._type === annotation && activeAnnotations.includes(markDef._key)).length > 0;\n  };\n}\nfunction getActiveDecorators(snapshot) {\n  const schema = snapshot.context.schema, decoratorState = snapshot.decoratorState, markState = getMarkState(snapshot), decorators = schema.decorators.map((decorator) => decorator.name);\n  let activeDecorators = (markState?.marks ?? []).filter((mark) => decorators.includes(mark));\n  for (const decorator in decoratorState)\n    decoratorState[decorator] === !1 ? activeDecorators = activeDecorators.filter((activeDecorator) => activeDecorator !== decorator) : decoratorState[decorator] === !0 && (activeDecorators.includes(decorator) || activeDecorators.push(decorator));\n  return activeDecorators;\n}\nfunction isActiveDecorator(decorator) {\n  return (snapshot) => {\n    if ((0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionExpanded)(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot);\n      return selectedSpans.length > 0 && selectedSpans.every((span) => span.node.marks?.includes(decorator));\n    }\n    return getActiveDecorators(snapshot).includes(decorator);\n  };\n}\nfunction isActiveListItem(listItem) {\n  return (snapshot) => getActiveListItem(snapshot) === listItem;\n}\nfunction isActiveStyle(style) {\n  return (snapshot) => getActiveStyle(snapshot) === style;\n}\nfunction isAtTheEndOfBlock(block) {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !(0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const blockEndPoint = (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getBlockEndPoint)({\n      context: snapshot.context,\n      block\n    });\n    return (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(snapshot.context.selection.focus, blockEndPoint);\n  };\n}\nfunction isAtTheStartOfBlock(block) {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !(0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const blockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)({\n      context: snapshot.context,\n      block\n    });\n    return (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(snapshot.context.selection.focus, blockStartPoint);\n  };\n}\nfunction isPointAfterSelection(point) {\n  return (snapshot) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionEndPoint)(snapshot.context.selection), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(endPoint), endChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(endPoint), pointBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(point), pointChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(point);\n    if (!pointBlockKey || !endBlockKey)\n      return !1;\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n    if (pointBlockIndex === void 0 || endBlockIndex === void 0)\n      return !1;\n    if (pointBlockIndex > endBlockIndex)\n      return !0;\n    if (pointBlockIndex < endBlockIndex)\n      return !1;\n    const pointBlock = snapshot.context.value.at(pointBlockIndex);\n    if (!pointBlock || !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, pointBlock))\n      return !1;\n    let pointChildIndex, endChildIndex, childIndex = -1;\n    for (const child of pointBlock.children) {\n      if (childIndex++, child._key === pointChildKey && child._key === endChildKey)\n        return point.offset > endPoint.offset;\n      if (child._key === pointChildKey && (pointChildIndex = childIndex), child._key === endChildKey && (endChildIndex = childIndex), pointChildIndex !== void 0 && endChildIndex !== void 0)\n        break;\n    }\n    return pointChildIndex === void 0 || endChildIndex === void 0 ? !1 : pointChildIndex > endChildIndex;\n  };\n}\nfunction isPointBeforeSelection(point) {\n  return (snapshot) => {\n    if (!snapshot.context.selection)\n      return !1;\n    const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getSelectionStartPoint)(snapshot.context.selection), startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(startPoint), startChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(startPoint), pointBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockKeyFromSelectionPoint)(point), pointChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getChildKeyFromSelectionPoint)(point);\n    if (!pointBlockKey || !startBlockKey)\n      return !1;\n    const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey);\n    if (startBlockIndex === void 0 || pointBlockIndex === void 0)\n      return !1;\n    if (pointBlockIndex < startBlockIndex)\n      return !0;\n    if (pointBlockIndex > startBlockIndex)\n      return !1;\n    const pointBlock = snapshot.context.value.at(pointBlockIndex);\n    if (!pointBlock || !(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.isTextBlock)(snapshot.context, pointBlock))\n      return !1;\n    let pointChildIndex, startChildIndex, childIndex = -1;\n    for (const child of pointBlock.children) {\n      if (childIndex++, child._key === pointChildKey && child._key === startChildKey)\n        return point.offset < startPoint.offset;\n      if (child._key === pointChildKey && (pointChildIndex = childIndex), child._key === startChildKey && (startChildIndex = childIndex), pointChildIndex !== void 0 && startChildIndex !== void 0)\n        break;\n    }\n    return pointChildIndex === void 0 || startChildIndex === void 0 ? !1 : pointChildIndex < startChildIndex;\n  };\n}\nfunction isOverlappingSelection(selection) {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection)\n      return !1;\n    const selectionStartPoint = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)({\n      context: {\n        ...snapshot.context,\n        selection\n      }\n    }), selectionEndPoint = getSelectionEndPoint({\n      context: {\n        ...snapshot.context,\n        selection\n      }\n    }), originalSelectionStartPoint = (0,_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_2__.getSelectionStartPoint)(snapshot), originalSelectionEndPoint = getSelectionEndPoint(snapshot);\n    if (!selectionStartPoint || !selectionEndPoint || !originalSelectionStartPoint || !originalSelectionEndPoint)\n      return !1;\n    const startPointBeforeSelection = isPointBeforeSelection(selectionStartPoint)(snapshot), startPointAfterSelection = isPointAfterSelection(selectionStartPoint)(snapshot), endPointBeforeSelection = isPointBeforeSelection(selectionEndPoint)(snapshot), endPointAfterSelection = isPointAfterSelection(selectionEndPoint)(snapshot), originalStartPointBeforeStartPoint = isPointBeforeSelection(originalSelectionStartPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint\n        }\n      }\n    }), originalStartPointAfterStartPoint = isPointAfterSelection(originalSelectionStartPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint\n        }\n      }\n    }), originalEndPointBeforeEndPoint = isPointBeforeSelection(originalSelectionEndPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }), originalEndPointAfterEndPoint = isPointAfterSelection(originalSelectionEndPoint)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }), endPointEqualToOriginalStartPoint = (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(selectionEndPoint, originalSelectionStartPoint), startPointEqualToOriginalEndPoint = (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(selectionStartPoint, originalSelectionEndPoint);\n    return endPointBeforeSelection && !endPointEqualToOriginalStartPoint || startPointAfterSelection && !startPointEqualToOriginalEndPoint ? !1 : !originalStartPointBeforeStartPoint && originalStartPointAfterStartPoint && !originalEndPointBeforeEndPoint && originalEndPointAfterEndPoint ? !endPointEqualToOriginalStartPoint : originalStartPointBeforeStartPoint && !originalStartPointAfterStartPoint && originalEndPointBeforeEndPoint && !originalEndPointAfterEndPoint ? !startPointEqualToOriginalEndPoint : !startPointAfterSelection || !startPointBeforeSelection || !endPointAfterSelection || !endPointBeforeSelection;\n  };\n}\nconst isSelectingEntireBlocks = (snapshot) => {\n  if (!snapshot.context.selection)\n    return !1;\n  const startPoint = snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor, endPoint = snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus, startBlock = getSelectionStartBlock(snapshot), endBlock = getSelectionEndBlock(snapshot);\n  if (!startBlock || !endBlock)\n    return !1;\n  const startBlockStartPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_1__.getBlockStartPoint)({\n    context: snapshot.context,\n    block: startBlock\n  }), endBlockEndPoint = (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.getBlockEndPoint)({\n    context: snapshot.context,\n    block: endBlock\n  });\n  return (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(startBlockStartPoint, startPoint) && (0,_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_0__.isEqualSelectionPoints)(endBlockEndPoint, endPoint);\n};\n\n//# sourceMappingURL=selector.is-selecting-entire-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFocusBlock: () => (/* binding */ getFocusBlock),\n/* harmony export */   getFocusChild: () => (/* binding */ getFocusChild),\n/* harmony export */   getFocusSpan: () => (/* binding */ getFocusSpan),\n/* harmony export */   getFocusTextBlock: () => (/* binding */ getFocusTextBlock),\n/* harmony export */   getPreviousInlineObject: () => (/* binding */ getPreviousInlineObject),\n/* harmony export */   getSelectedValue: () => (/* binding */ getSelectedValue),\n/* harmony export */   getSelectionStartPoint: () => (/* binding */ getSelectionStartPoint),\n/* harmony export */   getSelectionText: () => (/* binding */ getSelectionText),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed),\n/* harmony export */   isSelectionExpanded: () => (/* binding */ isSelectionExpanded)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/../node_modules/.pnpm/@sanity+types@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/types/lib/index.mjs\");\n\n\nconst getFocusBlock = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const key = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(snapshot.context.selection.focus), index = key ? snapshot.blockIndexMap.get(key) : void 0, node = index !== void 0 ? snapshot.context.value.at(index) : void 0;\n  return node && key ? {\n    node,\n    path: [{\n      _key: key\n    }]\n  } : void 0;\n}, getFocusTextBlock = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot);\n  return focusBlock && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(snapshot.context, focusBlock.node) ? {\n    node: focusBlock.node,\n    path: focusBlock.path\n  } : void 0;\n}, getFocusChild = (snapshot) => {\n  if (!snapshot.context.selection)\n    return;\n  const focusBlock = getFocusTextBlock(snapshot);\n  if (!focusBlock)\n    return;\n  const key = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(snapshot.context.selection.focus), node = key ? focusBlock.node.children.find((span) => span._key === key) : void 0;\n  return node && key ? {\n    node,\n    path: [...focusBlock.path, \"children\", {\n      _key: key\n    }]\n  } : void 0;\n}, getFocusSpan = (snapshot) => {\n  const focusChild = getFocusChild(snapshot);\n  return focusChild && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(snapshot.context, focusChild.node) ? {\n    node: focusChild.node,\n    path: focusChild.path\n  } : void 0;\n}, getSelectionStartPoint = (snapshot) => {\n  if (snapshot.context.selection)\n    return snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor;\n}, getPreviousInlineObject = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot), selectionStartPoint = getSelectionStartPoint(snapshot), selectionStartPointChildKey = selectionStartPoint && (0,_sanity_types__WEBPACK_IMPORTED_MODULE_1__.isKeySegment)(selectionStartPoint.path[2]) ? selectionStartPoint.path[2]._key : void 0;\n  if (!focusTextBlock || !selectionStartPointChildKey)\n    return;\n  let inlineObject;\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey)\n      break;\n    (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan$1)(snapshot.context, child) || (inlineObject = {\n      node: child,\n      path: [...focusTextBlock.path, \"children\", {\n        _key: child._key\n      }]\n    });\n  }\n  return inlineObject;\n}, getSelectedValue = (snapshot) => {\n  const selection = snapshot.context.selection;\n  if (!selection)\n    return [];\n  const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(selection), endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionEndPoint)(selection), startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return [];\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey), endBlockIndex = snapshot.blockIndexMap.get(endBlockKey);\n  if (startBlockIndex === void 0 || endBlockIndex === void 0)\n    return [];\n  const slicedValue = snapshot.context.value.slice(startBlockIndex, endBlockIndex + 1);\n  return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.sliceBlocks)({\n    context: snapshot.context,\n    blocks: slicedValue\n  });\n}, getSelectionText = (snapshot) => getSelectedValue(snapshot).reduce((text, block) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(snapshot.context, block) ? text + block.children.reduce((text2, child) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(snapshot.context, child) ? text2 + child.text : text2, \"\") : text, \"\"), isSelectionCollapsed = (snapshot) => snapshot.context.selection ? JSON.stringify(snapshot.context.selection.anchor.path) === JSON.stringify(snapshot.context.selection.focus.path) && snapshot.context.selection?.anchor.offset === snapshot.context.selection?.focus.offset : !1, isSelectionExpanded = (snapshot) => !isSelectionCollapsed(snapshot);\n\n//# sourceMappingURL=selector.is-selection-expanded.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3J0YWJsZXRleHQrZWRpdG9yQDEuNTguMF85ZmNmMWJhYTMwZjRhZTYzODZiNjM5NGEwNzRmZThkZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvc2VsZWN0b3IuaXMtc2VsZWN0aW9uLWV4cGFuZGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUE0TjtBQUMvSztBQUM3QztBQUNBO0FBQ0E7QUFDQSxjQUFjLG9GQUE2QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0EsdUJBQXVCLGtFQUFXO0FBQ2xDO0FBQ0E7QUFDQSxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG9GQUE2QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0EsdUJBQXVCLDZEQUFNO0FBQzdCO0FBQ0E7QUFDQSxJQUFJO0FBQ0osQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsbUtBQW1LLDJEQUFZO0FBQy9LO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksK0RBQVE7QUFDWjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDZFQUF3Qix3QkFBd0IsMkVBQW9CLDZCQUE2QixvRkFBNkIsNEJBQTRCLG9GQUE2QjtBQUM1TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGtFQUFXO0FBQ3BCO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyxzRkFBc0Ysa0VBQVcsMkVBQTJFLDZEQUFNO0FBWWpMO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAcG9ydGFibGV0ZXh0K2VkaXRvckAxLjU4LjBfOWZjZjFiYWEzMGY0YWU2Mzg2YjYzOTRhMDc0ZmU4ZGVcXG5vZGVfbW9kdWxlc1xcQHBvcnRhYmxldGV4dFxcZWRpdG9yXFxsaWJcXF9jaHVua3MtZXNcXHNlbGVjdG9yLmlzLXNlbGVjdGlvbi1leHBhbmRlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludCwgaXNUZXh0QmxvY2ssIGdldENoaWxkS2V5RnJvbVNlbGVjdGlvblBvaW50LCBpc1NwYW4sIGlzU3BhbiQxLCBnZXRTZWxlY3Rpb25TdGFydFBvaW50IGFzIGdldFNlbGVjdGlvblN0YXJ0UG9pbnQkMSwgZ2V0U2VsZWN0aW9uRW5kUG9pbnQsIHNsaWNlQmxvY2tzIH0gZnJvbSBcIi4vdXRpbC5zbGljZS1ibG9ja3MuanNcIjtcbmltcG9ydCB7IGlzS2V5U2VnbWVudCB9IGZyb20gXCJAc2FuaXR5L3R5cGVzXCI7XG5jb25zdCBnZXRGb2N1c0Jsb2NrID0gKHNuYXBzaG90KSA9PiB7XG4gIGlmICghc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pXG4gICAgcmV0dXJuO1xuICBjb25zdCBrZXkgPSBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludChzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbi5mb2N1cyksIGluZGV4ID0ga2V5ID8gc25hcHNob3QuYmxvY2tJbmRleE1hcC5nZXQoa2V5KSA6IHZvaWQgMCwgbm9kZSA9IGluZGV4ICE9PSB2b2lkIDAgPyBzbmFwc2hvdC5jb250ZXh0LnZhbHVlLmF0KGluZGV4KSA6IHZvaWQgMDtcbiAgcmV0dXJuIG5vZGUgJiYga2V5ID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IGtleVxuICAgIH1dXG4gIH0gOiB2b2lkIDA7XG59LCBnZXRGb2N1c1RleHRCbG9jayA9IChzbmFwc2hvdCkgPT4ge1xuICBjb25zdCBmb2N1c0Jsb2NrID0gZ2V0Rm9jdXNCbG9jayhzbmFwc2hvdCk7XG4gIHJldHVybiBmb2N1c0Jsb2NrICYmIGlzVGV4dEJsb2NrKHNuYXBzaG90LmNvbnRleHQsIGZvY3VzQmxvY2subm9kZSkgPyB7XG4gICAgbm9kZTogZm9jdXNCbG9jay5ub2RlLFxuICAgIHBhdGg6IGZvY3VzQmxvY2sucGF0aFxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rm9jdXNDaGlsZCA9IChzbmFwc2hvdCkgPT4ge1xuICBpZiAoIXNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uKVxuICAgIHJldHVybjtcbiAgY29uc3QgZm9jdXNCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHNuYXBzaG90KTtcbiAgaWYgKCFmb2N1c0Jsb2NrKVxuICAgIHJldHVybjtcbiAgY29uc3Qga2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uZm9jdXMpLCBub2RlID0ga2V5ID8gZm9jdXNCbG9jay5ub2RlLmNoaWxkcmVuLmZpbmQoKHNwYW4pID0+IHNwYW4uX2tleSA9PT0ga2V5KSA6IHZvaWQgMDtcbiAgcmV0dXJuIG5vZGUgJiYga2V5ID8ge1xuICAgIG5vZGUsXG4gICAgcGF0aDogWy4uLmZvY3VzQmxvY2sucGF0aCwgXCJjaGlsZHJlblwiLCB7XG4gICAgICBfa2V5OiBrZXlcbiAgICB9XVxuICB9IDogdm9pZCAwO1xufSwgZ2V0Rm9jdXNTcGFuID0gKHNuYXBzaG90KSA9PiB7XG4gIGNvbnN0IGZvY3VzQ2hpbGQgPSBnZXRGb2N1c0NoaWxkKHNuYXBzaG90KTtcbiAgcmV0dXJuIGZvY3VzQ2hpbGQgJiYgaXNTcGFuKHNuYXBzaG90LmNvbnRleHQsIGZvY3VzQ2hpbGQubm9kZSkgPyB7XG4gICAgbm9kZTogZm9jdXNDaGlsZC5ub2RlLFxuICAgIHBhdGg6IGZvY3VzQ2hpbGQucGF0aFxuICB9IDogdm9pZCAwO1xufSwgZ2V0U2VsZWN0aW9uU3RhcnRQb2ludCA9IChzbmFwc2hvdCkgPT4ge1xuICBpZiAoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24pXG4gICAgcmV0dXJuIHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uLmJhY2t3YXJkID8gc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uZm9jdXMgOiBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbi5hbmNob3I7XG59LCBnZXRQcmV2aW91c0lubGluZU9iamVjdCA9IChzbmFwc2hvdCkgPT4ge1xuICBjb25zdCBmb2N1c1RleHRCbG9jayA9IGdldEZvY3VzVGV4dEJsb2NrKHNuYXBzaG90KSwgc2VsZWN0aW9uU3RhcnRQb2ludCA9IGdldFNlbGVjdGlvblN0YXJ0UG9pbnQoc25hcHNob3QpLCBzZWxlY3Rpb25TdGFydFBvaW50Q2hpbGRLZXkgPSBzZWxlY3Rpb25TdGFydFBvaW50ICYmIGlzS2V5U2VnbWVudChzZWxlY3Rpb25TdGFydFBvaW50LnBhdGhbMl0pID8gc2VsZWN0aW9uU3RhcnRQb2ludC5wYXRoWzJdLl9rZXkgOiB2b2lkIDA7XG4gIGlmICghZm9jdXNUZXh0QmxvY2sgfHwgIXNlbGVjdGlvblN0YXJ0UG9pbnRDaGlsZEtleSlcbiAgICByZXR1cm47XG4gIGxldCBpbmxpbmVPYmplY3Q7XG4gIGZvciAoY29uc3QgY2hpbGQgb2YgZm9jdXNUZXh0QmxvY2subm9kZS5jaGlsZHJlbikge1xuICAgIGlmIChjaGlsZC5fa2V5ID09PSBzZWxlY3Rpb25TdGFydFBvaW50Q2hpbGRLZXkpXG4gICAgICBicmVhaztcbiAgICBpc1NwYW4kMShzbmFwc2hvdC5jb250ZXh0LCBjaGlsZCkgfHwgKGlubGluZU9iamVjdCA9IHtcbiAgICAgIG5vZGU6IGNoaWxkLFxuICAgICAgcGF0aDogWy4uLmZvY3VzVGV4dEJsb2NrLnBhdGgsIFwiY2hpbGRyZW5cIiwge1xuICAgICAgICBfa2V5OiBjaGlsZC5fa2V5XG4gICAgICB9XVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBpbmxpbmVPYmplY3Q7XG59LCBnZXRTZWxlY3RlZFZhbHVlID0gKHNuYXBzaG90KSA9PiB7XG4gIGNvbnN0IHNlbGVjdGlvbiA9IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uO1xuICBpZiAoIXNlbGVjdGlvbilcbiAgICByZXR1cm4gW107XG4gIGNvbnN0IHN0YXJ0UG9pbnQgPSBnZXRTZWxlY3Rpb25TdGFydFBvaW50JDEoc2VsZWN0aW9uKSwgZW5kUG9pbnQgPSBnZXRTZWxlY3Rpb25FbmRQb2ludChzZWxlY3Rpb24pLCBzdGFydEJsb2NrS2V5ID0gZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc3RhcnRQb2ludCksIGVuZEJsb2NrS2V5ID0gZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQoZW5kUG9pbnQpO1xuICBpZiAoIXN0YXJ0QmxvY2tLZXkgfHwgIWVuZEJsb2NrS2V5KVxuICAgIHJldHVybiBbXTtcbiAgY29uc3Qgc3RhcnRCbG9ja0luZGV4ID0gc25hcHNob3QuYmxvY2tJbmRleE1hcC5nZXQoc3RhcnRCbG9ja0tleSksIGVuZEJsb2NrSW5kZXggPSBzbmFwc2hvdC5ibG9ja0luZGV4TWFwLmdldChlbmRCbG9ja0tleSk7XG4gIGlmIChzdGFydEJsb2NrSW5kZXggPT09IHZvaWQgMCB8fCBlbmRCbG9ja0luZGV4ID09PSB2b2lkIDApXG4gICAgcmV0dXJuIFtdO1xuICBjb25zdCBzbGljZWRWYWx1ZSA9IHNuYXBzaG90LmNvbnRleHQudmFsdWUuc2xpY2Uoc3RhcnRCbG9ja0luZGV4LCBlbmRCbG9ja0luZGV4ICsgMSk7XG4gIHJldHVybiBzbGljZUJsb2Nrcyh7XG4gICAgY29udGV4dDogc25hcHNob3QuY29udGV4dCxcbiAgICBibG9ja3M6IHNsaWNlZFZhbHVlXG4gIH0pO1xufSwgZ2V0U2VsZWN0aW9uVGV4dCA9IChzbmFwc2hvdCkgPT4gZ2V0U2VsZWN0ZWRWYWx1ZShzbmFwc2hvdCkucmVkdWNlKCh0ZXh0LCBibG9jaykgPT4gaXNUZXh0QmxvY2soc25hcHNob3QuY29udGV4dCwgYmxvY2spID8gdGV4dCArIGJsb2NrLmNoaWxkcmVuLnJlZHVjZSgodGV4dDIsIGNoaWxkKSA9PiBpc1NwYW4oc25hcHNob3QuY29udGV4dCwgY2hpbGQpID8gdGV4dDIgKyBjaGlsZC50ZXh0IDogdGV4dDIsIFwiXCIpIDogdGV4dCwgXCJcIiksIGlzU2VsZWN0aW9uQ29sbGFwc2VkID0gKHNuYXBzaG90KSA9PiBzbmFwc2hvdC5jb250ZXh0LnNlbGVjdGlvbiA/IEpTT04uc3RyaW5naWZ5KHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uLmFuY2hvci5wYXRoKSA9PT0gSlNPTi5zdHJpbmdpZnkoc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24uZm9jdXMucGF0aCkgJiYgc25hcHNob3QuY29udGV4dC5zZWxlY3Rpb24/LmFuY2hvci5vZmZzZXQgPT09IHNuYXBzaG90LmNvbnRleHQuc2VsZWN0aW9uPy5mb2N1cy5vZmZzZXQgOiAhMSwgaXNTZWxlY3Rpb25FeHBhbmRlZCA9IChzbmFwc2hvdCkgPT4gIWlzU2VsZWN0aW9uQ29sbGFwc2VkKHNuYXBzaG90KTtcbmV4cG9ydCB7XG4gIGdldEZvY3VzQmxvY2ssXG4gIGdldEZvY3VzQ2hpbGQsXG4gIGdldEZvY3VzU3BhbixcbiAgZ2V0Rm9jdXNUZXh0QmxvY2ssXG4gIGdldFByZXZpb3VzSW5saW5lT2JqZWN0LFxuICBnZXRTZWxlY3RlZFZhbHVlLFxuICBnZXRTZWxlY3Rpb25TdGFydFBvaW50LFxuICBnZXRTZWxlY3Rpb25UZXh0LFxuICBpc1NlbGVjdGlvbkNvbGxhcHNlZCxcbiAgaXNTZWxlY3Rpb25FeHBhbmRlZFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdG9yLmlzLXNlbGVjdGlvbi1leHBhbmRlZC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorContext: () => (/* binding */ EditorContext),\n/* harmony export */   useEditor: () => (/* binding */ useEditor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/.pnpm/next@15.5.2_@babel+core@7.2_a4e656b99e842170c0a22eb76d21770b/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n\nfunction getGlobalScope() {\n  if (typeof globalThis < \"u\") return globalThis;\n  if (typeof window < \"u\") return window;\n  if (typeof self < \"u\") return self;\n  if (typeof global < \"u\") return global;\n  throw new Error(\"@portabletext/editor: could not locate global scope\");\n}\nconst globalScope = getGlobalScope();\nfunction createGloballyScopedContext(key, defaultValue) {\n  const symbol = Symbol.for(key);\n  return typeof document > \"u\" ? (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaultValue) : (globalScope[symbol] = globalScope[symbol] ?? (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(defaultValue), globalScope[symbol]);\n}\nconst EditorContext = createGloballyScopedContext(\"@portabletext/editor/context/editor\", null);\nfunction useEditor() {\n  const editor = react__WEBPACK_IMPORTED_MODULE_0__.useContext(EditorContext);\n  if (!editor)\n    throw new Error(\"No Editor set. Use EditorProvider to set one.\");\n  return editor;\n}\n\n//# sourceMappingURL=use-editor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3J0YWJsZXRleHQrZWRpdG9yQDEuNTguMF85ZmNmMWJhYTMwZjRhZTYzODZiNjM5NGEwNzRmZThkZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXNlLWVkaXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsb0RBQWEsK0RBQStELG9EQUFhO0FBQzFIO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw2Q0FBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyJEOlxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQHBvcnRhYmxldGV4dCtlZGl0b3JAMS41OC4wXzlmY2YxYmFhMzBmNGFlNjM4NmI2Mzk0YTA3NGZlOGRlXFxub2RlX21vZHVsZXNcXEBwb3J0YWJsZXRleHRcXGVkaXRvclxcbGliXFxfY2h1bmtzLWVzXFx1c2UtZWRpdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiBnZXRHbG9iYWxTY29wZSgpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzIDwgXCJ1XCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICBpZiAodHlwZW9mIHdpbmRvdyA8IFwidVwiKSByZXR1cm4gd2luZG93O1xuICBpZiAodHlwZW9mIHNlbGYgPCBcInVcIikgcmV0dXJuIHNlbGY7XG4gIGlmICh0eXBlb2YgZ2xvYmFsIDwgXCJ1XCIpIHJldHVybiBnbG9iYWw7XG4gIHRocm93IG5ldyBFcnJvcihcIkBwb3J0YWJsZXRleHQvZWRpdG9yOiBjb3VsZCBub3QgbG9jYXRlIGdsb2JhbCBzY29wZVwiKTtcbn1cbmNvbnN0IGdsb2JhbFNjb3BlID0gZ2V0R2xvYmFsU2NvcGUoKTtcbmZ1bmN0aW9uIGNyZWF0ZUdsb2JhbGx5U2NvcGVkQ29udGV4dChrZXksIGRlZmF1bHRWYWx1ZSkge1xuICBjb25zdCBzeW1ib2wgPSBTeW1ib2wuZm9yKGtleSk7XG4gIHJldHVybiB0eXBlb2YgZG9jdW1lbnQgPiBcInVcIiA/IGNyZWF0ZUNvbnRleHQoZGVmYXVsdFZhbHVlKSA6IChnbG9iYWxTY29wZVtzeW1ib2xdID0gZ2xvYmFsU2NvcGVbc3ltYm9sXSA/PyBjcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSksIGdsb2JhbFNjb3BlW3N5bWJvbF0pO1xufVxuY29uc3QgRWRpdG9yQ29udGV4dCA9IGNyZWF0ZUdsb2JhbGx5U2NvcGVkQ29udGV4dChcIkBwb3J0YWJsZXRleHQvZWRpdG9yL2NvbnRleHQvZWRpdG9yXCIsIG51bGwpO1xuZnVuY3Rpb24gdXNlRWRpdG9yKCkge1xuICBjb25zdCBlZGl0b3IgPSBSZWFjdC51c2VDb250ZXh0KEVkaXRvckNvbnRleHQpO1xuICBpZiAoIWVkaXRvcilcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBFZGl0b3Igc2V0LiBVc2UgRWRpdG9yUHJvdmlkZXIgdG8gc2V0IG9uZS5cIik7XG4gIHJldHVybiBlZGl0b3I7XG59XG5leHBvcnQge1xuICBFZGl0b3JDb250ZXh0LFxuICB1c2VFZGl0b3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtZWRpdG9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js ***!
  \*****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToBlockSelectionPoint: () => (/* binding */ blockOffsetToBlockSelectionPoint),\n/* harmony export */   blockOffsetToSelectionPoint: () => (/* binding */ blockOffsetToSelectionPoint),\n/* harmony export */   blockOffsetsToSelection: () => (/* binding */ blockOffsetsToSelection),\n/* harmony export */   childSelectionPointToBlockOffset: () => (/* binding */ childSelectionPointToBlockOffset)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n\nfunction blockOffsetToBlockSelectionPoint({\n  context,\n  blockOffset\n}) {\n  let selectionPoint;\n  for (const block of context.value)\n    if (block._key === blockOffset.path[0]._key) {\n      selectionPoint = {\n        path: [{\n          _key: block._key\n        }],\n        offset: blockOffset.offset\n      };\n      break;\n    }\n  return selectionPoint;\n}\nfunction blockOffsetToSelectionPoint({\n  context,\n  blockOffset,\n  direction\n}) {\n  return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.blockOffsetToSpanSelectionPoint)({\n    context,\n    blockOffset,\n    direction\n  }) || blockOffsetToBlockSelectionPoint({\n    context,\n    blockOffset\n  });\n}\nfunction blockOffsetsToSelection({\n  context,\n  offsets,\n  backward\n}) {\n  const anchor = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.anchor,\n    direction: backward ? \"backward\" : \"forward\"\n  }), focus = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.focus,\n    direction: backward ? \"forward\" : \"backward\"\n  });\n  return !anchor || !focus ? null : {\n    anchor,\n    focus,\n    backward\n  };\n}\nfunction childSelectionPointToBlockOffset({\n  context,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(selectionPoint), childKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(selectionPoint);\n  if (!(!blockKey || !childKey)) {\n    for (const block of context.value)\n      if (block._key === blockKey && (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block))\n        for (const child of block.children) {\n          if (child._key === childKey)\n            return {\n              path: [{\n                _key: block._key\n              }],\n              offset: offset + selectionPoint.offset\n            };\n          (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child) && (offset += child.text.length);\n        }\n  }\n}\n\n//# sourceMappingURL=util.child-selection-point-to-block-offset.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3J0YWJsZXRleHQrZWRpdG9yQDEuNTguMF85ZmNmMWJhYTMwZjRhZTYzODZiNjM5NGEwNzRmZThkZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5jaGlsZC1zZWxlY3Rpb24tcG9pbnQtdG8tYmxvY2stb2Zmc2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTRKO0FBQzVKO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsU0FBUyxzRkFBK0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsbUJBQW1CLG9GQUE2Qiw2QkFBNkIsb0ZBQTZCO0FBQzFHO0FBQ0E7QUFDQSxxQ0FBcUMsa0VBQVc7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsVUFBVSw2REFBTTtBQUNoQjtBQUNBO0FBQ0E7QUFNRTtBQUNGIiwic291cmNlcyI6WyJEOlxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQHBvcnRhYmxldGV4dCtlZGl0b3JAMS41OC4wXzlmY2YxYmFhMzBmNGFlNjM4NmI2Mzk0YTA3NGZlOGRlXFxub2RlX21vZHVsZXNcXEBwb3J0YWJsZXRleHRcXGVkaXRvclxcbGliXFxfY2h1bmtzLWVzXFx1dGlsLmNoaWxkLXNlbGVjdGlvbi1wb2ludC10by1ibG9jay1vZmZzZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmxvY2tPZmZzZXRUb1NwYW5TZWxlY3Rpb25Qb2ludCwgZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQsIGdldENoaWxkS2V5RnJvbVNlbGVjdGlvblBvaW50LCBpc1RleHRCbG9jaywgaXNTcGFuIH0gZnJvbSBcIi4vdXRpbC5zbGljZS1ibG9ja3MuanNcIjtcbmZ1bmN0aW9uIGJsb2NrT2Zmc2V0VG9CbG9ja1NlbGVjdGlvblBvaW50KHtcbiAgY29udGV4dCxcbiAgYmxvY2tPZmZzZXRcbn0pIHtcbiAgbGV0IHNlbGVjdGlvblBvaW50O1xuICBmb3IgKGNvbnN0IGJsb2NrIG9mIGNvbnRleHQudmFsdWUpXG4gICAgaWYgKGJsb2NrLl9rZXkgPT09IGJsb2NrT2Zmc2V0LnBhdGhbMF0uX2tleSkge1xuICAgICAgc2VsZWN0aW9uUG9pbnQgPSB7XG4gICAgICAgIHBhdGg6IFt7XG4gICAgICAgICAgX2tleTogYmxvY2suX2tleVxuICAgICAgICB9XSxcbiAgICAgICAgb2Zmc2V0OiBibG9ja09mZnNldC5vZmZzZXRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICB9XG4gIHJldHVybiBzZWxlY3Rpb25Qb2ludDtcbn1cbmZ1bmN0aW9uIGJsb2NrT2Zmc2V0VG9TZWxlY3Rpb25Qb2ludCh7XG4gIGNvbnRleHQsXG4gIGJsb2NrT2Zmc2V0LFxuICBkaXJlY3Rpb25cbn0pIHtcbiAgcmV0dXJuIGJsb2NrT2Zmc2V0VG9TcGFuU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2tPZmZzZXQsXG4gICAgZGlyZWN0aW9uXG4gIH0pIHx8IGJsb2NrT2Zmc2V0VG9CbG9ja1NlbGVjdGlvblBvaW50KHtcbiAgICBjb250ZXh0LFxuICAgIGJsb2NrT2Zmc2V0XG4gIH0pO1xufVxuZnVuY3Rpb24gYmxvY2tPZmZzZXRzVG9TZWxlY3Rpb24oe1xuICBjb250ZXh0LFxuICBvZmZzZXRzLFxuICBiYWNrd2FyZFxufSkge1xuICBjb25zdCBhbmNob3IgPSBibG9ja09mZnNldFRvU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2tPZmZzZXQ6IG9mZnNldHMuYW5jaG9yLFxuICAgIGRpcmVjdGlvbjogYmFja3dhcmQgPyBcImJhY2t3YXJkXCIgOiBcImZvcndhcmRcIlxuICB9KSwgZm9jdXMgPSBibG9ja09mZnNldFRvU2VsZWN0aW9uUG9pbnQoe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2tPZmZzZXQ6IG9mZnNldHMuZm9jdXMsXG4gICAgZGlyZWN0aW9uOiBiYWNrd2FyZCA/IFwiZm9yd2FyZFwiIDogXCJiYWNrd2FyZFwiXG4gIH0pO1xuICByZXR1cm4gIWFuY2hvciB8fCAhZm9jdXMgPyBudWxsIDoge1xuICAgIGFuY2hvcixcbiAgICBmb2N1cyxcbiAgICBiYWNrd2FyZFxuICB9O1xufVxuZnVuY3Rpb24gY2hpbGRTZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQoe1xuICBjb250ZXh0LFxuICBzZWxlY3Rpb25Qb2ludFxufSkge1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgY29uc3QgYmxvY2tLZXkgPSBnZXRCbG9ja0tleUZyb21TZWxlY3Rpb25Qb2ludChzZWxlY3Rpb25Qb2ludCksIGNoaWxkS2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc2VsZWN0aW9uUG9pbnQpO1xuICBpZiAoISghYmxvY2tLZXkgfHwgIWNoaWxkS2V5KSkge1xuICAgIGZvciAoY29uc3QgYmxvY2sgb2YgY29udGV4dC52YWx1ZSlcbiAgICAgIGlmIChibG9jay5fa2V5ID09PSBibG9ja0tleSAmJiBpc1RleHRCbG9jayhjb250ZXh0LCBibG9jaykpXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgYmxvY2suY2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoY2hpbGQuX2tleSA9PT0gY2hpbGRLZXkpXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBwYXRoOiBbe1xuICAgICAgICAgICAgICAgIF9rZXk6IGJsb2NrLl9rZXlcbiAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ICsgc2VsZWN0aW9uUG9pbnQub2Zmc2V0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIGlzU3Bhbihjb250ZXh0LCBjaGlsZCkgJiYgKG9mZnNldCArPSBjaGlsZC50ZXh0Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgfVxufVxuZXhwb3J0IHtcbiAgYmxvY2tPZmZzZXRUb0Jsb2NrU2VsZWN0aW9uUG9pbnQsXG4gIGJsb2NrT2Zmc2V0VG9TZWxlY3Rpb25Qb2ludCxcbiAgYmxvY2tPZmZzZXRzVG9TZWxlY3Rpb24sXG4gIGNoaWxkU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5jaGlsZC1zZWxlY3Rpb24tcG9pbnQtdG8tYmxvY2stb2Zmc2V0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlockEndPoint: () => (/* binding */ getBlockEndPoint),\n/* harmony export */   isEmptyTextBlock: () => (/* binding */ isEmptyTextBlock),\n/* harmony export */   isEqualSelectionPoints: () => (/* binding */ isEqualSelectionPoints),\n/* harmony export */   isSelectionCollapsed: () => (/* binding */ isSelectionCollapsed)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n\nfunction getBlockEndPoint({\n  context,\n  block\n}) {\n  if ((0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block.node)) {\n    const lastChild = block.node.children[block.node.children.length - 1];\n    if (lastChild)\n      return {\n        path: [...block.path, \"children\", {\n          _key: lastChild._key\n        }],\n        offset: (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, lastChild) ? lastChild.text.length : 0\n      };\n  }\n  return {\n    path: block.path,\n    offset: 0\n  };\n}\nfunction isEmptyTextBlock(context, block) {\n  if (!(0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTextBlock)(context, block))\n    return !1;\n  const onlyText = block.children.every((child) => (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child)), blockText = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getTextBlockText)(block);\n  return onlyText && blockText === \"\";\n}\nfunction isEqualSelectionPoints(a, b) {\n  return a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path);\n}\nfunction isSelectionCollapsed(selection) {\n  return selection ? JSON.stringify(selection.anchor.path) === JSON.stringify(selection.focus.path) && selection.anchor.offset === selection.focus.offset : !1;\n}\n\n//# sourceMappingURL=util.is-selection-collapsed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3J0YWJsZXRleHQrZWRpdG9yQDEuNTguMF85ZmNmMWJhYTMwZjRhZTYzODZiNjM5NGEwNzRmZThkZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5pcy1zZWxlY3Rpb24tY29sbGFwc2VkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQStFO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxNQUFNLGtFQUFXO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsZ0JBQWdCLDZEQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLGtFQUFXO0FBQ2xCO0FBQ0EsbURBQW1ELDZEQUFNLCtCQUErQix1RUFBZ0I7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1FO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAcG9ydGFibGV0ZXh0K2VkaXRvckAxLjU4LjBfOWZjZjFiYWEzMGY0YWU2Mzg2YjYzOTRhMDc0ZmU4ZGVcXG5vZGVfbW9kdWxlc1xcQHBvcnRhYmxldGV4dFxcZWRpdG9yXFxsaWJcXF9jaHVua3MtZXNcXHV0aWwuaXMtc2VsZWN0aW9uLWNvbGxhcHNlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1RleHRCbG9jaywgaXNTcGFuLCBnZXRUZXh0QmxvY2tUZXh0IH0gZnJvbSBcIi4vdXRpbC5zbGljZS1ibG9ja3MuanNcIjtcbmZ1bmN0aW9uIGdldEJsb2NrRW5kUG9pbnQoe1xuICBjb250ZXh0LFxuICBibG9ja1xufSkge1xuICBpZiAoaXNUZXh0QmxvY2soY29udGV4dCwgYmxvY2subm9kZSkpIHtcbiAgICBjb25zdCBsYXN0Q2hpbGQgPSBibG9jay5ub2RlLmNoaWxkcmVuW2Jsb2NrLm5vZGUuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgaWYgKGxhc3RDaGlsZClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGg6IFsuLi5ibG9jay5wYXRoLCBcImNoaWxkcmVuXCIsIHtcbiAgICAgICAgICBfa2V5OiBsYXN0Q2hpbGQuX2tleVxuICAgICAgICB9XSxcbiAgICAgICAgb2Zmc2V0OiBpc1NwYW4oY29udGV4dCwgbGFzdENoaWxkKSA/IGxhc3RDaGlsZC50ZXh0Lmxlbmd0aCA6IDBcbiAgICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBibG9jay5wYXRoLFxuICAgIG9mZnNldDogMFxuICB9O1xufVxuZnVuY3Rpb24gaXNFbXB0eVRleHRCbG9jayhjb250ZXh0LCBibG9jaykge1xuICBpZiAoIWlzVGV4dEJsb2NrKGNvbnRleHQsIGJsb2NrKSlcbiAgICByZXR1cm4gITE7XG4gIGNvbnN0IG9ubHlUZXh0ID0gYmxvY2suY2hpbGRyZW4uZXZlcnkoKGNoaWxkKSA9PiBpc1NwYW4oY29udGV4dCwgY2hpbGQpKSwgYmxvY2tUZXh0ID0gZ2V0VGV4dEJsb2NrVGV4dChibG9jayk7XG4gIHJldHVybiBvbmx5VGV4dCAmJiBibG9ja1RleHQgPT09IFwiXCI7XG59XG5mdW5jdGlvbiBpc0VxdWFsU2VsZWN0aW9uUG9pbnRzKGEsIGIpIHtcbiAgcmV0dXJuIGEub2Zmc2V0ID09PSBiLm9mZnNldCAmJiBKU09OLnN0cmluZ2lmeShhLnBhdGgpID09PSBKU09OLnN0cmluZ2lmeShiLnBhdGgpO1xufVxuZnVuY3Rpb24gaXNTZWxlY3Rpb25Db2xsYXBzZWQoc2VsZWN0aW9uKSB7XG4gIHJldHVybiBzZWxlY3Rpb24gPyBKU09OLnN0cmluZ2lmeShzZWxlY3Rpb24uYW5jaG9yLnBhdGgpID09PSBKU09OLnN0cmluZ2lmeShzZWxlY3Rpb24uZm9jdXMucGF0aCkgJiYgc2VsZWN0aW9uLmFuY2hvci5vZmZzZXQgPT09IHNlbGVjdGlvbi5mb2N1cy5vZmZzZXQgOiAhMTtcbn1cbmV4cG9ydCB7XG4gIGdldEJsb2NrRW5kUG9pbnQsXG4gIGlzRW1wdHlUZXh0QmxvY2ssXG4gIGlzRXF1YWxTZWxlY3Rpb25Qb2ludHMsXG4gIGlzU2VsZWN0aW9uQ29sbGFwc2VkXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5pcy1zZWxlY3Rpb24tY29sbGFwc2VkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTextBlock: () => (/* binding */ isTextBlock),\n/* harmony export */   mergeTextBlocks: () => (/* binding */ mergeTextBlocks)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n\nfunction isTextBlock(context, block) {\n  return (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isTypedObject)(block) && block._type === context.schema.block.name;\n}\nfunction mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock\n}) {\n  const parsedIncomingBlock = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.parseBlock)({\n    context,\n    block: incomingBlock,\n    options: {\n      refreshKeys: !0,\n      validateFields: !0\n    }\n  });\n  return !parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock) ? targetBlock : {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [...targetBlock.markDefs ?? [], ...parsedIncomingBlock.markDefs ?? []]\n  };\n}\n\n//# sourceMappingURL=util.merge-text-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3J0YWJsZXRleHQrZWRpdG9yQDEuNTguMF85ZmNmMWJhYTMwZjRhZTYzODZiNjM5NGEwNzRmZThkZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5tZXJnZS10ZXh0LWJsb2Nrcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUU7QUFDbkU7QUFDQSxTQUFTLG9FQUFhO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOEJBQThCLGlFQUFVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyJEOlxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQHBvcnRhYmxldGV4dCtlZGl0b3JAMS41OC4wXzlmY2YxYmFhMzBmNGFlNjM4NmI2Mzk0YTA3NGZlOGRlXFxub2RlX21vZHVsZXNcXEBwb3J0YWJsZXRleHRcXGVkaXRvclxcbGliXFxfY2h1bmtzLWVzXFx1dGlsLm1lcmdlLXRleHQtYmxvY2tzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzVHlwZWRPYmplY3QsIHBhcnNlQmxvY2sgfSBmcm9tIFwiLi91dGlsLnNsaWNlLWJsb2Nrcy5qc1wiO1xuZnVuY3Rpb24gaXNUZXh0QmxvY2soY29udGV4dCwgYmxvY2spIHtcbiAgcmV0dXJuIGlzVHlwZWRPYmplY3QoYmxvY2spICYmIGJsb2NrLl90eXBlID09PSBjb250ZXh0LnNjaGVtYS5ibG9jay5uYW1lO1xufVxuZnVuY3Rpb24gbWVyZ2VUZXh0QmxvY2tzKHtcbiAgY29udGV4dCxcbiAgdGFyZ2V0QmxvY2ssXG4gIGluY29taW5nQmxvY2tcbn0pIHtcbiAgY29uc3QgcGFyc2VkSW5jb21pbmdCbG9jayA9IHBhcnNlQmxvY2soe1xuICAgIGNvbnRleHQsXG4gICAgYmxvY2s6IGluY29taW5nQmxvY2ssXG4gICAgb3B0aW9uczoge1xuICAgICAgcmVmcmVzaEtleXM6ICEwLFxuICAgICAgdmFsaWRhdGVGaWVsZHM6ICEwXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuICFwYXJzZWRJbmNvbWluZ0Jsb2NrIHx8ICFpc1RleHRCbG9jayhjb250ZXh0LCBwYXJzZWRJbmNvbWluZ0Jsb2NrKSA/IHRhcmdldEJsb2NrIDoge1xuICAgIC4uLnRhcmdldEJsb2NrLFxuICAgIGNoaWxkcmVuOiBbLi4udGFyZ2V0QmxvY2suY2hpbGRyZW4sIC4uLnBhcnNlZEluY29taW5nQmxvY2suY2hpbGRyZW5dLFxuICAgIG1hcmtEZWZzOiBbLi4udGFyZ2V0QmxvY2subWFya0RlZnMgPz8gW10sIC4uLnBhcnNlZEluY29taW5nQmxvY2subWFya0RlZnMgPz8gW11dXG4gIH07XG59XG5leHBvcnQge1xuICBpc1RleHRCbG9jayxcbiAgbWVyZ2VUZXh0QmxvY2tzXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5tZXJnZS10ZXh0LWJsb2Nrcy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blockOffsetToSpanSelectionPoint: () => (/* binding */ blockOffsetToSpanSelectionPoint),\n/* harmony export */   getBlockKeyFromSelectionPoint: () => (/* binding */ getBlockKeyFromSelectionPoint),\n/* harmony export */   getBlockStartPoint: () => (/* binding */ getBlockStartPoint),\n/* harmony export */   getChildKeyFromSelectionPoint: () => (/* binding */ getChildKeyFromSelectionPoint),\n/* harmony export */   getSelectionEndPoint: () => (/* binding */ getSelectionEndPoint),\n/* harmony export */   getSelectionStartPoint: () => (/* binding */ getSelectionStartPoint),\n/* harmony export */   getTextBlockText: () => (/* binding */ getTextBlockText),\n/* harmony export */   isKeyedSegment: () => (/* binding */ isKeyedSegment),\n/* harmony export */   isListBlock: () => (/* binding */ isListBlock),\n/* harmony export */   isSpan: () => (/* binding */ isSpan$1),\n/* harmony export */   isSpan$1: () => (/* binding */ isSpan),\n/* harmony export */   isTextBlock: () => (/* binding */ isTextBlock),\n/* harmony export */   isTypedObject: () => (/* binding */ isTypedObject),\n/* harmony export */   parseAnnotation: () => (/* binding */ parseAnnotation),\n/* harmony export */   parseBlock: () => (/* binding */ parseBlock),\n/* harmony export */   parseBlocks: () => (/* binding */ parseBlocks),\n/* harmony export */   parseInlineObject: () => (/* binding */ parseInlineObject),\n/* harmony export */   sliceBlocks: () => (/* binding */ sliceBlocks),\n/* harmony export */   spanSelectionPointToBlockOffset: () => (/* binding */ spanSelectionPointToBlockOffset)\n/* harmony export */ });\nfunction isKeyedSegment(segment) {\n  return typeof segment == \"object\" && segment !== null && \"_key\" in segment;\n}\nfunction getBlockKeyFromSelectionPoint(point) {\n  const blockPathSegment = point.path.at(0);\n  if (isKeyedSegment(blockPathSegment))\n    return blockPathSegment._key;\n}\nfunction getChildKeyFromSelectionPoint(point) {\n  const childPathSegment = point.path.at(2);\n  if (isKeyedSegment(childPathSegment))\n    return childPathSegment._key;\n}\nfunction isTypedObject(object) {\n  return isRecord(object) && typeof object._type == \"string\";\n}\nfunction isRecord(value) {\n  return !!value && (typeof value == \"object\" || typeof value == \"function\");\n}\nfunction parseBlocks({\n  context,\n  blocks,\n  options\n}) {\n  return Array.isArray(blocks) ? blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({\n      context,\n      block,\n      options\n    });\n    return parsedBlock ? [parsedBlock] : [];\n  }) : [];\n}\nfunction parseBlock({\n  context,\n  block,\n  options\n}) {\n  return parseTextBlock({\n    block,\n    context,\n    options\n  }) ?? parseBlockObject({\n    blockObject: block,\n    context,\n    options\n  });\n}\nfunction parseBlockObject({\n  blockObject,\n  context,\n  options\n}) {\n  if (!isTypedObject(blockObject))\n    return;\n  const schemaType = context.schema.blockObjects.find(({\n    name\n  }) => name === blockObject._type);\n  if (schemaType)\n    return parseObject({\n      object: blockObject,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction isListBlock(context, block) {\n  return isTextBlock(context, block) && block.level !== void 0 && block.listItem !== void 0;\n}\nfunction isTextBlock(context, block) {\n  return !(!isTypedObject(block) || block._type !== context.schema.block.name || !Array.isArray(block.children));\n}\nfunction parseTextBlock({\n  block,\n  context,\n  options\n}) {\n  if (!isTypedObject(block))\n    return;\n  const customFields = {};\n  for (const key of Object.keys(block))\n    key !== \"_type\" && key !== \"_key\" && key !== \"children\" && key !== \"markDefs\" && key !== \"style\" && key !== \"listItem\" && key !== \"level\" && (customFields[key] = block[key]);\n  if (block._type !== context.schema.block.name)\n    return;\n  const _key = options.refreshKeys ? context.keyGenerator() : typeof block._key == \"string\" ? block._key : context.keyGenerator(), unparsedMarkDefs = Array.isArray(block.markDefs) ? block.markDefs : [], markDefKeyMap = /* @__PURE__ */ new Map(), markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef))\n      return [];\n    const schemaType = context.schema.annotations.find(({\n      name\n    }) => name === markDef._type);\n    if (!schemaType)\n      return [];\n    if (typeof markDef._key != \"string\")\n      return [];\n    const parsedAnnotation = parseObject({\n      object: markDef,\n      context: {\n        schemaType,\n        keyGenerator: context.keyGenerator\n      },\n      options\n    });\n    return parsedAnnotation ? (markDefKeyMap.set(markDef._key, parsedAnnotation._key), [parsedAnnotation]) : [];\n  }), children = (Array.isArray(block.children) ? block.children : []).map((child) => parseSpan({\n    span: child,\n    context,\n    markDefKeyMap,\n    options\n  }) ?? parseInlineObject({\n    inlineObject: child,\n    context,\n    options\n  })).filter((child) => child !== void 0), parsedBlock = {\n    _type: context.schema.block.name,\n    _key,\n    children: children.length > 0 ? children : [{\n      _key: context.keyGenerator(),\n      _type: context.schema.span.name,\n      text: \"\",\n      marks: []\n    }],\n    markDefs,\n    ...options.validateFields ? {} : customFields\n  };\n  if (typeof block.style == \"string\" && context.schema.styles.find((style) => style.name === block.style))\n    parsedBlock.style = block.style;\n  else {\n    const defaultStyle = context.schema.styles.at(0)?.name;\n    defaultStyle !== void 0 ? parsedBlock.style = defaultStyle : console.error(\"Expected default style\");\n  }\n  return typeof block.listItem == \"string\" && context.schema.lists.find((list) => list.name === block.listItem) && (parsedBlock.listItem = block.listItem), typeof block.level == \"number\" && (parsedBlock.level = block.level), parsedBlock;\n}\nfunction isSpan$1(context, child) {\n  return !(!isTypedObject(child) || child._type !== context.schema.span.name || typeof child.text != \"string\");\n}\nfunction parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options\n}) {\n  if (!isTypedObject(span))\n    return;\n  const customFields = {};\n  for (const key of Object.keys(span))\n    key !== \"_type\" && key !== \"_key\" && key !== \"text\" && key !== \"marks\" && (customFields[key] = span[key]);\n  if (span._type !== context.schema.span.name || span._type !== \"span\")\n    return;\n  const marks = (Array.isArray(span.marks) ? span.marks : []).flatMap((mark) => {\n    if (typeof mark != \"string\")\n      return [];\n    const markDefKey = markDefKeyMap.get(mark);\n    return markDefKey !== void 0 ? [markDefKey] : context.schema.decorators.some((decorator) => decorator.name === mark) ? [mark] : [];\n  });\n  return {\n    _type: \"span\",\n    _key: options.refreshKeys ? context.keyGenerator() : typeof span._key == \"string\" ? span._key : context.keyGenerator(),\n    text: typeof span.text == \"string\" ? span.text : \"\",\n    marks,\n    ...options.validateFields ? {} : customFields\n  };\n}\nfunction parseInlineObject({\n  inlineObject,\n  context,\n  options\n}) {\n  if (!isTypedObject(inlineObject))\n    return;\n  const schemaType = context.schema.inlineObjects.find(({\n    name\n  }) => name === inlineObject._type);\n  if (schemaType)\n    return parseObject({\n      object: inlineObject,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction parseAnnotation({\n  annotation,\n  context,\n  options\n}) {\n  if (!isTypedObject(annotation))\n    return;\n  const schemaType = context.schema.annotations.find(({\n    name\n  }) => name === annotation._type);\n  if (schemaType)\n    return parseObject({\n      object: annotation,\n      context: {\n        keyGenerator: context.keyGenerator,\n        schemaType\n      },\n      options\n    });\n}\nfunction parseObject({\n  object,\n  context,\n  options\n}) {\n  const {\n    _type,\n    _key,\n    ...customFields\n  } = object, values = options.validateFields ? context.schemaType.fields.reduce((fieldValues, field) => {\n    const fieldValue = object[field.name];\n    return fieldValue !== void 0 && (fieldValues[field.name] = fieldValue), fieldValues;\n  }, {}) : customFields;\n  return {\n    _type: context.schemaType.name,\n    _key: options.refreshKeys ? context.keyGenerator() : typeof object._key == \"string\" ? object._key : context.keyGenerator(),\n    ...values\n  };\n}\nfunction blockOffsetToSpanSelectionPoint({\n  context,\n  blockOffset,\n  direction\n}) {\n  let offsetLeft = blockOffset.offset, selectionPoint, skippedInlineObject = !1;\n  for (const block of context.value)\n    if (block._key === blockOffset.path[0]._key && isTextBlock(context, block))\n      for (const child of block.children) {\n        if (direction === \"forward\") {\n          if (!isSpan$1(context, child))\n            continue;\n          if (offsetLeft <= child.text.length) {\n            selectionPoint = {\n              path: [...blockOffset.path, \"children\", {\n                _key: child._key\n              }],\n              offset: offsetLeft\n            };\n            break;\n          }\n          offsetLeft -= child.text.length;\n          continue;\n        }\n        if (!isSpan$1(context, child)) {\n          skippedInlineObject = !0;\n          continue;\n        }\n        if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n          skippedInlineObject && (selectionPoint = {\n            path: [...blockOffset.path, \"children\", {\n              _key: child._key\n            }],\n            offset: 0\n          });\n          break;\n        }\n        if (offsetLeft > child.text.length) {\n          offsetLeft -= child.text.length;\n          continue;\n        }\n        if (offsetLeft <= child.text.length && (selectionPoint = {\n          path: [...blockOffset.path, \"children\", {\n            _key: child._key\n          }],\n          offset: offsetLeft\n        }, offsetLeft -= child.text.length, offsetLeft !== 0))\n          break;\n      }\n  return selectionPoint;\n}\nfunction spanSelectionPointToBlockOffset({\n  context,\n  selectionPoint\n}) {\n  let offset = 0;\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint), spanKey = getChildKeyFromSelectionPoint(selectionPoint);\n  if (!(!blockKey || !spanKey)) {\n    for (const block of context.value)\n      if (block._key === blockKey && isTextBlock(context, block)) {\n        for (const child of block.children)\n          if (isSpan$1(context, child)) {\n            if (child._key === spanKey)\n              return {\n                path: [{\n                  _key: block._key\n                }],\n                offset: offset + selectionPoint.offset\n              };\n            offset += child.text.length;\n          }\n      }\n  }\n}\nfunction getBlockStartPoint({\n  context,\n  block\n}) {\n  return isTextBlock(context, block.node) ? {\n    path: [...block.path, \"children\", {\n      _key: block.node.children[0]._key\n    }],\n    offset: 0\n  } : {\n    path: block.path,\n    offset: 0\n  };\n}\nfunction getSelectionEndPoint(selection) {\n  return selection ? selection.backward ? selection.anchor : selection.focus : null;\n}\nfunction getSelectionStartPoint(selection) {\n  return selection ? selection.backward ? selection.focus : selection.anchor : null;\n}\nfunction getTextBlockText(block) {\n  return block.children.map((child) => child.text ?? \"\").join(\"\");\n}\nfunction isSpan(context, child) {\n  return child._type === context.schema.span.name;\n}\nfunction sliceBlocks({\n  context,\n  blocks\n}) {\n  const slice = [];\n  if (!context.selection)\n    return slice;\n  let startBlock;\n  const middleBlocks = [];\n  let endBlock;\n  const startPoint = getSelectionStartPoint(context.selection), endPoint = getSelectionEndPoint(context.selection), startBlockKey = getBlockKeyFromSelectionPoint(startPoint), startChildKey = getChildKeyFromSelectionPoint(startPoint), endBlockKey = getBlockKeyFromSelectionPoint(endPoint), endChildKey = getChildKeyFromSelectionPoint(endPoint);\n  if (!startBlockKey || !endBlockKey)\n    return slice;\n  for (const block of blocks) {\n    if (!isTextBlock(context, block) && block._key === startBlockKey && block._key === endBlockKey) {\n      startBlock = block;\n      break;\n    }\n    if (block._key === startBlockKey) {\n      if (!isTextBlock(context, block)) {\n        startBlock = block;\n        continue;\n      }\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if (isSpan$1(context, child)) {\n              const text = child._key === endChildKey ? child.text.slice(startPoint.offset, endPoint.offset) : child.text.slice(startPoint.offset);\n              startBlock = {\n                ...block,\n                children: [{\n                  ...child,\n                  text\n                }]\n              };\n            } else\n              startBlock = {\n                ...block,\n                children: [child]\n              };\n            if (startChildKey === endChildKey)\n              break;\n            continue;\n          }\n          if (startBlock && isTextBlock(context, startBlock) && (endChildKey && child._key === endChildKey && isSpan$1(context, child) ? startBlock.children.push({\n            ...child,\n            text: child.text.slice(0, endPoint.offset)\n          }) : startBlock.children.push(child), block._key === endBlockKey && endChildKey && child._key === endChildKey))\n            break;\n        }\n        if (startBlockKey === endBlockKey)\n          break;\n        continue;\n      }\n      if (startBlock = block, startBlockKey === endBlockKey)\n        break;\n    }\n    if (block._key === endBlockKey) {\n      if (!isTextBlock(context, block)) {\n        endBlock = block;\n        break;\n      }\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: []\n        };\n        for (const child of block.children)\n          if (endBlock && isTextBlock(context, endBlock)) {\n            if (child._key === endChildKey && isSpan$1(context, child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset)\n              });\n              break;\n            }\n            if (endBlock.children.push(child), endChildKey && child._key === endChildKey)\n              break;\n          }\n        break;\n      }\n      endBlock = block;\n      break;\n    }\n    startBlock && middleBlocks.push(block);\n  }\n  return [...startBlock ? [startBlock] : [], ...middleBlocks, ...endBlock ? [endBlock] : []];\n}\n\n//# sourceMappingURL=util.slice-blocks.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectionPointToBlockOffset: () => (/* binding */ selectionPointToBlockOffset),\n/* harmony export */   sliceTextBlock: () => (/* binding */ sliceTextBlock)\n/* harmony export */ });\n/* harmony import */ var _util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.slice-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.child-selection-point-to-block-offset.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\");\n\n\nfunction selectionPointToBlockOffset({\n  context,\n  selectionPoint\n}) {\n  const blockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(selectionPoint);\n  return selectionPoint.path.length === 1 && blockKey !== void 0 ? {\n    path: [{\n      _key: blockKey\n    }],\n    offset: selectionPoint.offset\n  } : (0,_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_1__.childSelectionPointToBlockOffset)({\n    context,\n    selectionPoint\n  });\n}\nfunction sliceTextBlock({\n  context,\n  block\n}) {\n  const startPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionStartPoint)(context.selection), endPoint = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getSelectionEndPoint)(context.selection);\n  if (!startPoint || !endPoint)\n    return block;\n  const startBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(startPoint), endBlockKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getBlockKeyFromSelectionPoint)(endPoint);\n  if (startBlockKey !== endBlockKey || startBlockKey !== block._key)\n    return block;\n  const startChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(startPoint), endChildKey = (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.getChildKeyFromSelectionPoint)(endPoint);\n  if (!startChildKey || !endChildKey)\n    return block;\n  let startChildFound = !1;\n  const children = [];\n  for (const child of block.children) {\n    if (child._key === startChildKey) {\n      if (startChildFound = !0, (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child)) {\n        const text = child._key === endChildKey ? child.text.slice(startPoint.offset, endPoint.offset) : child.text.slice(startPoint.offset);\n        children.push({\n          ...child,\n          text\n        });\n      } else\n        children.push(child);\n      if (startChildKey === endChildKey)\n        break;\n      continue;\n    }\n    if (child._key === endChildKey) {\n      (0,_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_0__.isSpan)(context, child) ? children.push({\n        ...child,\n        text: child.text.slice(0, endPoint.offset)\n      }) : children.push(child);\n      break;\n    }\n    startChildFound && children.push(child);\n  }\n  return {\n    ...block,\n    children\n  };\n}\n\n//# sourceMappingURL=util.slice-text-block.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3J0YWJsZXRleHQrZWRpdG9yQDEuNTguMF85ZmNmMWJhYTMwZjRhZTYzODZiNjM5NGEwNzRmZThkZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL19jaHVua3MtZXMvdXRpbC5zbGljZS10ZXh0LWJsb2NrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBNEo7QUFDekQ7QUFDbkc7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1CQUFtQixvRkFBNkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSSxFQUFFLGdIQUFnQztBQUN0QztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHFCQUFxQiw2RUFBc0IsZ0NBQWdDLDJFQUFvQjtBQUMvRjtBQUNBO0FBQ0Esd0JBQXdCLG9GQUE2Qiw0QkFBNEIsb0ZBQTZCO0FBQzlHO0FBQ0E7QUFDQSx3QkFBd0Isb0ZBQTZCLDRCQUE0QixvRkFBNkI7QUFDOUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDZEQUFNO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLDZEQUFNO0FBQ1o7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJRTtBQUNGIiwic291cmNlcyI6WyJEOlxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQHBvcnRhYmxldGV4dCtlZGl0b3JAMS41OC4wXzlmY2YxYmFhMzBmNGFlNjM4NmI2Mzk0YTA3NGZlOGRlXFxub2RlX21vZHVsZXNcXEBwb3J0YWJsZXRleHRcXGVkaXRvclxcbGliXFxfY2h1bmtzLWVzXFx1dGlsLnNsaWNlLXRleHQtYmxvY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QmxvY2tLZXlGcm9tU2VsZWN0aW9uUG9pbnQsIGdldENoaWxkS2V5RnJvbVNlbGVjdGlvblBvaW50LCBpc1NwYW4sIGdldFNlbGVjdGlvblN0YXJ0UG9pbnQsIGdldFNlbGVjdGlvbkVuZFBvaW50IH0gZnJvbSBcIi4vdXRpbC5zbGljZS1ibG9ja3MuanNcIjtcbmltcG9ydCB7IGNoaWxkU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0IH0gZnJvbSBcIi4vdXRpbC5jaGlsZC1zZWxlY3Rpb24tcG9pbnQtdG8tYmxvY2stb2Zmc2V0LmpzXCI7XG5mdW5jdGlvbiBzZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQoe1xuICBjb250ZXh0LFxuICBzZWxlY3Rpb25Qb2ludFxufSkge1xuICBjb25zdCBibG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KHNlbGVjdGlvblBvaW50KTtcbiAgcmV0dXJuIHNlbGVjdGlvblBvaW50LnBhdGgubGVuZ3RoID09PSAxICYmIGJsb2NrS2V5ICE9PSB2b2lkIDAgPyB7XG4gICAgcGF0aDogW3tcbiAgICAgIF9rZXk6IGJsb2NrS2V5XG4gICAgfV0sXG4gICAgb2Zmc2V0OiBzZWxlY3Rpb25Qb2ludC5vZmZzZXRcbiAgfSA6IGNoaWxkU2VsZWN0aW9uUG9pbnRUb0Jsb2NrT2Zmc2V0KHtcbiAgICBjb250ZXh0LFxuICAgIHNlbGVjdGlvblBvaW50XG4gIH0pO1xufVxuZnVuY3Rpb24gc2xpY2VUZXh0QmxvY2soe1xuICBjb250ZXh0LFxuICBibG9ja1xufSkge1xuICBjb25zdCBzdGFydFBvaW50ID0gZ2V0U2VsZWN0aW9uU3RhcnRQb2ludChjb250ZXh0LnNlbGVjdGlvbiksIGVuZFBvaW50ID0gZ2V0U2VsZWN0aW9uRW5kUG9pbnQoY29udGV4dC5zZWxlY3Rpb24pO1xuICBpZiAoIXN0YXJ0UG9pbnQgfHwgIWVuZFBvaW50KVxuICAgIHJldHVybiBibG9jaztcbiAgY29uc3Qgc3RhcnRCbG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KHN0YXJ0UG9pbnQpLCBlbmRCbG9ja0tleSA9IGdldEJsb2NrS2V5RnJvbVNlbGVjdGlvblBvaW50KGVuZFBvaW50KTtcbiAgaWYgKHN0YXJ0QmxvY2tLZXkgIT09IGVuZEJsb2NrS2V5IHx8IHN0YXJ0QmxvY2tLZXkgIT09IGJsb2NrLl9rZXkpXG4gICAgcmV0dXJuIGJsb2NrO1xuICBjb25zdCBzdGFydENoaWxkS2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoc3RhcnRQb2ludCksIGVuZENoaWxkS2V5ID0gZ2V0Q2hpbGRLZXlGcm9tU2VsZWN0aW9uUG9pbnQoZW5kUG9pbnQpO1xuICBpZiAoIXN0YXJ0Q2hpbGRLZXkgfHwgIWVuZENoaWxkS2V5KVxuICAgIHJldHVybiBibG9jaztcbiAgbGV0IHN0YXJ0Q2hpbGRGb3VuZCA9ICExO1xuICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICBmb3IgKGNvbnN0IGNoaWxkIG9mIGJsb2NrLmNoaWxkcmVuKSB7XG4gICAgaWYgKGNoaWxkLl9rZXkgPT09IHN0YXJ0Q2hpbGRLZXkpIHtcbiAgICAgIGlmIChzdGFydENoaWxkRm91bmQgPSAhMCwgaXNTcGFuKGNvbnRleHQsIGNoaWxkKSkge1xuICAgICAgICBjb25zdCB0ZXh0ID0gY2hpbGQuX2tleSA9PT0gZW5kQ2hpbGRLZXkgPyBjaGlsZC50ZXh0LnNsaWNlKHN0YXJ0UG9pbnQub2Zmc2V0LCBlbmRQb2ludC5vZmZzZXQpIDogY2hpbGQudGV4dC5zbGljZShzdGFydFBvaW50Lm9mZnNldCk7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgIC4uLmNoaWxkLFxuICAgICAgICAgIHRleHRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICBpZiAoc3RhcnRDaGlsZEtleSA9PT0gZW5kQ2hpbGRLZXkpXG4gICAgICAgIGJyZWFrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjaGlsZC5fa2V5ID09PSBlbmRDaGlsZEtleSkge1xuICAgICAgaXNTcGFuKGNvbnRleHQsIGNoaWxkKSA/IGNoaWxkcmVuLnB1c2goe1xuICAgICAgICAuLi5jaGlsZCxcbiAgICAgICAgdGV4dDogY2hpbGQudGV4dC5zbGljZSgwLCBlbmRQb2ludC5vZmZzZXQpXG4gICAgICB9KSA6IGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHN0YXJ0Q2hpbGRGb3VuZCAmJiBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLmJsb2NrLFxuICAgIGNoaWxkcmVuXG4gIH07XG59XG5leHBvcnQge1xuICBzZWxlY3Rpb25Qb2ludFRvQmxvY2tPZmZzZXQsXG4gIHNsaWNlVGV4dEJsb2NrXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5zbGljZS10ZXh0LWJsb2NrLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/behaviors/index.js":
/*!***************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/behaviors/index.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineBehavior: () => (/* binding */ defineBehavior),\n/* harmony export */   effect: () => (/* binding */ effect),\n/* harmony export */   execute: () => (/* binding */ execute),\n/* harmony export */   forward: () => (/* binding */ forward),\n/* harmony export */   raise: () => (/* binding */ raise)\n/* harmony export */ });\nfunction execute(event) {\n  return {\n    type: \"execute\",\n    event\n  };\n}\nfunction forward(event) {\n  return {\n    type: \"forward\",\n    event\n  };\n}\nfunction raise(event) {\n  return {\n    type: \"raise\",\n    event\n  };\n}\nfunction effect(effect2) {\n  return {\n    type: \"effect\",\n    effect: effect2\n  };\n}\nfunction defineBehavior(behavior) {\n  return behavior;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Bwb3J0YWJsZXRleHQrZWRpdG9yQDEuNTguMF85ZmNmMWJhYTMwZjRhZTYzODZiNjM5NGEwNzRmZThkZS9ub2RlX21vZHVsZXMvQHBvcnRhYmxldGV4dC9lZGl0b3IvbGliL2JlaGF2aW9ycy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9FO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAcG9ydGFibGV0ZXh0K2VkaXRvckAxLjU4LjBfOWZjZjFiYWEzMGY0YWU2Mzg2YjYzOTRhMDc0ZmU4ZGVcXG5vZGVfbW9kdWxlc1xcQHBvcnRhYmxldGV4dFxcZWRpdG9yXFxsaWJcXGJlaGF2aW9yc1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZXhlY3V0ZShldmVudCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiZXhlY3V0ZVwiLFxuICAgIGV2ZW50XG4gIH07XG59XG5mdW5jdGlvbiBmb3J3YXJkKGV2ZW50KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJmb3J3YXJkXCIsXG4gICAgZXZlbnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHJhaXNlKGV2ZW50KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJyYWlzZVwiLFxuICAgIGV2ZW50XG4gIH07XG59XG5mdW5jdGlvbiBlZmZlY3QoZWZmZWN0Mikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiZWZmZWN0XCIsXG4gICAgZWZmZWN0OiBlZmZlY3QyXG4gIH07XG59XG5mdW5jdGlvbiBkZWZpbmVCZWhhdmlvcihiZWhhdmlvcikge1xuICByZXR1cm4gYmVoYXZpb3I7XG59XG5leHBvcnQge1xuICBkZWZpbmVCZWhhdmlvcixcbiAgZWZmZWN0LFxuICBleGVjdXRlLFxuICBmb3J3YXJkLFxuICByYWlzZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/behaviors/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/index.js":
/*!*****************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/index.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EditorEventListener: () => (/* binding */ EditorEventListener),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   PortableTextEditable: () => (/* binding */ PortableTextEditable),\n/* harmony export */   PortableTextEditor: () => (/* binding */ PortableTextEditor),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   keyGenerator: () => (/* binding */ defaultKeyGenerator),\n/* harmony export */   useEditor: () => (/* reexport safe */ _chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_14__.useEditor),\n/* harmony export */   useEditorSelector: () => (/* binding */ useEditorSelector),\n/* harmony export */   usePortableTextEditor: () => (/* binding */ usePortableTextEditor),\n/* harmony export */   usePortableTextEditorSelection: () => (/* binding */ usePortableTextEditorSelection)\n/* harmony export */ });\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/../node_modules/.pnpm/react-compiler-runtime@19.1.0-rc.2_react@18.3.1/node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/.pnpm/next@15.5.2_@babel+core@7.2_a4e656b99e842170c0a22eb76d21770b/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var use_effect_event__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! use-effect-event */ \"(ssr)/../node_modules/.pnpm/use-effect-event@1.0.2_react@18.3.1/node_modules/use-effect-event/dist/index.js\");\n/* harmony import */ var _chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./_chunks-es/use-editor.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/../node_modules/.pnpm/next@15.5.2_@babel+core@7.2_a4e656b99e842170c0a22eb76d21770b/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/../node_modules/.pnpm/@xstate+react@6.0.0_@types+_62b57e7843be011498b19f66ee1684b8/node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/noop.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/noop.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! slate */ \"(ssr)/../node_modules/.pnpm/slate@0.117.2/node_modules/slate/dist/index.es.js\");\n/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! slate-react */ \"(ssr)/../node_modules/.pnpm/slate-react@0.117.3_react-d_b048ed54fe10fa27dc70baf58906975e/node_modules/slate-react/dist/index.es.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! debug */ \"(ssr)/../node_modules/.pnpm/debug@4.4.3_supports-color@8.1.1/node_modules/debug/src/index.js\");\n/* harmony import */ var slate_dom__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! slate-dom */ \"(ssr)/../node_modules/.pnpm/slate-dom@0.116.0_slate@0.117.2/node_modules/slate-dom/dist/index.es.js\");\n/* harmony import */ var _chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./_chunks-es/util.slice-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./_chunks-es/util.is-selection-collapsed.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isEqual.js\");\n/* harmony import */ var _chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./_chunks-es/selector.is-selection-expanded.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js\");\n/* harmony import */ var _chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./_chunks-es/selector.is-selecting-entire-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js\");\n/* harmony import */ var get_random_values_esm__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! get-random-values-esm */ \"(ssr)/../node_modules/.pnpm/get-random-values-esm@1.0.2/node_modules/get-random-values-esm/index.mjs\");\n/* harmony import */ var _behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./behaviors/index.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/behaviors/index.js\");\n/* harmony import */ var lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/uniq.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/uniq.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! rxjs */ \"(ssr)/../node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/cjs/index.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/.pnpm/xstate@5.22.0/node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/.pnpm/xstate@5.22.0/node_modules/xstate/dist/assign-f4c801fe.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/.pnpm/xstate@5.22.0/node_modules/xstate/dist/log-2269452a.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/.pnpm/xstate@5.22.0/node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/.pnpm/xstate@5.22.0/node_modules/xstate/dist/raise-b2a9750b.development.esm.js\");\n/* harmony import */ var _portabletext_block_tools__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @portabletext/block-tools */ \"(ssr)/../node_modules/.pnpm/@portabletext+block-tools@1_85ea45ec7b1750c9ee9308599ea2f210/node_modules/@portabletext/block-tools/lib/index.js\");\n/* harmony import */ var _portabletext_to_html__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @portabletext/to-html */ \"(ssr)/../node_modules/.pnpm/@portabletext+to-html@2.0.17/node_modules/@portabletext/to-html/dist/pt-to-html.mjs\");\n/* harmony import */ var _sanity_schema__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @sanity/schema */ \"(ssr)/../node_modules/.pnpm/@sanity+schema@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/schema/lib/index.mjs\");\n/* harmony import */ var lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/flatten.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/flatten.js\");\n/* harmony import */ var lodash_omit_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/omit.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/omit.js\");\n/* harmony import */ var _portabletext_patches__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @portabletext/patches */ \"(ssr)/../node_modules/.pnpm/@portabletext+patches@1.1.5/node_modules/@portabletext/patches/dist/index.js\");\n/* harmony import */ var _chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./_chunks-es/util.child-selection-point-to-block-offset.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\");\n/* harmony import */ var _chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./_chunks-es/util.slice-text-block.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js\");\n/* harmony import */ var lodash_get_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/get.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/get.js\");\n/* harmony import */ var lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/isUndefined.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isUndefined.js\");\n/* harmony import */ var lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/omitBy.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/omitBy.js\");\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! immer */ \"(ssr)/../node_modules/.pnpm/immer@10.1.3/node_modules/immer/dist/immer.mjs\");\n/* harmony import */ var _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @portabletext/keyboard-shortcuts */ \"(ssr)/../node_modules/.pnpm/@portabletext+keyboard-shortcuts@1.1.0/node_modules/@portabletext/keyboard-shortcuts/dist/index.js\");\n/* harmony import */ var _sanity_types__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @sanity/types */ \"(ssr)/../node_modules/.pnpm/@sanity+types@3.99.0_@types+react@18.3.24_debug@4.4.3/node_modules/@sanity/types/lib/index.mjs\");\n/* harmony import */ var lodash_startcase__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash.startcase */ \"(ssr)/../node_modules/.pnpm/lodash.startcase@4.4.0/node_modules/lodash.startcase/index.js\");\n/* harmony import */ var lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash/isPlainObject.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isPlainObject.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction EditorEventListener(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(5), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_14__.useEditor)(), on = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_15__.useEffectEvent)(props.on);\n  let t0;\n  $[0] !== editor || $[1] !== on ? (t0 = () => {\n    const subscription = editor.on(\"*\", on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, $[0] = editor, $[1] = on, $[2] = t0) : t0 = $[2];\n  let t1;\n  return $[3] !== editor ? (t1 = [editor], $[3] = editor, $[4] = t1) : t1 = $[4], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nconst rootName = \"sanity-pte:\";\ndebug__WEBPACK_IMPORTED_MODULE_4__(rootName);\nfunction debugWithName(name) {\n  const namespace = `${rootName}${name}`;\n  return debug__WEBPACK_IMPORTED_MODULE_4__ && debug__WEBPACK_IMPORTED_MODULE_4__.enabled(namespace) ? debug__WEBPACK_IMPORTED_MODULE_4__(namespace) : debug__WEBPACK_IMPORTED_MODULE_4__(rootName);\n}\nconst VOID_CHILD_KEY = \"void-child\";\nfunction keepObjectEquality(object, keyMap) {\n  const value = keyMap[object._key];\n  return value && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(object, value) ? value : (keyMap[object._key] = object, object);\n}\nfunction toSlateValue(value, {\n  schemaTypes\n}, keyMap = {}) {\n  return value && Array.isArray(value) ? value.map((block) => {\n    const {\n      _type,\n      _key,\n      ...rest\n    } = block;\n    if (block && block._type === schemaTypes.block.name) {\n      const textBlock = block;\n      let hasInlines = !1;\n      const hasMissingStyle = typeof textBlock.style > \"u\", hasMissingMarkDefs = typeof textBlock.markDefs > \"u\", hasMissingChildren = typeof textBlock.children > \"u\", children = (textBlock.children || []).map((child) => {\n        const {\n          _type: cType,\n          _key: cKey,\n          ...cRest\n        } = child;\n        return cType !== \"span\" ? (hasInlines = !0, keepObjectEquality({\n          _type: cType,\n          _key: cKey,\n          children: [{\n            _key: VOID_CHILD_KEY,\n            _type: \"span\",\n            text: \"\",\n            marks: []\n          }],\n          value: cRest,\n          __inline: !0\n        }, keyMap)) : child;\n      });\n      return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].name), keepObjectEquality({\n        _type,\n        _key,\n        ...rest,\n        children\n      }, keyMap));\n    }\n    return keepObjectEquality({\n      _type,\n      _key,\n      children: [{\n        _key: VOID_CHILD_KEY,\n        _type: \"span\",\n        text: \"\",\n        marks: []\n      }],\n      value: rest\n    }, keyMap);\n  }) : [];\n}\nfunction fromSlateValue(value, textBlockType, keyMap = {}) {\n  return value.map((block) => {\n    const {\n      _key,\n      _type\n    } = block;\n    if (!_key || !_type)\n      throw new Error(\"Not a valid block\");\n    if (_type === textBlockType && \"children\" in block && Array.isArray(block.children) && _key) {\n      let hasInlines = !1;\n      const children = block.children.map((child) => {\n        const {\n          _type: _cType\n        } = child;\n        if (\"value\" in child && _cType !== \"span\") {\n          hasInlines = !0;\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child;\n          return keepObjectEquality({\n            ...rest,\n            ...v,\n            _key: k,\n            _type: t\n          }, keyMap);\n        }\n        return child;\n      });\n      return hasInlines ? keepObjectEquality({\n        ...block,\n        children,\n        _key,\n        _type\n      }, keyMap) : block;\n    }\n    const blockValue = \"value\" in block && block.value;\n    return keepObjectEquality({\n      _key,\n      _type,\n      ...typeof blockValue == \"object\" ? blockValue : {}\n    }, keyMap);\n  });\n}\nfunction isEqualToEmptyEditor(children, schemaTypes) {\n  return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(children[0]) && children[0]._type === schemaTypes.block.name && \"style\" in children[0] && children[0].style === schemaTypes.styles[0].name && !(\"listItem\" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(children[0].children[0]) && children[0].children[0]._type === \"span\" && !children[0].children[0].marks?.join(\"\") && children[0].children[0].text === \"\";\n}\nfunction getBlockPath({\n  editor,\n  _key\n}) {\n  const [, blockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n    at: [],\n    match: (n) => n._key === _key\n  })).at(0) ?? [void 0, void 0], blockIndex = blockPath?.at(0);\n  if (blockIndex !== void 0)\n    return [blockIndex];\n}\nfunction getFocusBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  try {\n    return slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFocusSpan({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  try {\n    const [node, path] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, editor.selection.focus.path);\n    if (editor.isTextSpan(node))\n      return [node, path];\n  } catch {\n    return [void 0, void 0];\n  }\n  return [void 0, void 0];\n}\nfunction getSelectionStartBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  const selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_16__.Range.start(editor.selection);\n  return getPointBlock({\n    editor,\n    point: selectionStartPoint\n  });\n}\nfunction getSelectionEndBlock({\n  editor\n}) {\n  if (!editor.selection)\n    return [void 0, void 0];\n  const selectionEndPoint = slate__WEBPACK_IMPORTED_MODULE_16__.Range.end(editor.selection);\n  return getPointBlock({\n    editor,\n    point: selectionEndPoint\n  });\n}\nfunction getPointBlock({\n  editor,\n  point\n}) {\n  try {\n    const [block] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, point.path.slice(0, 1)) ?? [void 0, void 0];\n    return block ? [block, point.path.slice(0, 1)] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFocusChild({\n  editor\n}) {\n  const [focusBlock, focusBlockPath] = getFocusBlock({\n    editor\n  }), childIndex = editor.selection?.focus.path.at(1);\n  if (!focusBlock || !focusBlockPath || childIndex === void 0)\n    return [void 0, void 0];\n  try {\n    const focusChild = slate__WEBPACK_IMPORTED_MODULE_16__.Node.child(focusBlock, childIndex);\n    return focusChild ? [focusChild, [...focusBlockPath, childIndex]] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getPointChild({\n  editor,\n  point\n}) {\n  const [block, blockPath] = getPointBlock({\n    editor,\n    point\n  }), childIndex = point.path.at(1);\n  if (!block || !blockPath || childIndex === void 0)\n    return [void 0, void 0];\n  try {\n    const pointChild = slate__WEBPACK_IMPORTED_MODULE_16__.Node.child(block, childIndex);\n    return pointChild ? [pointChild, [...blockPath, childIndex]] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getFirstBlock({\n  editor\n}) {\n  if (editor.children.length === 0)\n    return [void 0, void 0];\n  const firstBlockPath = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, []).path.at(0);\n  try {\n    return firstBlockPath !== void 0 ? slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, [firstBlockPath]) ?? [void 0, void 0] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getLastBlock({\n  editor\n}) {\n  if (editor.children.length === 0)\n    return [void 0, void 0];\n  const lastBlockPath = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, []).path.at(0);\n  try {\n    return lastBlockPath !== void 0 ? slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, [lastBlockPath]) ?? [void 0, void 0] : [void 0, void 0];\n  } catch {\n    return [void 0, void 0];\n  }\n}\nfunction getNodeBlock({\n  editor,\n  schema,\n  node\n}) {\n  if (slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(node))\n    return;\n  if (isBlockElement({\n    editor,\n    schema\n  }, node))\n    return elementToBlock({\n      schema,\n      element: node\n    });\n  const parent = Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n    mode: \"highest\",\n    at: [],\n    match: (n) => isBlockElement({\n      editor,\n      schema\n    }, n) && n.children.some((child) => child._key === node._key)\n  })).at(0)?.at(0);\n  return slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(parent) ? elementToBlock({\n    schema,\n    element: parent\n  }) : void 0;\n}\nfunction elementToBlock({\n  schema,\n  element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0);\n}\nfunction isBlockElement({\n  editor,\n  schema\n}, node) {\n  return slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(node) && !editor.isInline(node) && (schema.block.name === node._type || schema.blockObjects.some((blockObject) => blockObject.name === node._type));\n}\nfunction isListItemActive({\n  editor,\n  listItem\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => editor.isListBlock(node) && node.listItem === listItem) : !1;\n}\nfunction isStyleActive({\n  editor,\n  style\n}) {\n  if (!editor.selection)\n    return !1;\n  const selectedBlocks = [...slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node)\n  })];\n  return selectedBlocks.length > 0 ? selectedBlocks.every(([node]) => node.style === style) : !1;\n}\nfunction slateRangeToSelection({\n  schema,\n  editor,\n  range\n}) {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor\n  }), [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus\n  });\n  if (!anchorBlock || !focusBlock)\n    return null;\n  const [anchorChild] = anchorBlock._type === schema.block.name ? getPointChild({\n    editor,\n    point: range.anchor\n  }) : [void 0, void 0], [focusChild] = focusBlock._type === schema.block.name ? getPointChild({\n    editor,\n    point: range.focus\n  }) : [void 0, void 0], selection = {\n    anchor: {\n      path: [{\n        _key: anchorBlock._key\n      }],\n      offset: range.anchor.offset\n    },\n    focus: {\n      path: [{\n        _key: focusBlock._key\n      }],\n      offset: range.focus.offset\n    },\n    backward: slate__WEBPACK_IMPORTED_MODULE_16__.Range.isBackward(range)\n  };\n  return anchorChild && (selection.anchor.path.push(\"children\"), selection.anchor.path.push({\n    _key: anchorChild._key\n  })), focusChild && (selection.focus.path.push(\"children\"), selection.focus.path.push({\n    _key: focusChild._key\n  })), selection;\n}\nfunction getEventPosition({\n  editorActor,\n  slateEditor,\n  event\n}) {\n  if (editorActor.getSnapshot().matches({\n    setup: \"setting up\"\n  }))\n    return;\n  const eventNode = getEventNode({\n    slateEditor,\n    event\n  });\n  if (!eventNode)\n    return;\n  const eventBlock = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node: eventNode\n  }), eventPositionBlock = getEventPositionBlock({\n    node: eventNode,\n    slateEditor,\n    event\n  }), eventSelection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event\n  });\n  if (eventBlock && eventPositionBlock && !eventSelection && !slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(eventNode))\n    return {\n      block: eventPositionBlock,\n      isEditor: !1,\n      selection: {\n        anchor: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockStartPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        }),\n        focus: (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.getBlockEndPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        })\n      }\n    };\n  if (!eventPositionBlock || !eventSelection)\n    return;\n  const eventSelectionFocusBlockKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockKeyFromSelectionPoint)(eventSelection.focus);\n  if (eventSelectionFocusBlockKey !== void 0)\n    return (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isSelectionCollapsed)(eventSelection) && eventBlock && eventSelectionFocusBlockKey !== eventBlock._key ? {\n      block: eventPositionBlock,\n      isEditor: !1,\n      selection: {\n        anchor: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockStartPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        }),\n        focus: (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.getBlockEndPoint)({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{\n              _key: eventBlock._key\n            }]\n          }\n        })\n      }\n    } : {\n      block: eventPositionBlock,\n      isEditor: slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(eventNode),\n      selection: eventSelection\n    };\n}\nfunction getEventNode({\n  slateEditor,\n  event\n}) {\n  return slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.hasTarget(slateEditor, event.target) ? slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.toSlateNode(slateEditor, event.target) : void 0;\n}\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event\n}) {\n  const [firstBlock] = getFirstBlock({\n    editor: slateEditor\n  });\n  if (!firstBlock)\n    return;\n  const firstBlockRect = slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.toDOMNode(slateEditor, firstBlock).getBoundingClientRect();\n  if (event.pageY < firstBlockRect.top)\n    return \"start\";\n  const [lastBlock] = getLastBlock({\n    editor: slateEditor\n  });\n  if (!lastBlock)\n    return;\n  const lastBlockRef = slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.toDOMNode(slateEditor, lastBlock).getBoundingClientRect();\n  if (event.pageY > lastBlockRef.bottom)\n    return \"end\";\n  const elementRect = slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.toDOMNode(slateEditor, node).getBoundingClientRect(), top = elementRect.top, height = elementRect.height;\n  return Math.abs(top - event.pageY) < height / 2 ? \"start\" : \"end\";\n}\nfunction getEventSelection({\n  schema,\n  slateEditor,\n  event\n}) {\n  const range = getSlateRangeFromEvent(slateEditor, event);\n  return range ? slateRangeToSelection({\n    schema,\n    editor: slateEditor,\n    range\n  }) : null;\n}\nfunction getSlateRangeFromEvent(editor, event) {\n  if (!event.target || !(0,slate_dom__WEBPACK_IMPORTED_MODULE_19__.isDOMNode)(event.target))\n    return;\n  const window2 = slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.getWindow(editor);\n  let domRange;\n  if (window2.document.caretPositionFromPoint !== void 0) {\n    const position = window2.document.caretPositionFromPoint(event.clientX, event.clientY);\n    if (position)\n      try {\n        domRange = window2.document.createRange(), domRange.setStart(position.offsetNode, position.offset), domRange.setEnd(position.offsetNode, position.offset);\n      } catch {\n      }\n  } else if (window2.document.caretRangeFromPoint !== void 0)\n    domRange = window2.document.caretRangeFromPoint(event.clientX, event.clientY) ?? void 0;\n  else {\n    console.warn(\"Neither caretPositionFromPoint nor caretRangeFromPoint is supported\");\n    return;\n  }\n  if (!domRange)\n    return;\n  let range;\n  try {\n    range = slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: !1,\n      // It can still throw even with this option set to true\n      suppressThrow: !1\n    });\n  } catch {\n  }\n  return range;\n}\nfunction normalizePoint(point, value) {\n  if (!point || !value)\n    return null;\n  const newPath = [];\n  let newOffset = point.offset || 0;\n  const blockKey = typeof point.path[0] == \"object\" && \"_key\" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == \"object\" && \"_key\" in point.path[2] && point.path[2]._key, block = value.find((blk) => blk._key === blockKey);\n  if (block)\n    newPath.push({\n      _key: block._key\n    });\n  else\n    return null;\n  if (block && point.path[1] === \"children\") {\n    if (!block.children || Array.isArray(block.children) && block.children.length === 0)\n      return null;\n    const child = Array.isArray(block.children) && block.children.find((cld) => cld._key === childKey);\n    if (child)\n      newPath.push(\"children\"), newPath.push({\n        _key: child._key\n      }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;\n    else\n      return null;\n  }\n  return {\n    path: newPath,\n    offset: newOffset\n  };\n}\nfunction normalizeSelection(selection, value) {\n  if (!selection || !value || value.length === 0)\n    return null;\n  let newAnchor = null, newFocus = null;\n  const {\n    anchor,\n    focus\n  } = selection;\n  return anchor && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n    _key: blk._key\n  }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n    _key: blk._key\n  }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? {\n    anchor: newAnchor,\n    focus: newFocus,\n    backward: selection.backward\n  } : null;\n}\nfunction toSlateRange(snapshot) {\n  if (!snapshot.context.selection)\n    return null;\n  if ((0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEqualSelectionPoints)(snapshot.context.selection.anchor, snapshot.context.selection.focus)) {\n    const anchorPoint2 = toSlateSelectionPoint(snapshot, snapshot.context.selection.anchor, snapshot.context.selection.backward ? \"forward\" : \"backward\");\n    return anchorPoint2 ? {\n      anchor: anchorPoint2,\n      focus: anchorPoint2\n    } : null;\n  }\n  const anchorPoint = toSlateSelectionPoint(snapshot, snapshot.context.selection.anchor, snapshot.context.selection.backward ? \"forward\" : \"backward\"), focusPoint = toSlateSelectionPoint(snapshot, snapshot.context.selection.focus, snapshot.context.selection.backward ? \"backward\" : \"forward\");\n  return !anchorPoint || !focusPoint ? null : {\n    anchor: anchorPoint,\n    focus: focusPoint\n  };\n}\nfunction toSlateSelectionPoint(snapshot, selectionPoint, direction) {\n  const blockKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockKeyFromSelectionPoint)(selectionPoint);\n  if (!blockKey)\n    return;\n  const blockIndex = snapshot.blockIndexMap.get(blockKey);\n  if (blockIndex === void 0)\n    return;\n  const block = snapshot.context.value.at(blockIndex);\n  if (!block)\n    return;\n  if (!(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(snapshot.context, block))\n    return {\n      path: [blockIndex, 0],\n      offset: 0\n    };\n  let childKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getChildKeyFromSelectionPoint)({\n    path: selectionPoint.path\n  });\n  const spanSelectionPoint = childKey ? void 0 : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.blockOffsetToSpanSelectionPoint)({\n    context: {\n      schema: snapshot.context.schema,\n      value: [block]\n    },\n    blockOffset: {\n      path: [{\n        _key: blockKey\n      }],\n      offset: selectionPoint.offset\n    },\n    direction\n  });\n  if (childKey = spanSelectionPoint ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getChildKeyFromSelectionPoint)(spanSelectionPoint) : childKey, !childKey)\n    return {\n      path: [blockIndex, 0],\n      offset: 0\n    };\n  let offset = spanSelectionPoint?.offset ?? selectionPoint.offset, childPath = [], childIndex = -1, pathChild;\n  for (const child of block.children)\n    if (childIndex++, child._key === childKey) {\n      pathChild = child, (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)(snapshot.context, child) ? childPath = [childIndex] : (childPath = [childIndex, 0], offset = 0);\n      break;\n    }\n  return childPath.length === 0 ? {\n    path: [blockIndex, 0],\n    offset: 0\n  } : {\n    path: [blockIndex].concat(childPath),\n    offset: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)(snapshot.context, pathChild) ? Math.min(pathChild.text.length, offset) : offset\n  };\n}\nconst IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), EditorActorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\nfunction DropIndicator() {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(1);\n  let t0;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { contentEditable: !1, className: \"pt-drop-indicator\", style: {\n    position: \"absolute\",\n    width: \"100%\",\n    height: 1,\n    borderBottom: \"1px solid currentColor\",\n    zIndex: 5\n  }, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", {}) }), $[0] = t0) : t0 = $[0], t0;\n}\nfunction RenderDefaultBlockObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.blockObject._key || $[2] !== props.blockObject._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { style: t0, children: [\n    \"[\",\n    props.blockObject._type,\n    \": \",\n    props.blockObject._key,\n    \"]\"\n  ] }), $[1] = props.blockObject._key, $[2] = props.blockObject._type, $[3] = t1) : t1 = $[3], t1;\n}\nfunction RenderDefaultInlineObject(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0;\n  $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = {\n    userSelect: \"none\"\n  }, $[0] = t0) : t0 = $[0];\n  let t1;\n  return $[1] !== props.inlineObject._key || $[2] !== props.inlineObject._type ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { style: t0, children: [\n    \"[\",\n    props.inlineObject._type,\n    \": \",\n    props.inlineObject._key,\n    \"]\"\n  ] }), $[1] = props.inlineObject._key, $[2] = props.inlineObject._type, $[3] = t1) : t1 = $[3], t1;\n}\nfunction getDragSelection({\n  eventSelection,\n  snapshot\n}) {\n  let dragSelection = eventSelection;\n  if ((0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusInlineObject)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }))\n    return dragSelection;\n  const draggingCollapsedSelection = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)({\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }), draggedTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  }), draggedSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusSpan)({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection\n    }\n  });\n  draggingCollapsedSelection && draggedTextBlock && draggedSpan && (dragSelection = {\n    anchor: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: draggedTextBlock\n    }),\n    focus: (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: draggedTextBlock\n    })\n  });\n  const selectedBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedBlocks)(snapshot);\n  if (snapshot.context.selection && (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionExpanded)(snapshot) && selectedBlocks.length > 1) {\n    const selectionStartBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectionEndBlock)(snapshot);\n    if (!selectionStartBlock || !selectionEndBlock)\n      return dragSelection;\n    const selectionStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: selectionStartBlock\n    }), selectionEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: selectionEndBlock\n    });\n    (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isOverlappingSelection)(eventSelection)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionEndPoint\n        }\n      }\n    }) && (dragSelection = {\n      anchor: selectionStartPoint,\n      focus: selectionEndPoint\n    });\n  }\n  return dragSelection;\n}\nconst defaultKeyGenerator = () => randomKey(12), getByteHexTable = /* @__PURE__ */ (() => {\n  let table;\n  return () => {\n    if (table)\n      return table;\n    table = [];\n    for (let i = 0; i < 256; ++i)\n      table[i] = (i + 256).toString(16).slice(1);\n    return table;\n  };\n})();\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length);\n  return (0,get_random_values_esm__WEBPACK_IMPORTED_MODULE_22__[\"default\"])(rnds8), rnds8;\n}\nfunction randomKey(length) {\n  const table = getByteHexTable();\n  return whatwgRNG(length).reduce((str, n) => str + table[n], \"\").slice(0, length);\n}\nfunction createEditorPriority(config) {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference\n  };\n}\nconst corePriority = createEditorPriority({\n  name: \"core\"\n});\nfunction createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock\n}) {\n  return [{\n    behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n      on: \"drag.dragover\",\n      guard: ({\n        snapshot,\n        event\n      }) => {\n        const dropFocusBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusBlock)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: event.position.selection\n          }\n        });\n        if (!dropFocusBlock || dropFocusBlock.node._key !== key)\n          return !1;\n        const dragOrigin = event.dragOrigin;\n        if (!dragOrigin)\n          return !1;\n        const dragSelection = getDragSelection({\n          eventSelection: dragOrigin.selection,\n          snapshot\n        });\n        return (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedBlocks)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        }).some((draggedBlock) => draggedBlock.node._key === key) ? !1 : (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isSelectingEntireBlocks)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        });\n      },\n      actions: [({\n        event\n      }) => [{\n        type: \"effect\",\n        effect: () => {\n          onSetDragPositionBlock(event.position.block);\n        }\n      }]]\n    }),\n    priority: createEditorPriority({\n      reference: {\n        priority: corePriority,\n        importance: \"lower\"\n      }\n    })\n  }, {\n    behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n      on: \"drag.*\",\n      guard: ({\n        event\n      }) => event.type !== \"drag.dragover\",\n      actions: [({\n        event\n      }) => [{\n        type: \"effect\",\n        effect: () => {\n          onSetDragPositionBlock(void 0);\n        }\n      }, (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.forward)(event)]]\n    }),\n    priority: createEditorPriority({\n      reference: {\n        priority: corePriority,\n        importance: \"lower\"\n      }\n    })\n  }];\n}\nfunction useCoreBlockElementBehaviors(t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(5), {\n    key,\n    onSetDragPositionBlock\n  } = t0, editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext);\n  let t1, t2;\n  $[0] !== editorActor || $[1] !== key || $[2] !== onSetDragPositionBlock ? (t1 = () => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock\n    });\n    for (const behaviorConfig of behaviorConfigs)\n      editorActor.send({\n        type: \"add behavior\",\n        behaviorConfig\n      });\n    return () => {\n      for (const behaviorConfig_0 of behaviorConfigs)\n        editorActor.send({\n          type: \"remove behavior\",\n          behaviorConfig: behaviorConfig_0\n        });\n    };\n  }, t2 = [editorActor, key, onSetDragPositionBlock], $[0] = editorActor, $[1] = key, $[2] = onSetDragPositionBlock, $[3] = t1, $[4] = t2) : (t1 = $[3], t2 = $[4]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t1, t2);\n}\nfunction RenderBlockObject(props) {\n  const [dragPositionBlock, setDragPositionBlock] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(), blockObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSelected)(), focused = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSlateSelector)((editor) => selected && editor.selection !== null && slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed(editor.selection));\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock\n  });\n  const legacySchemaType = props.legacySchema.blockObjects.find((schemaType) => schemaType.name === props.element._type);\n  legacySchemaType || console.error(`Unable to find Block Object \"${props.element._type}\" in Schema`);\n  const blockObject = props.blockObject ?? {\n    _key: props.element._key,\n    _type: props.element._type\n  };\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ...props.attributes, className: \"pt-block pt-object-block\", \"data-block-key\": props.element._key, \"data-block-name\": props.element._type, \"data-block-type\": \"object\", children: [\n    dragPositionBlock === \"start\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null,\n    props.children,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: blockObjectRef, contentEditable: !1, draggable: !props.readOnly, children: props.renderBlock && legacySchemaType ? props.renderBlock({\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultBlockObject, { blockObject }),\n      editorElementRef: blockObjectRef,\n      focused,\n      path: [{\n        _key: props.element._key\n      }],\n      schemaType: legacySchemaType,\n      selected,\n      type: legacySchemaType,\n      value: blockObject\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultBlockObject, { blockObject }) }),\n    dragPositionBlock === \"end\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null\n  ] });\n}\nfunction RenderInlineObject(props) {\n  const inlineObjectRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSlateStatic)(), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSelected)(), focused = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSlateSelector)((editor) => selected && editor.selection !== null && slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed(editor.selection)), legacySchemaType = props.legacySchema.inlineObjects.find((inlineObject) => inlineObject.name === props.element._type);\n  legacySchemaType || console.error(`Unable to find Inline Object \"${props.element._type}\" in Schema`);\n  const path = slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.findPath(slateEditor, props.element), [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0\n    }\n  });\n  block || console.error(`Unable to find parent block of inline object ${props.element._key}`);\n  const inlineObject_0 = {\n    _key: props.element._key,\n    _type: props.element._type,\n    ...\"value\" in props.element && typeof props.element.value == \"object\" ? props.element.value : {}\n  };\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"span\", { ...props.attributes, draggable: !props.readOnly, className: \"pt-inline-object\", \"data-child-key\": inlineObject_0._key, \"data-child-name\": inlineObject_0._type, \"data-child-type\": \"object\", children: [\n    props.children,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: inlineObjectRef, style: {\n      display: \"inline-block\"\n    }, children: props.renderChild && block && legacySchemaType ? props.renderChild({\n      annotations: [],\n      children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultInlineObject, { inlineObject: inlineObject_0 }),\n      editorElementRef: inlineObjectRef,\n      selected,\n      focused,\n      path: [{\n        _key: block._key\n      }, \"children\", {\n        _key: props.element._key\n      }],\n      schemaType: legacySchemaType,\n      value: inlineObject_0,\n      type: legacySchemaType\n    }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderDefaultInlineObject, { inlineObject: inlineObject_0 }) })\n  ] });\n}\nfunction RenderTextBlock(props) {\n  const [dragPositionBlock, setDragPositionBlock] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(), blockRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSelected)(), focused = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSlateSelector)((editor) => selected && editor.selection !== null && slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed(editor.selection));\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock\n  });\n  const listIndex = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSlateSelector)((editor_0) => editor_0.listIndexMap.get(props.textBlock._key));\n  let children = props.children;\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType = props.textBlock.style !== void 0 ? props.legacySchema.styles.find((style) => style.value === props.textBlock.style) : void 0;\n    legacyStyleSchemaType ? children = props.renderStyle({\n      block: props.textBlock,\n      children,\n      editorElementRef: blockRef,\n      focused,\n      path: [{\n        _key: props.textBlock._key\n      }],\n      schemaType: legacyStyleSchemaType,\n      selected,\n      value: props.textBlock.style\n    }) : console.error(`Unable to find Schema type for text block style ${props.textBlock.style}`);\n  }\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = props.legacySchema.lists.find((list) => list.value === props.textBlock.listItem);\n    legacyListItemSchemaType ? children = props.renderListItem({\n      block: props.textBlock,\n      children,\n      editorElementRef: blockRef,\n      focused,\n      level: props.textBlock.level ?? 1,\n      path: [{\n        _key: props.textBlock._key\n      }],\n      selected,\n      value: props.textBlock.listItem,\n      schemaType: legacyListItemSchemaType\n    }) : console.error(`Unable to find Schema type for text block list item ${props.textBlock.listItem}`);\n  }\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(\"div\", { ...props.attributes, className: [\"pt-block\", \"pt-text-block\", ...props.textBlock.style ? [`pt-text-block-style-${props.textBlock.style}`] : [], ...props.textBlock.listItem ? [\"pt-list-item\", `pt-list-item-${props.textBlock.listItem}`, `pt-list-item-level-${props.textBlock.level ?? 1}`] : []].join(\" \"), spellCheck: props.spellCheck, \"data-block-key\": props.textBlock._key, \"data-block-name\": props.textBlock._type, \"data-block-type\": \"text\", ...props.textBlock.listItem !== void 0 ? {\n    \"data-list-item\": props.textBlock.listItem\n  } : {}, ...props.textBlock.level !== void 0 ? {\n    \"data-level\": props.textBlock.level\n  } : {}, ...props.textBlock.style !== void 0 ? {\n    \"data-style\": props.textBlock.style\n  } : {}, ...listIndex !== void 0 ? {\n    \"data-list-index\": listIndex\n  } : {}, children: [\n    dragPositionBlock === \"start\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null,\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"div\", { ref: blockRef, children: props.renderBlock ? props.renderBlock({\n      children,\n      editorElementRef: blockRef,\n      focused,\n      level: props.textBlock.level,\n      listItem: props.textBlock.listItem,\n      path: [{\n        _key: props.textBlock._key\n      }],\n      selected,\n      schemaType: props.legacySchema.block,\n      style: props.textBlock.style,\n      type: props.legacySchema.block,\n      value: props.textBlock\n    }) : children }),\n    dragPositionBlock === \"end\" ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(DropIndicator, {}) : null\n  ] });\n}\nfunction RenderElement(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(34), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), schema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_25__.useSelector)(editorActor, _temp$1), legacySchema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_25__.useSelector)(editorActor, _temp2), slateStatic = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSlateStatic)();\n  if (\"__inline\" in props.element && props.element.__inline === !0) {\n    let t02;\n    return $[0] !== legacySchema || $[1] !== props.attributes || $[2] !== props.children || $[3] !== props.element || $[4] !== props.readOnly || $[5] !== props.renderChild || $[6] !== schema ? (t02 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderInlineObject, { attributes: props.attributes, element: props.element, legacySchema, readOnly: props.readOnly, renderChild: props.renderChild, schema, children: props.children }), $[0] = legacySchema, $[1] = props.attributes, $[2] = props.children, $[3] = props.element, $[4] = props.readOnly, $[5] = props.renderChild, $[6] = schema, $[7] = t02) : t02 = $[7], t02;\n  }\n  let block, t0;\n  if ($[8] !== props.element._key || $[9] !== schema || $[10] !== slateStatic.blockIndexMap || $[11] !== slateStatic.value) {\n    const blockIndex = slateStatic.blockIndexMap.get(props.element._key);\n    block = blockIndex !== void 0 ? slateStatic.value.at(blockIndex) : void 0, t0 = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n      schema\n    }, block), $[8] = props.element._key, $[9] = schema, $[10] = slateStatic.blockIndexMap, $[11] = slateStatic.value, $[12] = block, $[13] = t0;\n  } else\n    block = $[12], t0 = $[13];\n  if (t0) {\n    let t12;\n    return $[14] !== block || $[15] !== legacySchema || $[16] !== props.attributes || $[17] !== props.children || $[18] !== props.element || $[19] !== props.readOnly || $[20] !== props.renderBlock || $[21] !== props.renderListItem || $[22] !== props.renderStyle || $[23] !== props.spellCheck ? (t12 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderTextBlock, { attributes: props.attributes, element: props.element, legacySchema, readOnly: props.readOnly, renderBlock: props.renderBlock, renderListItem: props.renderListItem, renderStyle: props.renderStyle, spellCheck: props.spellCheck, textBlock: block, children: props.children }), $[14] = block, $[15] = legacySchema, $[16] = props.attributes, $[17] = props.children, $[18] = props.element, $[19] = props.readOnly, $[20] = props.renderBlock, $[21] = props.renderListItem, $[22] = props.renderStyle, $[23] = props.spellCheck, $[24] = t12) : t12 = $[24], t12;\n  }\n  let t1;\n  return $[25] !== block || $[26] !== legacySchema || $[27] !== props.attributes || $[28] !== props.children || $[29] !== props.element || $[30] !== props.readOnly || $[31] !== props.renderBlock || $[32] !== schema ? (t1 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderBlockObject, { attributes: props.attributes, blockObject: block, element: props.element, legacySchema, readOnly: props.readOnly, renderBlock: props.renderBlock, schema, children: props.children }), $[25] = block, $[26] = legacySchema, $[27] = props.attributes, $[28] = props.children, $[29] = props.element, $[30] = props.readOnly, $[31] = props.renderBlock, $[32] = schema, $[33] = t1) : t1 = $[33], t1;\n}\nfunction _temp2(s_0) {\n  return s_0.context.getLegacySchema();\n}\nfunction _temp$1(s) {\n  return s.context.schema;\n}\nconst PortableTextEditorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null), usePortableTextEditor = () => {\n  const editor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PortableTextEditorContext);\n  if (!editor)\n    throw new Error(\"The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context.\");\n  return editor;\n}, forEachActor = (actorRef, callback) => {\n  callback(actorRef);\n  const children = actorRef.getSnapshot().children;\n  children && Object.values(children).forEach((child) => {\n    forEachActor(child, callback);\n  });\n};\nfunction stopActor(actorRef) {\n  const persistedSnapshots = [];\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()]), ref.observers = /* @__PURE__ */ new Set();\n  });\n  const systemSnapshot = actorRef.system.getSnapshot?.();\n  actorRef.stop(), actorRef.system._snapshot = systemSnapshot, persistedSnapshots.forEach(([ref, snapshot]) => {\n    ref._processingStatus = 0, ref._snapshot = snapshot;\n  });\n}\nconst converterJson = {\n  mimeType: \"application/json\",\n  serialize: ({\n    snapshot,\n    event\n  }) => {\n    const portableTextConverter = snapshot.context.converters.find((converter) => converter.mimeType === \"application/x-portable-text\");\n    return portableTextConverter ? {\n      ...portableTextConverter.serialize({\n        snapshot,\n        event\n      }),\n      mimeType: \"application/json\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.failure\",\n      mimeType: \"application/json\",\n      originEvent: event.originEvent,\n      reason: \"No application/x-portable-text Converter found\"\n    };\n  },\n  deserialize: ({\n    snapshot,\n    event\n  }) => {\n    const portableTextConverter = snapshot.context.converters.find((converter) => converter.mimeType === \"application/x-portable-text\");\n    return portableTextConverter ? {\n      ...portableTextConverter.deserialize({\n        snapshot,\n        event\n      }),\n      mimeType: \"application/json\"\n    } : {\n      type: \"deserialization.failure\",\n      mimeType: \"application/json\",\n      reason: \"No application/x-portable-text Converter found\"\n    };\n  }\n}, converterPortableText = {\n  mimeType: \"application/x-portable-text\",\n  serialize: ({\n    snapshot,\n    event\n  }) => {\n    if (!snapshot.context.selection)\n      return {\n        type: \"serialization.failure\",\n        mimeType: \"application/x-portable-text\",\n        originEvent: event.originEvent,\n        reason: \"No selection\"\n      };\n    const blocks = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getSelectedValue)(snapshot);\n    return blocks.length === 0 ? {\n      type: \"serialization.failure\",\n      mimeType: \"application/x-portable-text\",\n      reason: \"No blocks serialized\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.success\",\n      data: JSON.stringify(blocks),\n      mimeType: \"application/x-portable-text\",\n      originEvent: event.originEvent\n    };\n  },\n  deserialize: ({\n    snapshot,\n    event\n  }) => {\n    const blocks = JSON.parse(event.data);\n    if (!Array.isArray(blocks))\n      return {\n        type: \"deserialization.failure\",\n        mimeType: \"application/x-portable-text\",\n        reason: \"Data is not an array\"\n      };\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseBlock)({\n        context: snapshot.context,\n        block,\n        options: {\n          refreshKeys: !0,\n          validateFields: !1\n        }\n      });\n      return parsedBlock ? [parsedBlock] : [];\n    });\n    return parsedBlocks.length === 0 && blocks.length > 0 ? {\n      type: \"deserialization.failure\",\n      mimeType: \"application/x-portable-text\",\n      reason: \"No blocks were parsed\"\n    } : {\n      type: \"deserialization.success\",\n      data: parsedBlocks,\n      mimeType: \"application/x-portable-text\"\n    };\n  }\n};\nfunction createConverterTextHtml(legacySchema) {\n  return {\n    mimeType: \"text/html\",\n    serialize: ({\n      snapshot,\n      event\n    }) => {\n      if (!snapshot.context.selection)\n        return {\n          type: \"serialization.failure\",\n          mimeType: \"text/html\",\n          originEvent: event.originEvent,\n          reason: \"No selection\"\n        };\n      const blocks = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getSelectedValue)(snapshot), html = (0,_portabletext_to_html__WEBPACK_IMPORTED_MODULE_26__.toHTML)(blocks, {\n        onMissingComponent: !1,\n        components: {\n          unknownType: ({\n            children\n          }) => children !== void 0 ? `${children}` : \"\"\n        }\n      });\n      return html === \"\" ? {\n        type: \"serialization.failure\",\n        mimeType: \"text/html\",\n        originEvent: event.originEvent,\n        reason: \"Serialized HTML is empty\"\n      } : {\n        type: \"serialization.success\",\n        data: html,\n        mimeType: \"text/html\",\n        originEvent: event.originEvent\n      };\n    },\n    deserialize: ({\n      snapshot,\n      event\n    }) => {\n      const parsedBlocks = (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_27__.htmlToBlocks)(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode: legacySchema.block.options.unstable_whitespaceOnPasteMode\n      }).flatMap((block) => {\n        const parsedBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseBlock)({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: !1,\n            validateFields: !0\n          }\n        });\n        return parsedBlock ? [parsedBlock] : [];\n      });\n      return parsedBlocks.length === 0 ? {\n        type: \"deserialization.failure\",\n        mimeType: \"text/html\",\n        reason: \"No blocks deserialized\"\n      } : {\n        type: \"deserialization.success\",\n        data: parsedBlocks,\n        mimeType: \"text/html\"\n      };\n    }\n  };\n}\nfunction createConverterTextPlain(legacySchema) {\n  return {\n    mimeType: \"text/plain\",\n    serialize: ({\n      snapshot,\n      event\n    }) => snapshot.context.selection ? {\n      type: \"serialization.success\",\n      data: (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getSelectedValue)(snapshot).map((block) => (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(snapshot.context, block) ? block.children.map((child) => child._type === snapshot.context.schema.span.name ? child.text : event.originEvent === \"drag.dragstart\" ? `[${snapshot.context.schema.inlineObjects.find((inlineObjectType) => inlineObjectType.name === child._type)?.title ?? \"Object\"}]` : \"\").join(\"\") : event.originEvent === \"drag.dragstart\" ? `[${snapshot.context.schema.blockObjects.find((blockObjectType) => blockObjectType.name === block._type)?.title ?? \"Object\"}]` : \"\").filter((block) => block !== \"\").join(`\n\n`),\n      mimeType: \"text/plain\",\n      originEvent: event.originEvent\n    } : {\n      type: \"serialization.failure\",\n      mimeType: \"text/plain\",\n      originEvent: event.originEvent,\n      reason: \"No selection\"\n    },\n    deserialize: ({\n      snapshot,\n      event\n    }) => {\n      const textToHtml = `<html><body>${escapeHtml(event.data).split(/\\n{2,}/).map((line) => line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\")}</p>` : \"<p></p>\").join(\"\")}</body></html>`, parsedBlocks = (0,_portabletext_block_tools__WEBPACK_IMPORTED_MODULE_27__.htmlToBlocks)(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator\n      }).flatMap((block) => {\n        const parsedBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseBlock)({\n          context: snapshot.context,\n          block,\n          options: {\n            refreshKeys: !1,\n            validateFields: !0\n          }\n        });\n        return parsedBlock ? [parsedBlock] : [];\n      });\n      return parsedBlocks.length === 0 ? {\n        type: \"deserialization.failure\",\n        mimeType: \"text/plain\",\n        reason: \"No blocks deserialized\"\n      } : {\n        type: \"deserialization.success\",\n        data: parsedBlocks,\n        mimeType: \"text/plain\"\n      };\n    }\n  };\n}\nconst entityMap = {\n  \"&\": \"&amp;\",\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"'\": \"&#39;\",\n  \"/\": \"&#x2F;\",\n  \"`\": \"&#x60;\",\n  \"=\": \"&#x3D;\"\n};\nfunction escapeHtml(str) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s) => entityMap[s]);\n}\nfunction createCoreConverters(legacySchema) {\n  return [converterJson, converterPortableText, createConverterTextHtml(legacySchema), createConverterTextPlain(legacySchema)];\n}\nfunction compileType(rawType) {\n  return _sanity_schema__WEBPACK_IMPORTED_MODULE_28__.Schema.compile({\n    name: \"blockTypeSchema\",\n    types: [rawType]\n  }).get(rawType.name);\n}\nconst levelIndexMap = /* @__PURE__ */ new Map();\nfunction buildIndexMaps(context, {\n  blockIndexMap,\n  listIndexMap\n}) {\n  blockIndexMap.clear(), listIndexMap.clear(), levelIndexMap.clear();\n  let previousListItem;\n  for (let blockIndex = 0; blockIndex < context.value.length; blockIndex++) {\n    const block = context.value.at(blockIndex);\n    if (block !== void 0) {\n      if (blockIndexMap.set(block._key, blockIndex), !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(context, block)) {\n        levelIndexMap.clear(), previousListItem = void 0;\n        continue;\n      }\n      if (block.listItem === void 0 || block.level === void 0) {\n        levelIndexMap.clear(), previousListItem = void 0;\n        continue;\n      }\n      if (!previousListItem) {\n        previousListItem = {\n          listItem: block.listItem,\n          level: block.level\n        }, levelIndexMap.set(block.level, 1), listIndexMap.set(block._key, 1);\n        continue;\n      }\n      if (previousListItem.listItem !== block.listItem) {\n        levelIndexMap.clear(), previousListItem = {\n          listItem: block.listItem,\n          level: block.level\n        }, levelIndexMap.set(block.level, 1), listIndexMap.set(block._key, 1);\n        continue;\n      }\n      if (previousListItem.level === block.level) {\n        const levelCounter = levelIndexMap.get(block.level) ?? 0;\n        levelIndexMap.set(block.level, levelCounter + 1), previousListItem = {\n          listItem: block.listItem,\n          level: block.level\n        }, listIndexMap.set(block._key, levelCounter + 1);\n        continue;\n      }\n      if (previousListItem.level < block.level) {\n        levelIndexMap.set(block.level, 1), previousListItem = {\n          listItem: block.listItem,\n          level: block.level\n        }, listIndexMap.set(block._key, 1);\n        continue;\n      }\n      if (previousListItem.level > block.level) {\n        const levelCounter = levelIndexMap.get(block.level) ?? 0;\n        levelIndexMap.set(block.level, levelCounter + 1), previousListItem = {\n          listItem: block.listItem,\n          level: block.level\n        }, listIndexMap.set(block._key, levelCounter + 1);\n      }\n    }\n  }\n}\nfunction createPlaceholderBlock(context) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? \"normal\",\n    markDefs: [],\n    children: [{\n      _type: context.schema.span.name,\n      _key: context.keyGenerator(),\n      text: \"\",\n      marks: []\n    }]\n  };\n}\nconst insertTextOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const snapshot = {\n    blockIndexMap: operation.editor.blockIndexMap,\n    context: {\n      value: operation.editor.value,\n      selection: operation.editor.selection ? slateRangeToSelection({\n        schema: context.schema,\n        editor: operation.editor,\n        range: operation.editor.selection\n      }) : null,\n      schema: context.schema,\n      keyGenerator: context.keyGenerator,\n      converters: [],\n      readOnly: !1\n    },\n    decoratorState: operation.editor.decoratorState\n  }, markState = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getMarkState)(snapshot), activeDecorators = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getActiveDecorators)(snapshot), activeAnnotations = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getActiveAnnotationsMarks)(snapshot), [focusSpan] = getFocusSpan({\n    editor: operation.editor\n  });\n  if (!focusSpan) {\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertText(operation.editor, operation.text);\n    return;\n  }\n  if (markState && markState.state === \"unchanged\") {\n    const markStateDecorators = (markState.marks ?? []).filter((mark) => context.schema.decorators.map((decorator) => decorator.name).includes(mark));\n    if (markStateDecorators.length === activeDecorators.length && markStateDecorators.every((mark) => activeDecorators.includes(mark))) {\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertText(operation.editor, operation.text);\n      return;\n    }\n  }\n  slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(operation.editor, {\n    _type: focusSpan._type,\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...activeDecorators, ...activeAnnotations]\n  }), operation.editor.decoratorState = {};\n};\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every((mark) => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" && // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every((def) => typeof def._key == \"string\")) && // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let previousSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_16__.Node.children(editor, blockPath, {\n    reverse: !0\n  }))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_16__.Path.isBefore(childPath, spanPath)) {\n      previousSpan = child;\n      break;\n    }\n  return previousSpan;\n}\nfunction getNextSpan({\n  editor,\n  blockPath,\n  spanPath\n}) {\n  let nextSpan;\n  for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_16__.Node.children(editor, blockPath))\n    if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_16__.Path.isAfter(childPath, spanPath)) {\n      nextSpan = child;\n      break;\n    }\n  return nextSpan;\n}\nfunction withRemoteChanges(editor, fn) {\n  const prev = isChangingRemotely(editor) || !1;\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);\n}\nfunction isChangingRemotely(editor) {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor);\n}\nconst IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();\nfunction withUndoing(editor, fn) {\n  const prev = isUndoing(editor);\n  IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);\n}\nfunction isUndoing(editor) {\n  return IS_UDOING.get(editor) ?? !1;\n}\nfunction setIsUndoing(editor, isUndoing2) {\n  IS_UDOING.set(editor, isUndoing2);\n}\nfunction withRedoing(editor, fn) {\n  const prev = isRedoing(editor);\n  IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);\n}\nfunction isRedoing(editor) {\n  return IS_REDOING.get(editor) ?? !1;\n}\nfunction setIsRedoing(editor, isRedoing2) {\n  IS_REDOING.set(editor, isRedoing2);\n}\nfunction defaultCompare(a, b) {\n  return a === b;\n}\nfunction useEditorSelector(editor, selector, t0) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(3), compare = t0 === void 0 ? defaultCompare : t0;\n  let t1;\n  return $[0] !== editor || $[1] !== selector ? (t1 = (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: editor._internal.slateEditor.instance\n    });\n    return selector(snapshot);\n  }, $[0] = editor, $[1] = selector, $[2] = t1) : t1 = $[2], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_25__.useSelector)(editor._internal.editorActor, t1, compare);\n}\nfunction getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance\n}) {\n  return {\n    blockIndexMap: slateEditorInstance.blockIndexMap,\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({\n        \"edit mode\": \"read only\"\n      }),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateEditorInstance.value\n    },\n    decoratorState: slateEditorInstance.decoratorState\n  };\n}\nconst debug$e = debugWithName(\"plugin:withPortableTextMarkModel\");\nfunction createWithPortableTextMarkModel(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor, decorators = editorActor.getSnapshot().context.schema.decorators.map((t) => t.name);\n    return editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry;\n      if (editor.isTextBlock(node)) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_16__.Node.children(editor, path);\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1];\n          if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && child.marks?.every((mark) => nextNode.marks?.includes(mark)) && nextNode.marks?.every((mark) => child.marks?.includes(mark))) {\n            debug$e(\"Merging spans\", JSON.stringify(child, null, 2), JSON.stringify(nextNode, null, 2)), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: !0\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug$e(\"Adding .markDefs to block node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n          markDefs: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug$e(\"Adding .marks to span node\"), editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n          marks: []\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_16__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, blockPath), decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name), annotations = node.marks?.filter((mark) => !decorators2.includes(mark));\n        if (editor.isTextBlock(block) && node.text === \"\" && annotations && annotations.length > 0) {\n          debug$e(\"Removing annotations from empty span node\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n            marks: node.marks?.filter((mark) => decorators2.includes(mark))\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name);\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_16__.Node.children(editor, path))\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !node.markDefs?.find((def) => def._key === mark));\n            if (orphanedAnnotations.length > 0) {\n              debug$e(\"Removing orphaned annotations from span node\"), editorActor.send({\n                type: \"normalizing\"\n              }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n                marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n              }, {\n                at: childPath\n              }), editorActor.send({\n                type: \"done normalizing\"\n              });\n              return;\n            }\n          }\n      }\n      if (editor.isTextSpan(node)) {\n        const blockPath = slate__WEBPACK_IMPORTED_MODULE_16__.Path.parent(path), [block] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, blockPath);\n        if (editor.isTextBlock(block)) {\n          const decorators2 = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark) => !decorators2.includes(mark) && !block.markDefs?.find((def) => def._key === mark));\n          if (orphanedAnnotations.length > 0) {\n            debug$e(\"Removing orphaned annotations from span node\"), editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n              marks: marks.filter((mark) => !orphanedAnnotations.includes(mark))\n            }, {\n              at: path\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n        }\n      }\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];\n        for (const markDef of markDefs)\n          markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));\n        if (markDefs.length !== newMarkDefs.length) {\n          debug$e(\"Removing duplicate markDefs\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      if (editor.isTextBlock(node) && !editor.operations.some((op) => op.type === \"merge_node\" && \"markDefs\" in op.properties && op.path.length === 1)) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => node.children.find((child) => slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));\n        if (node.markDefs && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(newMarkDefs, node.markDefs)) {\n          debug$e(\"Removing markDef not in use\"), editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n      }\n      normalizeNode(nodeEntry);\n    }, editor.apply = (op) => {\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"set_selection\" && op.properties && op.newProperties && op.properties.anchor && op.properties.focus && op.newProperties.anchor && op.newProperties.focus) {\n        const previousSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed({\n          anchor: op.properties.anchor,\n          focus: op.properties.focus\n        }), newSelectionIsCollapsed = slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed({\n          anchor: op.newProperties.anchor,\n          focus: op.newProperties.focus\n        });\n        if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n          const focusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.properties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], newFocusSpan = Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: op.newProperties.focus,\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0]?.[0], movedToNextSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] + 1 && focusSpan.text.length === op.properties.focus.offset && op.newProperties.focus.offset === 0, movedToPreviousSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] - 1 && op.properties.focus.offset === 0 && newFocusSpan.text.length === op.newProperties.focus.offset;\n          !movedToNextSpan && !movedToPreviousSpan && (editor.decoratorState = {});\n        }\n      }\n      if (op.type === \"insert_node\") {\n        const {\n          selection\n        } = editor;\n        if (selection) {\n          const [_block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, selection, {\n            depth: 1\n          }), previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path\n          }), previousSpanAnnotations = previousSpan ? previousSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1]\n          }), nextSpanAnnotations = nextSpan ? nextSpan.marks?.filter((mark) => !decorators.includes(mark)) : [], annotationsEnding = previousSpanAnnotations?.filter((annotation) => !nextSpanAnnotations?.includes(annotation)) ?? [], atTheEndOfAnnotation = annotationsEnding.length > 0;\n          if (atTheEndOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsEnding.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: op.node.marks?.filter((mark) => !annotationsEnding.includes(mark)) ?? []\n            });\n            return;\n          }\n          const annotationsStarting = nextSpanAnnotations?.filter((annotation) => !previousSpanAnnotations?.includes(annotation)) ?? [], atTheStartOfAnnotation = annotationsStarting.length > 0;\n          if (atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark) => annotationsStarting.includes(mark))) {\n            slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: op.node.marks?.filter((mark) => !annotationsStarting.includes(mark)) ?? []\n            });\n            return;\n          }\n          const nextSpanDecorators = nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? [];\n          if (nextSpanDecorators.length > 0 && atTheEndOfAnnotation && !atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.length === 0) {\n            slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators\n            });\n            return;\n          }\n        }\n      }\n      if (op.type === \"insert_text\") {\n        const snapshot = getEditorSnapshot({\n          editorActorSnapshot: editorActor.getSnapshot(),\n          slateEditorInstance: editor\n        }), markState = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getMarkState)(snapshot);\n        if (!markState) {\n          apply2(op);\n          return;\n        }\n        if (markState.state === \"unchanged\") {\n          apply2(op);\n          return;\n        }\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, {\n          _type: \"span\",\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          text: op.text,\n          marks: markState.marks\n        });\n        return;\n      }\n      if (op.type === \"remove_text\") {\n        const {\n          selection\n        } = editor;\n        if (selection && slate__WEBPACK_IMPORTED_MODULE_16__.Range.isExpanded(selection)) {\n          const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, selection, {\n            depth: 1\n          }), [span, spanPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n            mode: \"lowest\",\n            at: {\n              path: op.path,\n              offset: op.offset\n            },\n            match: (n) => editor.isTextSpan(n),\n            voids: !1\n          }))[0] ?? [void 0, void 0];\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some((mark) => markDefs.find((markDef) => markDef._key === mark)), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), nextSpan = getNextSpan({\n              editor,\n              blockPath,\n              spanPath\n            }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some((mark) => !decorators.includes(mark) && marks.includes(mark)) : !1;\n            if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor\n              });\n              slate__WEBPACK_IMPORTED_MODULE_16__.Editor.withoutNormalizing(editor, () => {\n                apply2(op), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n                  marks: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getActiveDecorators)(snapshot)\n                }, {\n                  at: op.path\n                });\n              }), editor.onChange();\n              return;\n            }\n          }\n        }\n      }\n      if (op.type === \"merge_node\" && op.path.length === 1 && \"markDefs\" in op.properties && op.properties._type === editorActor.getSnapshot().context.schema.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {\n        const [targetBlock, targetPath] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, [op.path[0] - 1]);\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__([...oldDefs, ...op.properties.markDefs]);\n          debug$e(\"Copying markDefs over to merged block\", op), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n            markDefs: newMarkDefs\n          }, {\n            at: targetPath,\n            voids: !1\n          }), apply2(op);\n          return;\n        }\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst removeDecoratorOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor, mark = operation.decorator, {\n    selection\n  } = editor;\n  if (selection) {\n    if (slate__WEBPACK_IMPORTED_MODULE_16__.Range.isExpanded(selection))\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {}, {\n        match: slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText,\n        split: !0,\n        hanging: !0\n      }), editor.selection && [...slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText\n      })].forEach(([node, path]) => {\n        const block = editor.children[path[0]];\n        slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(block) && block.children.includes(node) && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n          marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark),\n          _type: \"span\"\n        }, {\n          at: path\n        });\n      });\n    else {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, selection, {\n        depth: 1\n      }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n      if (lonelyEmptySpan) {\n        const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter((existingMark) => existingMark !== mark);\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n          marks: existingMarksWithoutDecorator\n        }, {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node)\n        });\n      } else\n        editor.decoratorState[mark] = !1;\n    }\n    if (editor.selection) {\n      const selection2 = editor.selection;\n      editor.selection = {\n        ...selection2\n      };\n    }\n  }\n};\nfunction cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1) return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; ) text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); ) x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length) k1end += 2;\n      else if (y1 > text2Length) k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); ) x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length) k2end += 2;\n      else if (y2 > text2Length) k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {\n    checkLines: !1,\n    deadline\n  }), diffsb = doDiff(text1b, text2b, {\n    checkLines: !1,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0) return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2) return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch) throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++) text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) return [[DIFF_INSERT, text2]];\n  if (!text2) return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1) return diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1) return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b)) __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2) return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++) diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; ) switch (diffs[pointer][0]) {\n    case DIFF_INSERT:\n      countInsert++, textInsert += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_DELETE:\n      countDelete++, textDelete += diffs[pointer][1], pointer++;\n      break;\n    case DIFF_EQUAL:\n      countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n      break;\n    default:\n      throw new Error(\"Unknown diff operation\");\n  }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; ) diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; ) diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value\n}) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {})) __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b)) __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1) throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; ) getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc) start = Math.max(1, 2 * loc - bestLoc);\n        else break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++) s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null) throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern) return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++) lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\") throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\") return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) adjusted.push({\n    diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n    start1: advanceTo(patch.start1),\n    start2: advanceTo(patch.start2),\n    utf8Start1: patch.utf8Start1,\n    utf8Start2: patch.utf8Start2,\n    length1: patch.length1,\n    length2: patch.length2,\n    utf8Length1: patch.utf8Length1,\n    utf8Length2: patch.utf8Length2\n  });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) nullPadding += String.fromCharCode(x);\n  for (const p of patches) p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\") throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0) return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1) results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2) text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, {\n          checkLines: !1\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\") break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\") patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \") patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nconst CURRENT_UNDO_STEP = /* @__PURE__ */ new WeakMap();\nfunction withUndoStep(editor, fn) {\n  const current = CURRENT_UNDO_STEP.get(editor);\n  if (current) {\n    fn();\n    return;\n  }\n  CURRENT_UNDO_STEP.set(editor, current ?? {\n    undoStepId: defaultKeyGenerator()\n  }), fn(), CURRENT_UNDO_STEP.set(editor, void 0);\n}\nfunction getCurrentUndoStepId(editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId;\n}\nconst debug$d = debugWithName(\"plugin:withUndoRedo\"), SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor) => {\n  const state = SAVING.get(editor);\n  return state === void 0 ? !0 : state;\n}, getRemotePatches = (editor) => (REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);\nfunction createWithUndoRedo(options) {\n  const {\n    editorActor\n  } = options;\n  return (editor) => {\n    let previousSnapshot = fromSlateValue(editor.children, editorActor.getSnapshot().context.schema.block.name);\n    const remotePatches = getRemotePatches(editor);\n    let previousUndoStepId = getCurrentUndoStepId(editor);\n    options.subscriptions.push(() => {\n      debug$d(\"Subscribing to patches\");\n      const sub = editorActor.on(\"patches\", ({\n        patches,\n        snapshot\n      }) => {\n        let reset = !1;\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== \"local\" && remotePatches) {\n            if (patch.type === \"unset\" && patch.path.length === 0) {\n              debug$d(\"Someone else cleared the content, resetting undo/redo history\"), editor.history = {\n                undos: [],\n                redos: []\n              }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;\n              return;\n            }\n            remotePatches.push({\n              patch,\n              time: /* @__PURE__ */ new Date(),\n              snapshot,\n              previousSnapshot\n            });\n          }\n        }), previousSnapshot = snapshot;\n      });\n      return () => {\n        debug$d(\"Unsubscribing to patches\"), sub.unsubscribe();\n      };\n    }), editor.history = {\n      undos: [],\n      redos: []\n    };\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      const {\n        operations,\n        history\n      } = editor, {\n        undos\n      } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor), currentUndoStepId = getCurrentUndoStepId(editor);\n      let merge = currentUndoStepId === previousUndoStepId;\n      if (save) {\n        if (step ? operations.length === 0 && (merge = currentUndoStepId === void 0 && previousUndoStepId === void 0 ? shouldMerge(op, lastOp) || overwrite : merge) : merge = !1, step && merge)\n          step.operations.push(op);\n        else {\n          const newStep = {\n            operations: [...editor.selection === null ? [] : [createSelectOperation(editor)], op],\n            timestamp: /* @__PURE__ */ new Date()\n          };\n          undos.push(newStep), debug$d(\"Created new undo step\", step);\n        }\n        for (; undos.length > UNDO_STEP_LIMIT; )\n          undos.shift();\n        shouldClear(op) && (history.redos = []);\n      }\n      previousUndoStepId = currentUndoStepId, apply2(op);\n    }, editor;\n  };\n}\nconst historyUndoOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor, {\n    undos\n  } = editor.history, remotePatches = getRemotePatches(editor);\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1];\n    if (debug$d(\"Undoing\", step), step.operations.length > 0) {\n      const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n      let transformedOperations = step.operations;\n      otherPatches.forEach((item) => {\n        transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n      });\n      const reversedOperations = transformedOperations.map(slate__WEBPACK_IMPORTED_MODULE_16__.Operation.inverse).reverse();\n      try {\n        slate__WEBPACK_IMPORTED_MODULE_16__.Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op);\n              });\n            });\n          });\n        });\n      } catch (err) {\n        debug$d(\"Could not perform undo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(editor), editor.history = {\n          undos: [],\n          redos: []\n        }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();\n        return;\n      }\n      editor.history.redos.push(step), editor.history.undos.pop();\n    }\n  }\n}, historyRedoOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor, {\n    redos\n  } = editor.history, remotePatches = getRemotePatches(editor);\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1];\n    if (debug$d(\"Redoing\", step), step.operations.length > 0) {\n      const otherPatches = remotePatches.filter((item) => item.time >= step.timestamp);\n      let transformedOperations = step.operations;\n      otherPatches.forEach((item) => {\n        transformedOperations = lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__(transformedOperations.map((op) => transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));\n      });\n      try {\n        slate__WEBPACK_IMPORTED_MODULE_16__.Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op);\n              });\n            });\n          });\n        });\n      } catch (err) {\n        debug$d(\"Could not perform redo step\", err), remotePatches.splice(0, remotePatches.length), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(editor), editor.history = {\n          undos: [],\n          redos: []\n        }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();\n        return;\n      }\n      editor.history.undos.push(step), editor.history.redos.pop();\n    }\n  }\n};\nfunction transformOperation(editor, patch, operation, snapshot, previousSnapshot) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (patch.type === \"insert\" && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n      _key: blk._key\n    }, patch.path[0]));\n    return debug$d(`Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`), [adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n      _key: blk._key\n    }, patch.path[0]));\n    return \"path\" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$d(\"Skipping transformation that targeted removed block\"), []) : [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)];\n  }\n  if (patch.type === \"unset\" && patch.path.length === 0)\n    return debug$d(`Adjusting selection for unset everything patch and ${operation.type} operation`), [];\n  if (patch.type === \"diffMatchPatch\") {\n    const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation);\n    return !operationTargetBlock || !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__({\n      _key: operationTargetBlock._key\n    }, patch.path[0]) ? [transformedOperation] : (parse(patch.value).forEach((diffPatch) => {\n      let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;\n      const {\n        diffs\n      } = diffPatch;\n      if (diffs.forEach((diff2, index) => {\n        const [diffType, text] = diff2;\n        diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL) || (changedOffset += text.length));\n      }), transformedOperation.type === \"insert_text\" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"remove_text\" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === \"set_selection\") {\n        const currentFocus = transformedOperation.properties?.focus ? {\n          ...transformedOperation.properties.focus\n        } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n          ...transformedOperation.properties.anchor\n        } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n          ...transformedOperation.newProperties.focus\n        } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n          ...transformedOperation.newProperties.anchor\n        } : void 0;\n        (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n          point && changedOffset < point.offset && (point.offset += adjustOffsetBy);\n        }), currentFocus && currentAnchor && (transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor\n        }), newFocus && newAnchor && (transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor\n        }));\n      }\n    }), [transformedOperation]);\n  }\n  return [transformedOperation];\n}\nfunction adjustBlockPath(operation, level, blockIndex) {\n  const transformedOperation = {\n    ...operation\n  };\n  if (blockIndex >= 0 && transformedOperation.type !== \"set_selection\" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {\n    const newPath = [transformedOperation.path[0] + level, ...transformedOperation.path.slice(1)];\n    transformedOperation.path = newPath;\n  }\n  if (transformedOperation.type === \"set_selection\") {\n    const currentFocus = transformedOperation.properties?.focus ? {\n      ...transformedOperation.properties.focus\n    } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {\n      ...transformedOperation.properties.anchor\n    } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {\n      ...transformedOperation.newProperties.focus\n    } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {\n      ...transformedOperation.newProperties.anchor\n    } : void 0;\n    (currentFocus && currentAnchor || newFocus && newAnchor) && ([currentFocus, currentAnchor, newFocus, newAnchor].forEach((point) => {\n      point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [point.path[0] + level, ...point.path.slice(1)]);\n    }), currentFocus && currentAnchor && (transformedOperation.properties = {\n      focus: currentFocus,\n      anchor: currentAnchor\n    }), newFocus && newAnchor && (transformedOperation.newProperties = {\n      focus: newFocus,\n      anchor: newAnchor\n    }));\n  }\n  return transformedOperation;\n}\nconst shouldMerge = (op, prev) => !!(op.type === \"set_selection\" || prev && op.type === \"insert_text\" && prev.type === \"insert_text\" && op.offset === prev.offset + prev.text.length && slate__WEBPACK_IMPORTED_MODULE_16__.Path.equals(op.path, prev.path) && op.text !== \" \" || prev && op.type === \"remove_text\" && prev.type === \"remove_text\" && op.offset + op.text.length === prev.offset && slate__WEBPACK_IMPORTED_MODULE_16__.Path.equals(op.path, prev.path)), shouldOverwrite = (op, prev) => !!(prev && op.type === \"set_selection\" && prev.type === \"set_selection\"), shouldClear = (op) => op.type !== \"set_selection\";\nfunction withoutSaving(editor, fn) {\n  const prev = isSaving(editor);\n  SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);\n}\nfunction createSelectOperation(editor) {\n  return {\n    type: \"set_selection\",\n    properties: {\n      ...editor.selection\n    },\n    newProperties: {\n      ...editor.selection\n    }\n  };\n}\nfunction findOperationTargetBlock(editor, operation) {\n  let block;\n  return operation.type === \"set_selection\" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : \"path\" in operation && (block = editor.children[operation.path[0]]), block;\n}\nconst addAnnotationOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const parsedAnnotation = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseAnnotation)({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value\n    },\n    context,\n    options: {\n      refreshKeys: !1,\n      validateFields: !0\n    }\n  });\n  if (!parsedAnnotation)\n    throw new Error(`Failed to parse annotation ${JSON.stringify(operation.annotation)}`);\n  const editor = operation.editor;\n  if (!editor.selection || slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed(editor.selection))\n    return;\n  let paths, spanPath, markDefPath;\n  const markDefPaths = [], selectedBlocks = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: slate__WEBPACK_IMPORTED_MODULE_16__.Range.isBackward(editor.selection)\n  });\n  let blockIndex = 0;\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === \"\")\n      continue;\n    const annotationKey = blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator(), markDefs = block.markDefs ?? [];\n    markDefs.find((markDef) => markDef._type === parsedAnnotation._type && markDef._key === annotationKey) === void 0 && (slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n      markDefs: [...markDefs, {\n        ...parsedAnnotation,\n        _key: annotationKey\n      }]\n    }, {\n      at: blockPath\n    }), markDefPath = [{\n      _key: block._key\n    }, \"markDefs\", {\n      _key: annotationKey\n    }], slate__WEBPACK_IMPORTED_MODULE_16__.Range.isBackward(editor.selection) ? markDefPaths.unshift(markDefPath) : markDefPaths.push(markDefPath)), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {}, {\n      match: slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText,\n      split: !0\n    });\n    const children = slate__WEBPACK_IMPORTED_MODULE_16__.Node.children(editor, blockPath);\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span) || !slate__WEBPACK_IMPORTED_MODULE_16__.Range.includes(editor.selection, path))\n        continue;\n      const marks = span.marks ?? [], existingSameTypeAnnotations = marks.filter((mark) => markDefs.some((markDef) => markDef._key === mark && markDef._type === parsedAnnotation._type));\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n        marks: [...marks.filter((mark) => !existingSameTypeAnnotations.includes(mark)), annotationKey]\n      }, {\n        at: path\n      }), spanPath = [{\n        _key: block._key\n      }, \"children\", {\n        _key: span._key\n      }];\n    }\n    blockIndex++;\n  }\n  return markDefPath && spanPath && (paths = {\n    markDefPath,\n    markDefPaths,\n    spanPath\n  }), paths;\n}, removeAnnotationOperationImplementation = ({\n  operation\n}) => {\n  const editor = operation.editor;\n  if (editor.selection)\n    if (slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed(editor.selection)) {\n      const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, editor.selection, {\n        depth: 1\n      });\n      if (!editor.isTextBlock(block))\n        return;\n      const potentialAnnotations = (block.markDefs ?? []).filter((markDef) => markDef._type === operation.annotation.name), [selectedChild, selectedChildPath] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, editor.selection, {\n        depth: 2\n      });\n      if (!editor.isTextSpan(selectedChild))\n        return;\n      const annotationToRemove = selectedChild.marks?.find((mark) => potentialAnnotations.some((markDef) => markDef._key === mark));\n      if (!annotationToRemove)\n        return;\n      const previousSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_16__.Node.children(editor, blockPath, {\n        reverse: !0\n      }))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_16__.Path.isBefore(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            previousSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      const nextSpansWithSameAnnotation = [];\n      for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_16__.Node.children(editor, blockPath))\n        if (editor.isTextSpan(child) && slate__WEBPACK_IMPORTED_MODULE_16__.Path.isAfter(childPath, selectedChildPath))\n          if (child.marks?.includes(annotationToRemove))\n            nextSpansWithSameAnnotation.push([child, childPath]);\n          else\n            break;\n      for (const [child, childPath] of [...previousSpansWithSameAnnotation, [selectedChild, selectedChildPath], ...nextSpansWithSameAnnotation])\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove)\n        }, {\n          at: childPath\n        });\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {}, {\n        match: (node) => editor.isTextSpan(node),\n        split: !0,\n        hanging: !0\n      });\n      const blocks = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => editor.isTextBlock(node)\n      });\n      for (const [block, blockPath] of blocks) {\n        const children = slate__WEBPACK_IMPORTED_MODULE_16__.Node.children(editor, blockPath);\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child) || !slate__WEBPACK_IMPORTED_MODULE_16__.Range.includes(editor.selection, childPath))\n            continue;\n          const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark) => markDefs.find((markDef2) => markDef2._key === mark)?._type !== operation.annotation.name);\n          marksWithoutAnnotation.length !== marks.length && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n            marks: marksWithoutAnnotation\n          }, {\n            at: childPath\n          });\n        }\n      }\n    }\n}, blockSetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const block = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(operation.editor, location, {\n    depth: 1\n  })?.[0];\n  if (!block)\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`);\n  const parsedBlock = fromSlateValue([block], context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(operation.editor)).at(0);\n  if (!parsedBlock)\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`);\n  const {\n    _type,\n    ...filteredProps\n  } = operation.props, updatedBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseBlock)({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps\n    },\n    options: {\n      refreshKeys: !1,\n      validateFields: !0\n    }\n  });\n  if (!updatedBlock)\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`);\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema\n  })?.at(0);\n  if (!slateBlock)\n    throw new Error(\"Unable to convert block to Slate value\");\n  slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(operation.editor, slateBlock, {\n    at: location\n  });\n}, blockUnsetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const block = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(operation.editor, location, {\n    depth: 1\n  })?.[0];\n  if (!block)\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`);\n  const parsedBlock = fromSlateValue([block], context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(operation.editor)).at(0);\n  if (!parsedBlock)\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`);\n  if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== \"_type\"), updatedTextBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseBlock)({\n      context,\n      block: lodash_omit_js__WEBPACK_IMPORTED_MODULE_8__(parsedBlock, propsToRemove),\n      options: {\n        refreshKeys: !1,\n        validateFields: !0\n      }\n    });\n    if (!updatedTextBlock)\n      throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`);\n    const propsToSet = {};\n    for (const prop of propsToRemove)\n      prop in updatedTextBlock ? propsToSet[prop] = updatedTextBlock[prop] : propsToSet[prop] = void 0;\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(operation.editor, propsToSet, {\n      at: location\n    });\n    return;\n  }\n  const updatedBlockObject = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseBlock)({\n    context,\n    block: lodash_omit_js__WEBPACK_IMPORTED_MODULE_8__(parsedBlock, operation.props.filter((prop) => prop !== \"_type\")),\n    options: {\n      refreshKeys: !1,\n      validateFields: !0\n    }\n  });\n  if (!updatedBlockObject)\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`);\n  const {\n    _type,\n    _key,\n    ...props\n  } = updatedBlockObject;\n  slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(operation.editor, {\n    _type,\n    _key,\n    value: props\n  }, {\n    at: location\n  });\n}, childSetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const childEntry = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(operation.editor, location, {\n    depth: 2\n  }), child = childEntry?.[0], childPath = childEntry?.[1];\n  if (!child || !childPath)\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`);\n  if (operation.editor.isTextSpan(child)) {\n    const {\n      _type,\n      text,\n      ...rest\n    } = operation.props;\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(operation.editor, {\n      ...child,\n      ...rest\n    }, {\n      at: childPath\n    }), typeof text == \"string\" && child.text !== text && (operation.editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset: 0,\n      text: child.text\n    }), operation.editor.apply({\n      type: \"insert_text\",\n      path: childPath,\n      offset: 0,\n      text\n    }));\n    return;\n  }\n  if (slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(child)) {\n    const definition = context.schema.inlineObjects.find((definition2) => definition2.name === child._type);\n    if (!definition)\n      throw new Error(`Unable to find schema definition for Inline Object type ${child._type}`);\n    const value = \"value\" in child && typeof child.value == \"object\" ? child.value : {}, {\n      _type,\n      _key,\n      ...rest\n    } = operation.props;\n    for (const prop in rest)\n      definition.fields.some((field) => field.name === prop) || delete rest[prop];\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(operation.editor, {\n      ...child,\n      _key: typeof _key == \"string\" ? _key : child._key,\n      value: {\n        ...value,\n        ...rest\n      }\n    }, {\n      at: childPath\n    });\n    return;\n  }\n  throw new Error(`Unable to determine the type of child at ${JSON.stringify(operation.at)}`);\n}, childUnsetOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {\n          path: operation.at,\n          offset: 0\n        },\n        focus: {\n          path: operation.at,\n          offset: 0\n        }\n      }\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!location)\n    throw new Error(`Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`);\n  const childEntry = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(operation.editor, location, {\n    depth: 2\n  }), child = childEntry?.[0], childPath = childEntry?.[1];\n  if (!child || !childPath)\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`);\n  if (operation.editor.isTextSpan(child)) {\n    operation.props.includes(\"text\") && operation.editor.apply({\n      type: \"remove_text\",\n      path: childPath,\n      offset: 0,\n      text: child.text\n    });\n    const newNode = {};\n    for (const prop of operation.props)\n      if (prop !== \"_type\") {\n        if (prop === \"_key\") {\n          newNode._key = context.keyGenerator();\n          continue;\n        }\n        newNode[prop] = null;\n      }\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(operation.editor, newNode, {\n      at: childPath\n    });\n    return;\n  }\n  if (slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(child)) {\n    const value = \"value\" in child && typeof child.value == \"object\" ? child.value : {}, patches = operation.props.map((prop) => ({\n      type: \"unset\",\n      path: [prop]\n    })), newValue = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.applyAll)(value, patches);\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(operation.editor, {\n      ...child,\n      _key: operation.props.includes(\"_key\") ? context.keyGenerator() : child._key,\n      value: newValue\n    }, {\n      at: childPath\n    });\n    return;\n  }\n  throw new Error(`Unable to determine the type of child at ${JSON.stringify(operation.at)}`);\n}, decoratorAddOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const editor = operation.editor, mark = operation.decorator, value = fromSlateValue(editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), manualAnchor = operation.at?.anchor ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.blockOffsetToSpanSelectionPoint)({\n    context: {\n      ...context,\n      value\n    },\n    blockOffset: operation.at.anchor,\n    direction: \"backward\"\n  }) : void 0, manualFocus = operation.at?.focus ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.blockOffsetToSpanSelectionPoint)({\n    context: {\n      ...context,\n      value\n    },\n    blockOffset: operation.at.focus,\n    direction: \"forward\"\n  }) : void 0, manualSelection = manualAnchor && manualFocus ? {\n    anchor: manualAnchor,\n    focus: manualFocus\n  } : void 0, selection = manualSelection ? toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: manualSelection\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  }) ?? editor.selection : editor.selection;\n  if (!selection)\n    return;\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection\n  }), anchorOffset = editorSelection ? (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_30__.selectionPointToBlockOffset)({\n    context: {\n      ...context,\n      value\n    },\n    selectionPoint: editorSelection.anchor\n  }) : void 0, focusOffset = editorSelection ? (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_30__.selectionPointToBlockOffset)({\n    context: {\n      ...context,\n      value\n    },\n    selectionPoint: editorSelection.focus\n  }) : void 0;\n  if (!anchorOffset || !focusOffset)\n    throw new Error(\"Unable to find anchor or focus offset\");\n  if (slate__WEBPACK_IMPORTED_MODULE_16__.Range.isExpanded(selection)) {\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {}, {\n      at: selection,\n      match: slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText,\n      split: !0,\n      hanging: !0\n    });\n    const newValue = fromSlateValue(editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), newSelection = (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_31__.blockOffsetsToSelection)({\n      context: {\n        ...context,\n        value: newValue\n      },\n      offsets: {\n        anchor: anchorOffset,\n        focus: focusOffset\n      },\n      backward: editorSelection?.backward\n    }), trimmedSelection = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getTrimmedSelection)({\n      blockIndexMap: editor.blockIndexMap,\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: !1,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue\n      },\n      decoratorState: editor.decoratorState\n    });\n    if (!trimmedSelection)\n      throw new Error(\"Unable to find trimmed selection\");\n    const newRange = toSlateRange({\n      context: {\n        schema: context.schema,\n        value: operation.editor.value,\n        selection: trimmedSelection\n      },\n      blockIndexMap: operation.editor.blockIndexMap\n    });\n    if (!newRange)\n      throw new Error(\"Unable to find new selection\");\n    const splitTextNodes = slate__WEBPACK_IMPORTED_MODULE_16__.Range.isRange(newRange) ? [...slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n      at: newRange,\n      match: (node) => slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(node)\n    })] : [];\n    for (const [node, path] of splitTextNodes) {\n      const marks = [...(Array.isArray(node.marks) ? node.marks : []).filter((eMark) => eMark !== mark), mark];\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n        marks\n      }, {\n        at: path,\n        match: slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText,\n        split: !0,\n        hanging: !0\n      });\n    }\n  } else {\n    if (!Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n      at: selection,\n      match: (node) => editor.isTextSpan(node)\n    }))?.at(0))\n      return;\n    const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, selection, {\n      depth: 1\n    }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === \"\" ? block.children[0] : void 0;\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter((existingMark) => existingMark !== mark);\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n        marks: existingMarks.length === existingMarksWithoutDecorator.length ? [...existingMarks, mark] : existingMarksWithoutDecorator\n      }, {\n        at: blockPath,\n        match: (node) => editor.isTextSpan(node)\n      });\n    } else\n      editor.decoratorState[mark] = !0;\n  }\n  if (editor.selection) {\n    const selection2 = editor.selection;\n    editor.selection = {\n      ...selection2\n    };\n  }\n}, deleteOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const anchorBlockKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockKeyFromSelectionPoint)(operation.at.anchor), focusBlockKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockKeyFromSelectionPoint)(operation.at.focus), endBlockKey = operation.at.backward ? anchorBlockKey : focusBlockKey, endOffset = operation.at.backward ? operation.at.focus.offset : operation.at.anchor.offset;\n  if (!endBlockKey)\n    throw new Error(\"Failed to get end block key\");\n  const endBlockIndex = operation.editor.blockIndexMap.get(endBlockKey);\n  if (endBlockIndex === void 0)\n    throw new Error(\"Failed to get end block index\");\n  const endBlock = operation.editor.value.at(endBlockIndex);\n  if (!endBlock)\n    throw new Error(\"Failed to get end block\");\n  const anchorBlockPath = anchorBlockKey !== void 0 ? getBlockPath({\n    editor: operation.editor,\n    _key: anchorBlockKey\n  }) : void 0, focusBlockPath = focusBlockKey !== void 0 ? getBlockPath({\n    editor: operation.editor,\n    _key: focusBlockKey\n  }) : void 0;\n  if (operation.at.anchor.path.length === 1 && operation.at.focus.path.length === 1 && anchorBlockPath && focusBlockPath && anchorBlockPath[0] === focusBlockPath[0]) {\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(operation.editor, {\n      at: [anchorBlockPath[0]]\n    }), operation.editor.children.length === 0 && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(operation.editor, createPlaceholderBlock(context));\n    return;\n  }\n  const range = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  if (!range)\n    throw new Error(`Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`);\n  const hanging = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(context, endBlock) && endOffset === 0;\n  operation.editor.delete({\n    at: range,\n    reverse: operation.direction === \"backward\",\n    unit: operation.unit,\n    hanging\n  });\n}, insertInlineObjectOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const parsedInlineObject = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseInlineObject)({\n    context,\n    inlineObject: {\n      _type: operation.inlineObject.name,\n      ...operation.inlineObject.value ?? {}\n    },\n    options: {\n      refreshKeys: !1,\n      validateFields: !0\n    }\n  });\n  if (!parsedInlineObject)\n    throw new Error(`Failed to parse inline object ${JSON.stringify(operation.inlineObject)}`);\n  if (!operation.editor.selection) {\n    console.error(\"Unable to insert inline object without selection\");\n    return;\n  }\n  const [focusTextBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(operation.editor, {\n    at: operation.editor.selection.focus.path,\n    match: (node) => operation.editor.isTextBlock(node)\n  })).at(0) ?? [void 0, void 0];\n  if (!focusTextBlock) {\n    console.error(\"Unable to perform action without focus text block\");\n    return;\n  }\n  const child = toSlateValue([{\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    children: [parsedInlineObject]\n  }], {\n    schemaTypes: context.schema\n  }).at(0)?.children.at(0);\n  if (!child) {\n    console.error(\"Unable to insert inline object\");\n    return;\n  }\n  slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(operation.editor, child);\n}, insertSpanOperationImplementation = ({\n  context,\n  operation\n}) => {\n  if (!operation.editor.selection) {\n    console.error(\"Unable to perform action without selection\", operation);\n    return;\n  }\n  const [focusBlock, focusBlockPath] = Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(operation.editor, {\n    at: operation.editor.selection.focus.path,\n    match: (node) => operation.editor.isTextBlock(node)\n  }))[0] ?? [void 0, void 0];\n  if (!focusBlock || !focusBlockPath) {\n    console.error(\"Unable to perform action without focus block\", operation);\n    return;\n  }\n  const markDefs = focusBlock.markDefs ?? [], annotations = operation.annotations ? operation.annotations.map((annotation) => ({\n    _type: annotation.name,\n    _key: context.keyGenerator(),\n    ...annotation.value\n  })) : void 0;\n  annotations && annotations.length > 0 && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(operation.editor, {\n    markDefs: [...markDefs, ...annotations]\n  }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(operation.editor, {\n    _type: \"span\",\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...annotations?.map((annotation) => annotation._key) ?? [], ...operation.decorators ?? []]\n  });\n}, insertBlockOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const parsedBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseBlock)({\n    block: operation.block,\n    context,\n    options: {\n      refreshKeys: !1,\n      validateFields: !0\n    }\n  });\n  if (!parsedBlock)\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`);\n  const fragment = toSlateValue([parsedBlock], {\n    schemaTypes: context.schema\n  })[0];\n  if (!fragment)\n    throw new Error(`Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`);\n  insertBlock({\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? \"start\",\n    editor: operation.editor,\n    schema: context.schema\n  });\n};\nfunction insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({\n    editor\n  }), [endBlock, endBlockPath] = getSelectionEndBlock({\n    editor\n  });\n  if (!editor.selection || !startBlock || !startBlockPath || !endBlock || !endBlockPath) {\n    select !== \"none\" && slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.focus(editor);\n    const [lastBlock, lastBlockPath] = getLastBlock({\n      editor\n    });\n    if (placement === \"before\")\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n        at: [0]\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, [0])) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, [0]));\n    else if (placement === \"after\") {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0];\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n        at: nextPath\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, nextPath));\n    } else {\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n          at: lastBlockPath\n        }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: !1\n        }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(editor), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, lastBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, lastBlockPath));\n        return;\n      }\n      if (editor.isTextBlock(block) && lastBlock && editor.isTextBlock(lastBlock)) {\n        const selectionBefore = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, lastBlockPath);\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertFragment(editor, [block], {\n          at: slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, lastBlockPath)\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, selectionBefore) : select === \"none\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(editor);\n        return;\n      }\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0];\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: !1\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, nextPath));\n    }\n  } else if (placement === \"before\") {\n    const currentSelection = editor.selection, selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_16__.Range.start(currentSelection);\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n      at: [selectionStartPoint.path[0]],\n      select: !1\n    }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, [selectionStartPoint.path[0]])) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, [selectionStartPoint.path[0]]));\n  } else if (placement === \"after\") {\n    const currentSelection = editor.selection, nextPath = [slate__WEBPACK_IMPORTED_MODULE_16__.Range.end(currentSelection).path[0] + 1];\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n      at: nextPath,\n      select: !1\n    }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, nextPath));\n  } else {\n    const currentSelection = editor.selection, endBlockEndPoint = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, endBlockPath);\n    if (slate__WEBPACK_IMPORTED_MODULE_16__.Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.delete(editor, {\n        at: currentSelection\n      });\n      const newSelection = editor.selection, [focusBlock, focusBlockPath] = getFocusBlock({\n        editor\n      });\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n        voids: !0\n      });\n      const adjustedSelection = newSelection.anchor.offset === 0 ? slate__WEBPACK_IMPORTED_MODULE_16__.Range.transform(newSelection, {\n        type: \"insert_node\",\n        node: block,\n        path: [newSelection.anchor.path[0]]\n      }) : newSelection;\n      select === \"none\" && adjustedSelection && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, adjustedSelection), focusBlock && isEqualToEmptyEditor([focusBlock], schema) && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n        at: focusBlockPath\n      });\n      return;\n    }\n    if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n      const selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_16__.Range.start(currentSelection);\n      if (isEqualToEmptyEditor([endBlock], schema)) {\n        const currentSelection2 = editor.selection;\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n          at: endBlockPath,\n          select: !1\n        }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n          at: slate__WEBPACK_IMPORTED_MODULE_16__.Path.next(endBlockPath)\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, selectionStartPoint) : select === \"end\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, endBlockPath)) : slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, currentSelection2);\n        return;\n      }\n      if (slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n        markDefs: [...endBlock.markDefs ?? [], ...block.markDefs ?? []]\n      }, {\n        at: endBlockPath\n      }), select === \"end\") {\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertFragment(editor, [block], {\n          voids: !0\n        });\n        return;\n      }\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertFragment(editor, [block], {\n        at: currentSelection,\n        voids: !0\n      }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, selectionStartPoint) : slate__WEBPACK_IMPORTED_MODULE_16__.Point.equals(selectionStartPoint, endBlockEndPoint) || slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, selectionStartPoint);\n    } else if (editor.isTextBlock(endBlock)) {\n      const endBlockStartPoint = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, endBlockPath), endBlockEndPoint2 = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, endBlockPath), selectionStartPoint = slate__WEBPACK_IMPORTED_MODULE_16__.Range.start(currentSelection), selectionEndPoint = slate__WEBPACK_IMPORTED_MODULE_16__.Range.end(currentSelection);\n      if (slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_16__.Point.equals(selectionStartPoint, endBlockStartPoint))\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n          at: endBlockPath,\n          select: !1\n        }), (select === \"start\" || select === \"end\") && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, endBlockPath)), (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEmptyTextBlock)({\n          schema\n        }, endBlock) && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n          at: slate__WEBPACK_IMPORTED_MODULE_16__.Path.next(endBlockPath)\n        });\n      else if (slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_16__.Point.equals(selectionEndPoint, endBlockEndPoint2)) {\n        const nextPath = [endBlockPath[0] + 1];\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n          at: nextPath,\n          select: !1\n        }), (select === \"start\" || select === \"end\") && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, nextPath));\n      } else if (slate__WEBPACK_IMPORTED_MODULE_16__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_16__.Point.equals(selectionStartPoint, endBlockStartPoint) && slate__WEBPACK_IMPORTED_MODULE_16__.Point.equals(selectionEndPoint, endBlockEndPoint2))\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, endBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, endBlockPath));\n      else if (slate__WEBPACK_IMPORTED_MODULE_16__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_16__.Point.equals(selectionStartPoint, endBlockStartPoint))\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, endBlockPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, endBlockPath));\n      else if (slate__WEBPACK_IMPORTED_MODULE_16__.Range.isExpanded(currentSelection) && slate__WEBPACK_IMPORTED_MODULE_16__.Point.equals(selectionEndPoint, endBlockEndPoint2))\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertFragment(editor, [block], {\n          at: currentSelection\n        }), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Path.next(endBlockPath))) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Path.next(endBlockPath)));\n      else {\n        const currentSelection2 = editor.selection, [focusChild] = getFocusChild({\n          editor\n        });\n        if (focusChild && editor.isTextSpan(focusChild))\n          slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.splitNodes(editor, {\n            at: currentSelection2\n          }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertFragment(editor, [block], {\n            at: currentSelection2\n          }), select === \"start\" || select === \"end\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, [endBlockPath[0] + 1]) : slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, currentSelection2);\n        else {\n          const nextPath = [endBlockPath[0] + 1];\n          slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n            at: nextPath,\n            select: !1\n          }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, currentSelection2), select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, nextPath));\n        }\n      }\n    } else {\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, [block], {\n        select: !1\n      });\n      const nextPath = [endBlockPath[0] + 1];\n      select === \"start\" ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(editor, nextPath)) : select === \"end\" && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.end(editor, nextPath));\n    }\n  }\n}\nconst moveBackwardOperationImplementation = ({\n  operation\n}) => {\n  slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.move(operation.editor, {\n    unit: \"character\",\n    distance: operation.distance,\n    reverse: !0\n  });\n}, moveBlockOperationImplementation = ({\n  operation\n}) => {\n  const originKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockKeyFromSelectionPoint)({\n    path: operation.at\n  });\n  if (!originKey)\n    throw new Error(\"Failed to get block key from selection point\");\n  const originBlockIndex = operation.editor.blockIndexMap.get(originKey);\n  if (originBlockIndex === void 0)\n    throw new Error(\"Failed to get block index from block key\");\n  const destinationKey = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockKeyFromSelectionPoint)({\n    path: operation.to\n  });\n  if (!destinationKey)\n    throw new Error(\"Failed to get block key from selection point\");\n  const destinationBlockIndex = operation.editor.blockIndexMap.get(destinationKey);\n  if (destinationBlockIndex === void 0)\n    throw new Error(\"Failed to get block index from block key\");\n  slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.moveNodes(operation.editor, {\n    at: [originBlockIndex],\n    to: [destinationBlockIndex],\n    mode: \"highest\"\n  });\n}, moveForwardOperationImplementation = ({\n  operation\n}) => {\n  slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.move(operation.editor, {\n    unit: \"character\",\n    distance: operation.distance\n  });\n}, selectOperationImplementation = ({\n  context,\n  operation\n}) => {\n  const newSelection = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at\n    },\n    blockIndexMap: operation.editor.blockIndexMap\n  });\n  newSelection ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(operation.editor, newSelection) : slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(operation.editor);\n}, behaviorOperationImplementations = {\n  \"annotation.add\": addAnnotationOperationImplementation,\n  \"annotation.remove\": removeAnnotationOperationImplementation,\n  \"block.set\": blockSetOperationImplementation,\n  \"block.unset\": blockUnsetOperationImplementation,\n  \"child.set\": childSetOperationImplementation,\n  \"child.unset\": childUnsetOperationImplementation,\n  \"decorator.add\": decoratorAddOperationImplementation,\n  \"decorator.remove\": removeDecoratorOperationImplementation,\n  delete: deleteOperationImplementation,\n  \"history.redo\": historyRedoOperationImplementation,\n  \"history.undo\": historyUndoOperationImplementation,\n  \"insert.block\": insertBlockOperationImplementation,\n  \"insert.inline object\": insertInlineObjectOperationImplementation,\n  \"insert.span\": insertSpanOperationImplementation,\n  \"insert.text\": insertTextOperationImplementation,\n  \"move.backward\": moveBackwardOperationImplementation,\n  \"move.block\": moveBlockOperationImplementation,\n  \"move.forward\": moveForwardOperationImplementation,\n  select: selectOperationImplementation\n};\nfunction performOperation({\n  context,\n  operation\n}) {\n  try {\n    switch (operation.type) {\n      case \"annotation.add\": {\n        behaviorOperationImplementations[\"annotation.add\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"annotation.remove\": {\n        behaviorOperationImplementations[\"annotation.remove\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"block.set\": {\n        behaviorOperationImplementations[\"block.set\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"block.unset\": {\n        behaviorOperationImplementations[\"block.unset\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"child.set\": {\n        behaviorOperationImplementations[\"child.set\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"child.unset\": {\n        behaviorOperationImplementations[\"child.unset\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"decorator.add\": {\n        behaviorOperationImplementations[\"decorator.add\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"decorator.remove\": {\n        behaviorOperationImplementations[\"decorator.remove\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"delete\": {\n        behaviorOperationImplementations.delete({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"history.redo\": {\n        behaviorOperationImplementations[\"history.redo\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"history.undo\": {\n        behaviorOperationImplementations[\"history.undo\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"insert.block\": {\n        behaviorOperationImplementations[\"insert.block\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"insert.inline object\": {\n        behaviorOperationImplementations[\"insert.inline object\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"insert.span\": {\n        behaviorOperationImplementations[\"insert.span\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"insert.text\": {\n        behaviorOperationImplementations[\"insert.text\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"move.backward\": {\n        behaviorOperationImplementations[\"move.backward\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"move.block\": {\n        behaviorOperationImplementations[\"move.block\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      case \"move.forward\": {\n        behaviorOperationImplementations[\"move.forward\"]({\n          context,\n          operation\n        });\n        break;\n      }\n      default: {\n        behaviorOperationImplementations.select({\n          context,\n          operation\n        });\n        break;\n      }\n    }\n  } catch (error) {\n    console.error(new Error(`Executing \"${operation.type}\" failed due to: ${error.message}`));\n  }\n}\nconst CURRENT_OPERATION_ID = /* @__PURE__ */ new WeakMap();\nfunction withApplyingBehaviorOperations(editor, fn) {\n  CURRENT_OPERATION_ID.set(editor, defaultKeyGenerator()), slate__WEBPACK_IMPORTED_MODULE_16__.Editor.withoutNormalizing(editor, fn), CURRENT_OPERATION_ID.set(editor, void 0);\n}\nfunction getCurrentOperationId(editor) {\n  return CURRENT_OPERATION_ID.get(editor);\n}\nfunction isApplyingBehaviorOperations(editor) {\n  return getCurrentOperationId(editor) !== void 0;\n}\nfunction createWithEventListeners(editorActor) {\n  return function(editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== void 0)\n      return editor;\n    const {\n      delete: editorDelete,\n      select\n    } = editor;\n    return editor.delete = (options) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        editorDelete(options);\n        return;\n      }\n      const at = options?.at ?? editor.selection;\n      if (!at) {\n        console.error(\"Unexpected call to .delete(...) without `at` option\");\n        return;\n      }\n      const range = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.range(editor, at), selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range\n      });\n      if (!selection) {\n        console.error(\"Unexpected call to .delete(...) with invalid `at` option\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete\",\n          at: selection,\n          direction: options?.reverse ? \"backward\" : \"forward\",\n          unit: options?.unit\n        },\n        editor\n      });\n    }, editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error(\"Unexpected call to .deleteBackward(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.backward\",\n          unit\n        },\n        editor\n      });\n    }, editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error(\"Unexpected call to .deleteForward(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"delete.forward\",\n          unit\n        },\n        editor\n      });\n    }, editor.insertBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error(\"Unexpected call to .insertBreak(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.break\"\n        },\n        editor\n      });\n    }, editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        console.error(\"Unexpected call to .insertData(...)\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"input.*\",\n          originEvent: {\n            dataTransfer\n          }\n        },\n        editor\n      });\n    }, editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            text: `\n`,\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.soft break\"\n        },\n        editor\n      });\n    }, editor.insertText = (text) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        insertTextOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            text,\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"insert.text\",\n          text\n        },\n        editor\n      });\n    }, editor.redo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            type: \"history.redo\",\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.redo\"\n        },\n        editor\n      });\n    }, editor.select = (location) => {\n      if (isApplyingBehaviorOperations(editor)) {\n        select(location);\n        return;\n      }\n      const range = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.range(editor, location);\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"select\",\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range\n          })\n        },\n        editor\n      });\n    }, editor.setFragmentData = () => {\n      console.error(\"Unexpected call to .setFragmentData(...)\");\n    }, editor.undo = () => {\n      if (isApplyingBehaviorOperations(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema\n          },\n          operation: {\n            type: \"history.undo\",\n            editor\n          }\n        });\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.undo\"\n        },\n        editor\n      });\n    }, editor;\n  };\n}\nfunction createWithMaxBlocks(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(operation);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1;\n      rows > 0 && editor.children.length >= rows && (operation.type === \"insert_node\" || operation.type === \"split_node\") && operation.path.length === 1 || apply2(operation);\n    }, editor;\n  };\n}\nfunction createWithObjectKeys(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2,\n      normalizeNode\n    } = editor;\n    return editor.apply = (operation) => {\n      if (isChangingRemotely(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(operation);\n        return;\n      }\n      if (operation.type === \"split_node\") {\n        const existingKeys = [...slate__WEBPACK_IMPORTED_MODULE_16__.Node.descendants(editor)].map(([node]) => node._key);\n        apply2({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: operation.properties._key === void 0 || existingKeys.includes(operation.properties._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.properties._key\n          }\n        });\n        return;\n      }\n      if (operation.type === \"insert_node\" && !slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(operation.node)) {\n        const existingKeys = [...slate__WEBPACK_IMPORTED_MODULE_16__.Node.descendants(editor)].map(([node]) => node._key);\n        apply2({\n          ...operation,\n          node: {\n            ...operation.node,\n            _key: operation.node._key === void 0 || existingKeys.includes(operation.node._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.node._key\n          }\n        });\n        return;\n      }\n      apply2(operation);\n    }, editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(node) && node._type === editorActor.getSnapshot().context.schema.block.name) {\n        if (!node._key) {\n          editorActor.send({\n            type: \"normalizing\"\n          }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n            _key: editorActor.getSnapshot().context.keyGenerator()\n          }, {\n            at: path\n          }), editorActor.send({\n            type: \"done normalizing\"\n          });\n          return;\n        }\n        for (const [child, childPath] of slate__WEBPACK_IMPORTED_MODULE_16__.Node.children(editor, path))\n          if (!child._key) {\n            editorActor.send({\n              type: \"normalizing\"\n            }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n              _key: editorActor.getSnapshot().context.keyGenerator()\n            }, {\n              at: childPath\n            }), editorActor.send({\n              type: \"done normalizing\"\n            });\n            return;\n          }\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nfunction createApplyPatch(schema) {\n  return (editor, patch) => {\n    let changed = !1;\n    try {\n      switch (patch.type) {\n        case \"insert\":\n          changed = insertPatch(editor, patch, schema);\n          break;\n        case \"unset\":\n          changed = unsetPatch(editor, patch);\n          break;\n        case \"set\":\n          changed = setPatch(editor, patch);\n          break;\n        case \"diffMatchPatch\":\n          changed = diffMatchPatch(editor, patch);\n          break;\n      }\n    } catch (err) {\n      console.error(err);\n    }\n    return changed;\n  };\n}\nfunction diffMatchPatch(editor, patch) {\n  const block = findBlock(editor.children, patch.path);\n  if (!block)\n    return !1;\n  const child = findBlockChild(block, patch.path);\n  if (!child || !(block && editor.isTextBlock(block.node) && patch.path.length === 4 && patch.path[1] === \"children\" && patch.path[3] === \"text\") || !slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(child.node))\n    return !1;\n  const patches = parse(patch.value), [newValue] = apply(patches, child.node.text, {\n    allowExceedingIndices: !0\n  }), diff$1 = cleanupEfficiency(diff(child.node.text, newValue), 5);\n  let offset = 0;\n  for (const [op, text] of diff$1)\n    op === DIFF_INSERT ? (editor.apply({\n      type: \"insert_text\",\n      path: [block.index, child.index],\n      offset,\n      text\n    }), offset += text.length) : op === DIFF_DELETE ? editor.apply({\n      type: \"remove_text\",\n      path: [block.index, child.index],\n      offset,\n      text\n    }) : op === DIFF_EQUAL && (offset += text.length);\n  return !0;\n}\nfunction insertPatch(editor, patch, schema) {\n  const block = findBlock(editor.children, patch.path);\n  if (!block || patch.path.length > 1 && patch.path[1] !== \"children\")\n    return !1;\n  if (patch.path.length === 1) {\n    const {\n      items: items2,\n      position: position2\n    } = patch, blocksToInsert = toSlateValue(items2, {\n      schemaTypes: schema\n    }, KEY_TO_SLATE_ELEMENT.get(editor)), targetBlockIndex = block.index, normalizedIdx2 = position2 === \"after\" ? targetBlockIndex + 1 : targetBlockIndex, editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema);\n    return slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, blocksToInsert, {\n      at: [normalizedIdx2]\n    }), editorWasEmptyBefore && typeof patch.path[0] == \"number\" && patch.path[0] === 0 && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n      at: [position2 === \"before\" ? targetBlockIndex + 1 : targetBlockIndex]\n    }), !0;\n  }\n  const {\n    items,\n    position\n  } = patch, targetChild = findBlockChild(block, patch.path);\n  if (!targetChild)\n    return !1;\n  const childrenToInsert = toSlateValue([{\n    ...block.node,\n    children: items\n  }], {\n    schemaTypes: schema\n  }, KEY_TO_SLATE_ELEMENT.get(editor)), normalizedIdx = position === \"after\" ? targetChild.index + 1 : targetChild.index, childInsertPath = [block.index, normalizedIdx];\n  return childrenToInsert && slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(childrenToInsert[0]) && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, childrenToInsert[0].children, {\n    at: childInsertPath\n  }), !0;\n}\nfunction setPatch(editor, patch) {\n  let value = patch.value;\n  typeof patch.path[3] == \"string\" && (value = {}, value[patch.path[3]] = patch.value);\n  const block = findBlock(editor.children, patch.path);\n  if (!block)\n    return !1;\n  const isTextBlock2 = editor.isTextBlock(block.node);\n  if (isTextBlock2 && patch.path.length > 1 && patch.path[1] !== \"children\")\n    return !1;\n  const child = findBlockChild(block, patch.path);\n  if (isTextBlock2 && child) {\n    if (slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(child.node))\n      if (slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(value)) {\n        const oldText = child.node.text, newText = value.text;\n        oldText !== newText && (editor.apply({\n          type: \"remove_text\",\n          path: [block.index, child.index],\n          offset: 0,\n          text: oldText\n        }), editor.apply({\n          type: \"insert_text\",\n          path: [block.index, child.index],\n          offset: 0,\n          text: newText\n        }), editor.onChange());\n      } else {\n        const propPath = patch.path.slice(3), propEntry = propPath.at(0);\n        if (propEntry === void 0 || typeof propEntry == \"string\" && [\"_key\", \"_type\", \"text\"].includes(propEntry))\n          return !1;\n        const newNode = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.applyAll)(child.node, [{\n          ...patch,\n          path: propPath\n        }]);\n        slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, newNode, {\n          at: [block.index, child.index]\n        });\n      }\n    else {\n      const propPath = patch.path.slice(3), reservedProps = [\"_key\", \"_type\", \"children\", \"__inline\"], propEntry = propPath.at(0);\n      if (propEntry === void 0 || typeof propEntry == \"string\" && reservedProps.includes(propEntry))\n        return !1;\n      const value2 = \"value\" in child.node && typeof child.node.value == \"object\" ? child.node.value : {}, newValue = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.applyAll)(value2, [{\n        ...patch,\n        path: patch.path.slice(3)\n      }]);\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n        ...child.node,\n        value: newValue\n      }, {\n        at: [block.index, child.index]\n      });\n    }\n    return !0;\n  } else if (slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(block.node) && patch.path.length === 1) {\n    const {\n      children,\n      ...nextRest\n    } = value, {\n      children: prevChildren,\n      ...prevRest\n    } = block.node || {\n      children: void 0\n    };\n    editor.apply({\n      type: \"set_node\",\n      path: [block.index],\n      properties: {\n        ...prevRest\n      },\n      newProperties: nextRest\n    });\n    const blockNode = block.node;\n    blockNode.children.forEach((child2, childIndex) => {\n      editor.apply({\n        type: \"remove_node\",\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child2\n      });\n    }), Array.isArray(children) && children.forEach((child2, childIndex) => {\n      editor.apply({\n        type: \"insert_node\",\n        path: [block.index, childIndex],\n        node: child2\n      });\n    });\n  } else if (block && \"value\" in block.node)\n    if (patch.path.length > 1 && patch.path[1] !== \"children\") {\n      const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.applyAll)(block.node.value, [{\n        ...patch,\n        path: patch.path.slice(1)\n      }]);\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n        ...block.node,\n        value: newVal\n      }, {\n        at: [block.index]\n      });\n    } else\n      return !1;\n  return !0;\n}\nfunction unsetPatch(editor, patch) {\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection;\n    slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(editor);\n    const children = slate__WEBPACK_IMPORTED_MODULE_16__.Node.children(editor, [], {\n      reverse: !0\n    });\n    for (const [_, path] of children)\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n        at: path\n      });\n    return slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n      decorators: []\n    })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), editor.onChange(), !0;\n  }\n  const block = findBlock(editor.children, patch.path);\n  if (!block)\n    return !1;\n  if (patch.path.length === 1) {\n    if (editor.children.length === 1) {\n      const previousSelection = editor.selection;\n      return slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(editor), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n        at: [block.index]\n      }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, editor.pteCreateTextBlock({\n        decorators: []\n      })), previousSelection && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, {\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        }\n      }), editor.onChange(), !0;\n    }\n    return slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n      at: [block.index]\n    }), !0;\n  }\n  const child = findBlockChild(block, patch.path);\n  if (editor.isTextBlock(block.node) && child && patch.path[1] === \"children\" && patch.path.length === 3)\n    return slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n      at: [block.index, child.index]\n    }), !0;\n  if (child && !slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(child.node)) {\n    const propEntry = patch.path.slice(3).at(0);\n    if (propEntry === void 0 || typeof propEntry == \"string\" && [\"_key\", \"_type\", \"children\", \"__inline\"].includes(propEntry))\n      return !1;\n    const value = \"value\" in child.node && typeof child.node.value == \"object\" ? child.node.value : {}, newValue = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.applyAll)(value, [{\n      ...patch,\n      path: patch.path.slice(3)\n    }]);\n    return slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n      ...child.node,\n      value: newValue\n    }, {\n      at: [block.index, child.index]\n    }), !0;\n  }\n  if (child && slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(child.node)) {\n    const propPath = patch.path.slice(3), propEntry = propPath.at(0);\n    if (propEntry === void 0 || typeof propEntry == \"string\" && [\"_key\", \"_type\"].includes(propEntry))\n      return !1;\n    if (typeof propEntry == \"string\" && propEntry === \"text\")\n      return editor.apply({\n        type: \"remove_text\",\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text\n      }), !0;\n    const newNode = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.applyAll)(child.node, [{\n      ...patch,\n      path: propPath\n    }]), newKeys = Object.keys(newNode), removedProperties = Object.keys(child.node).filter((property) => !newKeys.includes(property));\n    return slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index]\n    }), !0;\n  }\n  if (!child) {\n    if (\"value\" in block.node) {\n      const newVal = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.applyAll)(block.node.value, [{\n        ...patch,\n        path: patch.path.slice(1)\n      }]);\n      return slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n        ...block.node,\n        value: newVal\n      }, {\n        at: [block.index]\n      }), !0;\n    }\n    return !1;\n  }\n  return !1;\n}\nfunction findBlock(children, path) {\n  let blockIndex = -1;\n  const block = children.find((node, index) => {\n    const isMatch = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isKeyedSegment)(path[0]) ? node._key === path[0]._key : index === path[0];\n    return isMatch && (blockIndex = index), isMatch;\n  });\n  if (block)\n    return {\n      node: block,\n      index: blockIndex\n    };\n}\nfunction findBlockChild(block, path) {\n  const blockNode = block.node;\n  if (!slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(blockNode) || path[1] !== \"children\")\n    return;\n  let childIndex = -1;\n  const child = blockNode.children.find((node, index) => {\n    const isMatch = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isKeyedSegment)(path[2]) ? node._key === path[2]._key : index === path[2];\n    return isMatch && (childIndex = index), isMatch;\n  });\n  if (child)\n    return {\n      node: child,\n      index: childIndex\n    };\n}\nfunction insertTextPatch(schema, children, operation, beforeValue) {\n  const block = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, children[operation.path[0]]) && children[operation.path[0]];\n  if (!block)\n    throw new Error(\"Could not find block\");\n  const textChild = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, block) && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)({\n    schema\n  }, block.children[operation.path[1]]) && block.children[operation.path[1]];\n  if (!textChild)\n    throw new Error(\"Could not find child\");\n  const path = [{\n    _key: block._key\n  }, \"children\", {\n    _key: textChild._key\n  }, \"text\"], prevBlock = beforeValue[operation.path[0]], prevChild = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, prevBlock) && prevBlock.children[operation.path[1]], prevText = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)({\n    schema\n  }, prevChild) ? prevChild.text : \"\", patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.diffMatchPatch)(prevText, textChild.text, path);\n  return patch.value.length ? [patch] : [];\n}\nfunction removeTextPatch(schema, children, operation, beforeValue) {\n  const block = children[operation.path[0]];\n  if (!block)\n    throw new Error(\"Could not find block\");\n  const child = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, block) && block.children[operation.path[1]] || void 0, textChild = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)({\n    schema\n  }, child) ? child : void 0;\n  if (child && !textChild)\n    throw new Error(\"Expected span\");\n  if (!textChild)\n    throw new Error(\"Could not find child\");\n  const path = [{\n    _key: block._key\n  }, \"children\", {\n    _key: textChild._key\n  }, \"text\"], beforeBlock = beforeValue[operation.path[0]], prevTextChild = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, beforeBlock) && beforeBlock.children[operation.path[1]], prevText = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)({\n    schema\n  }, prevTextChild) && prevTextChild.text, patch = (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.diffMatchPatch)(prevText || \"\", textChild.text, path);\n  return patch.value ? [patch] : [];\n}\nfunction setNodePatch(schema, children, operation) {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]];\n    if (typeof block._key != \"string\")\n      throw new Error(\"Expected block to have a _key\");\n    const setNode = lodash_omitBy_js__WEBPACK_IMPORTED_MODULE_11__({\n      ...children[operation.path[0]],\n      ...operation.newProperties\n    }, lodash_isUndefined_js__WEBPACK_IMPORTED_MODULE_10__);\n    return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)(fromSlateValue([setNode], schema.block.name)[0], [{\n      _key: block._key\n    }])];\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]];\n    if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n      schema\n    }, block)) {\n      const child = block.children[operation.path[1]];\n      if (child) {\n        const blockKey = block._key, childKey = child._key, patches = [], keys = Object.keys(operation.newProperties);\n        return keys.forEach((keyName) => {\n          if (keys.length === 1 && keyName === \"_key\") {\n            const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_9__(operation.newProperties, keyName);\n            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)(val, [{\n              _key: blockKey\n            }, \"children\", block.children.indexOf(child), keyName]));\n          } else {\n            const val = lodash_get_js__WEBPACK_IMPORTED_MODULE_9__(operation.newProperties, keyName);\n            patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)(val, [{\n              _key: blockKey\n            }, \"children\", {\n              _key: childKey\n            }, keyName]));\n          }\n        }), patches;\n      }\n      throw new Error(\"Could not find a valid child\");\n    }\n    throw new Error(\"Could not find a valid block\");\n  } else\n    throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`);\n}\nfunction insertNodePatch(schema, children, operation, beforeValue) {\n  const block = beforeValue[operation.path[0]];\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? \"before\" : \"after\", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;\n    return targetKey ? [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.insert)([fromSlateValue([operation.node], schema.block.name)[0]], position, [{\n      _key: targetKey\n    }])] : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.setIfMissing)(beforeValue, []), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.insert)([fromSlateValue([operation.node], schema.block.name)[0]], \"before\", [operation.path[0]])];\n  } else if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, block) && operation.path.length === 2 && children[operation.path[0]]) {\n    const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? \"before\" : \"after\", node = {\n      ...operation.node\n    };\n    !node._type && slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(node) && (node._type = \"span\", node.marks = []);\n    const child = fromSlateValue([{\n      _key: \"bogus\",\n      _type: schema.block.name,\n      children: [node]\n    }], schema.block.name)[0].children[0];\n    return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.insert)([child], position, [{\n      _key: block._key\n    }, \"children\", block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {\n      _key: block.children[operation.path[1] - 1]._key\n    }])];\n  }\n  return [];\n}\nfunction splitNodePatch(schema, children, operation, beforeValue) {\n  const patches = [], splitBlock = children[operation.path[0]];\n  if (!(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, splitBlock))\n    throw new Error(`Block with path ${JSON.stringify(operation.path[0])} is not a text block and can't be split`);\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]];\n    if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n      schema\n    }, oldBlock)) {\n      const targetValue = fromSlateValue([children[operation.path[0] + 1]], schema.block.name)[0];\n      targetValue && (patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.insert)([targetValue], \"after\", [{\n        _key: splitBlock._key\n      }])), oldBlock.children.slice(operation.position).forEach((span) => {\n        const path = [{\n          _key: oldBlock._key\n        }, \"children\", {\n          _key: span._key\n        }];\n        patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)(path));\n      }));\n    }\n    return patches;\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]];\n    if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)({\n      schema\n    }, splitSpan)) {\n      const targetSpans = fromSlateValue([{\n        ...splitBlock,\n        children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)\n      }], schema.block.name)[0].children;\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.insert)(targetSpans, \"after\", [{\n        _key: splitBlock._key\n      }, \"children\", {\n        _key: splitSpan._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)(splitSpan.text, [{\n        _key: splitBlock._key\n      }, \"children\", {\n        _key: splitSpan._key\n      }, \"text\"]));\n    }\n    return patches;\n  }\n  return patches;\n}\nfunction removeNodePatch(schema, beforeValue, operation) {\n  const block = beforeValue[operation.path[0]];\n  if (operation.path.length === 1) {\n    if (block && block._key)\n      return [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n        _key: block._key\n      }])];\n    throw new Error(\"Block not found\");\n  } else if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]];\n    return spanToRemove ? block.children.filter((span) => span._key === operation.node._key).length > 1 ? (console.warn(`Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)), []) : [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n      _key: block._key\n    }, \"children\", {\n      _key: spanToRemove._key\n    }])] : [];\n  } else\n    return [];\n}\nfunction mergeNodePatch(schema, children, operation, beforeValue) {\n  const patches = [], block = beforeValue[operation.path[0]], updatedBlock = children[operation.path[0]];\n  if (operation.path.length === 1)\n    if (block?._key) {\n      const newBlock = fromSlateValue([children[operation.path[0] - 1]], schema.block.name)[0];\n      patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)(newBlock, [{\n        _key: newBlock._key\n      }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n        _key: block._key\n      }]));\n    } else\n      throw new Error(\"Target key not found!\");\n  else if ((0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, block) && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, updatedBlock) && operation.path.length === 2) {\n    const updatedSpan = updatedBlock.children[operation.path[1] - 1] && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)({\n      schema\n    }, updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)({\n      schema\n    }, block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;\n    updatedSpan && (block.children.filter((span) => span._key === updatedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)(updatedSpan.text, [{\n      _key: block._key\n    }, \"children\", {\n      _key: updatedSpan._key\n    }, \"text\"])) : console.warn(`Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`, JSON.stringify(block, null, 2))), removedSpan && (block.children.filter((span) => span._key === removedSpan._key).length === 1 ? patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n      _key: block._key\n    }, \"children\", {\n      _key: removedSpan._key\n    }])) : console.warn(`Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)));\n  }\n  return patches;\n}\nfunction moveNodePatch(schema, beforeValue, operation) {\n  const patches = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];\n  if (!targetBlock)\n    return patches;\n  if (operation.path.length === 1) {\n    const position = operation.path[0] > operation.newPath[0] ? \"before\" : \"after\";\n    patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n      _key: block._key\n    }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.insert)([fromSlateValue([block], schema.block.name)[0]], position, [{\n      _key: targetBlock._key\n    }]));\n  } else if (operation.path.length === 2 && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, block) && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n    schema\n  }, targetBlock)) {\n    const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? \"after\" : \"before\", childToInsert = fromSlateValue([block], schema.block.name)[0].children[operation.path[1]];\n    patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n      _key: block._key\n    }, \"children\", {\n      _key: child._key\n    }])), patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.insert)([childToInsert], position, [{\n      _key: targetBlock._key\n    }, \"children\", {\n      _key: targetChild._key\n    }]));\n  }\n  return patches;\n}\nconst PATCHING = /* @__PURE__ */ new WeakMap();\nfunction withoutPatching(editor, fn) {\n  const prev = isPatching(editor);\n  PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);\n}\nfunction isPatching(editor) {\n  return PATCHING.get(editor);\n}\nconst debug$c = debugWithName(\"plugin:withPatches\");\nfunction createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions\n}) {\n  let previousChildren;\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema);\n  return function(editor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [...editor.children];\n    const {\n      apply: apply2\n    } = editor;\n    let bufferedPatches = [];\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0)\n        return;\n      const patches = bufferedPatches;\n      bufferedPatches = [];\n      let changed = !1;\n      withRemoteChanges(editor, () => {\n        slate__WEBPACK_IMPORTED_MODULE_16__.Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                debug$c.enabled && debug$c(`Handling remote patch ${JSON.stringify(patch)}`);\n                try {\n                  changed = applyPatch(editor, patch);\n                } catch (error) {\n                  console.error(`Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`);\n                }\n              }\n            });\n          });\n        }), changed && (editor.normalize(), editor.onChange());\n      });\n    }, handlePatches = ({\n      patches\n    }) => {\n      const remotePatches = patches.filter((p) => p.origin !== \"local\");\n      remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());\n    };\n    return subscriptions.push(() => {\n      debug$c(\"Subscribing to remote patches\");\n      const sub = editorActor.on(\"patches\", handlePatches);\n      return () => {\n        debug$c(\"Unsubscribing to remote patches\"), sub.unsubscribe();\n      };\n    }), editor.apply = (operation) => {\n      let patches = [];\n      previousChildren = editor.children;\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, editorActor.getSnapshot().context.schema);\n      apply2(operation);\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, editorActor.getSnapshot().context.schema);\n      if (!isPatching(editor))\n        return editor;\n      switch (editorWasEmpty && !editorIsEmpty && operation.type !== \"set_selection\" && patches.push((0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.insert)(previousChildren, \"before\", [0])), operation.type) {\n        case \"insert_text\":\n          patches = [...patches, ...insertTextPatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"remove_text\":\n          patches = [...patches, ...removeTextPatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"remove_node\":\n          patches = [...patches, ...removeNodePatch(editorActor.getSnapshot().context.schema, previousChildren, operation)];\n          break;\n        case \"split_node\":\n          patches = [...patches, ...splitNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"insert_node\":\n          patches = [...patches, ...insertNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"set_node\":\n          patches = [...patches, ...setNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation)];\n          break;\n        case \"merge_node\":\n          patches = [...patches, ...mergeNodePatch(editorActor.getSnapshot().context.schema, editor.children, operation, previousChildren)];\n          break;\n        case \"move_node\":\n          patches = [...patches, ...moveNodePatch(editorActor.getSnapshot().context.schema, previousChildren, operation)];\n          break;\n      }\n      if (!editorWasEmpty && editorIsEmpty && [\"merge_node\", \"set_node\", \"remove_text\", \"remove_node\"].includes(operation.type) && (patches = [...patches, (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([])], relayActor.send({\n        type: \"unset\",\n        previousValue: fromSlateValue(previousChildren, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor))\n      })), editorWasEmpty && patches.length > 0 && (patches = [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.setIfMissing)([], []), ...patches]), patches.length > 0)\n        for (const patch of patches)\n          editorActor.send({\n            type: \"internal.patch\",\n            patch: {\n              ...patch,\n              origin: \"local\"\n            },\n            operationId: getCurrentOperationId(editor),\n            value: editor.value\n          });\n      return editor;\n    }, editor;\n  };\n}\nconst debug$b = debugWithName(\"plugin:withPlaceholderBlock\");\nfunction createWithPlaceholderBlock(editorActor) {\n  return function(editor) {\n    const {\n      apply: apply2\n    } = editor;\n    return editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      })) {\n        apply2(op);\n        return;\n      }\n      if (isChangingRemotely(editor)) {\n        apply2(op);\n        return;\n      }\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply2(op);\n        return;\n      }\n      if (op.type === \"remove_node\") {\n        const blockIndex = op.path.at(0), isLonelyBlock = op.path.length === 1 && blockIndex === 0 && editor.children.length === 1, isBlockObject = op.node._type !== editorActor.getSnapshot().context.schema.block.name;\n        isLonelyBlock && isBlockObject && (debug$b(\"Adding placeholder block\"), slate__WEBPACK_IMPORTED_MODULE_16__.Editor.insertNode(editor, editor.pteCreateTextBlock({\n          decorators: []\n        })));\n      }\n      apply2(op);\n    }, editor;\n  };\n}\nconst debug$a = debugWithName(\"plugin:withSchemaTypes\");\nfunction createWithSchemaTypes({\n  editorActor\n}) {\n  return function(editor) {\n    editor.isTextBlock = (value) => slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(value) ? !1 : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(editorActor.getSnapshot().context, value), editor.isTextSpan = (value) => slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(value) ? !1 : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)(editorActor.getSnapshot().context, value), editor.isListBlock = (value) => slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(value) ? !1 : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isListBlock)(editorActor.getSnapshot().context, value), editor.isVoid = (element) => slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(element) ? !1 : editorActor.getSnapshot().context.schema.block.name !== element._type && (editorActor.getSnapshot().context.schema.blockObjects.map((obj) => obj.name).includes(element._type) || editorActor.getSnapshot().context.schema.inlineObjects.map((obj) => obj.name).includes(element._type)), editor.isInline = (element) => slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(element) ? !1 : editorActor.getSnapshot().context.schema.inlineObjects.map((obj) => obj.name).includes(element._type) && \"__inline\" in element && element.__inline === !0;\n    const {\n      normalizeNode\n    } = editor;\n    return editor.normalizeNode = (entry) => {\n      const [node, path] = entry;\n      if (node._type === void 0 && path.length === 2) {\n        debug$a(\"Setting span type on text node without a type\");\n        const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n          ...span,\n          _type: editorActor.getSnapshot().context.schema.span.name,\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      if (node._key === void 0 && (path.length === 1 || path.length === 2)) {\n        debug$a(\"Setting missing key on child node without a key\");\n        const key = editorActor.getSnapshot().context.keyGenerator();\n        editorActor.send({\n          type: \"normalizing\"\n        }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(editor, {\n          _key: key\n        }, {\n          at: path\n        }), editorActor.send({\n          type: \"done normalizing\"\n        });\n        return;\n      }\n      normalizeNode(entry);\n    }, editor;\n  };\n}\nfunction createWithUtils({\n  editorActor\n}) {\n  return function(editor) {\n    return editor.pteCreateTextBlock = (options) => toSlateValue([{\n      _type: editorActor.getSnapshot().context.schema.block.name,\n      _key: editorActor.getSnapshot().context.keyGenerator(),\n      style: editorActor.getSnapshot().context.schema.styles[0].name || \"normal\",\n      ...options.listItem ? {\n        listItem: options.listItem\n      } : {},\n      ...options.level ? {\n        level: options.level\n      } : {},\n      markDefs: [],\n      children: [{\n        _type: \"span\",\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        text: \"\",\n        marks: options.decorators.filter((decorator) => editorActor.getSnapshot().context.schema.decorators.find(({\n          name\n        }) => name === decorator))\n      }]\n    }], {\n      schemaTypes: editorActor.getSnapshot().context.schema\n    })[0], editor;\n  };\n}\nfunction pluginUpdateSelection({\n  editor,\n  editorActor\n}) {\n  const updateSelection = () => {\n    if (editor.selection) {\n      const existingSelection = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n      if (existingSelection)\n        editorActor.send({\n          type: \"update selection\",\n          selection: existingSelection\n        });\n      else {\n        const selection = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        });\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, selection), editorActor.send({\n          type: \"update selection\",\n          selection\n        });\n      }\n    } else\n      editorActor.send({\n        type: \"update selection\",\n        selection: null\n      });\n  }, {\n    onChange\n  } = editor;\n  return editor.onChange = () => {\n    onChange(), editorActor.getSnapshot().matches({\n      setup: \"setting up\"\n    }) || updateSelection();\n  }, editor;\n}\nfunction isEditorNode(node) {\n  return typeof node == \"object\" && node !== null ? !(\"_type\" in node) && \"children\" in node && Array.isArray(node.children) : !1;\n}\nfunction isTextBlockNode(context, node) {\n  return (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTypedObject)(node) && node._type === context.schema.block.name;\n}\nfunction isSpanNode(context, node) {\n  return typeof node != \"object\" || node === null || \"children\" in node ? !1 : \"_type\" in node ? node._type === context.schema.span.name : \"text\" in node;\n}\nfunction isPartialSpanNode(node) {\n  return typeof node == \"object\" && node !== null && \"text\" in node && typeof node.text == \"string\";\n}\nfunction isObjectNode(context, node) {\n  return !isEditorNode(node) && !isTextBlockNode(context, node) && !isSpanNode(context, node) && !isPartialSpanNode(node);\n}\nfunction getBlock(root, path) {\n  const index = path.at(0);\n  if (!(index === void 0 || path.length !== 1))\n    return root.children.at(index);\n}\nfunction getNode(context, root, path) {\n  if (path.length === 0)\n    return root;\n  if (path.length === 1)\n    return getBlock(root, path);\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1));\n    return !block || !isTextBlockNode(context, block) ? void 0 : block.children.at(path[1]) || void 0;\n  }\n}\nfunction getSpan(context, root, path) {\n  const node = getNode(context, root, path);\n  if (node && isSpanNode(context, node))\n    return node;\n}\nfunction getParent(context, root, path) {\n  if (path.length === 0)\n    return;\n  const parentPath = path.slice(0, -1);\n  if (parentPath.length === 0)\n    return root;\n  const blockIndex = parentPath.at(0);\n  if (blockIndex === void 0 || parentPath.length !== 1)\n    return;\n  const block = root.children.at(blockIndex);\n  if (block && isTextBlockNode(context, block))\n    return block;\n}\nfunction applyOperationToPortableText(context, value, operation) {\n  const draft = (0,immer__WEBPACK_IMPORTED_MODULE_32__.createDraft)({\n    children: value\n  });\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation);\n  } catch (e) {\n    console.error(e);\n  }\n  return (0,immer__WEBPACK_IMPORTED_MODULE_32__.finishDraft)(draft).children;\n}\nfunction applyOperationToPortableTextDraft(context, root, operation) {\n  switch (operation.type) {\n    case \"insert_node\": {\n      const {\n        path,\n        node: insertedNode\n      } = operation, parent = getParent(context, root, path), index = path[path.length - 1];\n      if (!parent || index > parent.children.length)\n        break;\n      if (path.length === 1) {\n        if (isTextBlockNode(context, insertedNode)) {\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => \"__inline\" in child ? {\n              _key: child._key,\n              _type: child._type,\n              ...\"value\" in child && typeof child.value == \"object\" ? child.value : {}\n            } : child)\n          });\n          break;\n        }\n        if (slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(insertedNode) && !(\"__inline\" in insertedNode)) {\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...\"value\" in insertedNode && typeof insertedNode.value == \"object\" ? insertedNode.value : {}\n          });\n          break;\n        }\n      }\n      if (path.length === 2) {\n        if (!isTextBlockNode(context, parent))\n          break;\n        if (isPartialSpanNode(insertedNode)) {\n          parent.children.splice(index, 0, insertedNode);\n          break;\n        }\n        if (\"__inline\" in insertedNode) {\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...\"value\" in insertedNode && typeof insertedNode.value == \"object\" ? insertedNode.value : {}\n          });\n          break;\n        }\n      }\n      break;\n    }\n    case \"insert_text\": {\n      const {\n        path,\n        offset,\n        text\n      } = operation;\n      if (text.length === 0) break;\n      const span = getSpan(context, root, path);\n      if (!span)\n        break;\n      const before = span.text.slice(0, offset), after = span.text.slice(offset);\n      span.text = before + text + after;\n      break;\n    }\n    case \"merge_node\": {\n      const {\n        path\n      } = operation, node = getNode(context, root, path), prevPath = slate__WEBPACK_IMPORTED_MODULE_16__.Path.previous(path), prev = getNode(context, root, prevPath), parent = getParent(context, root, path);\n      if (!node || !prev || !parent)\n        break;\n      const index = path[path.length - 1];\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev))\n        prev.text += node.text;\n      else if (isTextBlockNode(context, node) && isTextBlockNode(context, prev))\n        prev.children.push(...node.children);\n      else\n        break;\n      parent.children.splice(index, 1);\n      break;\n    }\n    case \"move_node\": {\n      const {\n        path,\n        newPath\n      } = operation;\n      if (slate__WEBPACK_IMPORTED_MODULE_16__.Path.isAncestor(path, newPath))\n        break;\n      const node = getNode(context, root, path), parent = getParent(context, root, path), index = path[path.length - 1];\n      if (!node || !parent)\n        break;\n      parent.children.splice(index, 1);\n      const truePath = slate__WEBPACK_IMPORTED_MODULE_16__.Path.transform(path, operation), newParent = getNode(context, root, slate__WEBPACK_IMPORTED_MODULE_16__.Path.parent(truePath)), newIndex = truePath[truePath.length - 1];\n      if (!newParent || !(\"children\" in newParent) || !Array.isArray(newParent.children))\n        break;\n      newParent.children.splice(newIndex, 0, node);\n      break;\n    }\n    case \"remove_node\": {\n      const {\n        path\n      } = operation, index = path[path.length - 1];\n      getParent(context, root, path)?.children.splice(index, 1);\n      break;\n    }\n    case \"remove_text\": {\n      const {\n        path,\n        offset,\n        text\n      } = operation;\n      if (text.length === 0)\n        break;\n      const span = getSpan(context, root, path);\n      if (!span)\n        break;\n      const before = span.text.slice(0, offset), after = span.text.slice(offset + text.length);\n      span.text = before + after;\n      break;\n    }\n    case \"set_node\": {\n      const {\n        path,\n        properties,\n        newProperties\n      } = operation, node = getNode(context, root, path);\n      if (!node || isEditorNode(node))\n        break;\n      if (isObjectNode(context, node)) {\n        const valueBefore = \"value\" in properties && typeof properties.value == \"object\" ? properties.value : {}, valueAfter = \"value\" in newProperties && typeof newProperties.value == \"object\" ? newProperties.value : {};\n        for (const key in newProperties) {\n          if (key === \"value\")\n            continue;\n          const value = newProperties[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in properties)\n          key !== \"value\" && (newProperties.hasOwnProperty(key) || delete node[key]);\n        for (const key in valueAfter) {\n          const value = valueAfter[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in valueBefore)\n          valueAfter.hasOwnProperty(key) || delete node[key];\n        break;\n      }\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === \"children\" || key === \"text\")\n            break;\n          const value = newProperties[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in properties)\n          newProperties.hasOwnProperty(key) || delete node[key];\n        break;\n      }\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === \"text\")\n            break;\n          const value = newProperties[key];\n          value == null ? delete node[key] : node[key] = value;\n        }\n        for (const key in properties)\n          newProperties.hasOwnProperty(key) || delete node[key];\n        break;\n      }\n      break;\n    }\n    case \"split_node\": {\n      const {\n        path,\n        position,\n        properties\n      } = operation;\n      if (path.length === 0)\n        break;\n      const parent = getParent(context, root, path), index = path[path.length - 1];\n      if (!parent)\n        break;\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path);\n        if (!block || !isTextBlockNode(context, block))\n          break;\n        const before = block.children.slice(0, position), after = block.children.slice(position);\n        block.children = before;\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name\n        };\n        parent.children.splice(index + 1, 0, newTextBlockNode);\n        break;\n      }\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path);\n        if (!node || !isSpanNode(context, node))\n          break;\n        const before = node.text.slice(0, position), after = node.text.slice(position);\n        node.text = before;\n        const newSpanNode = {\n          ...properties,\n          text: after\n        };\n        parent.children.splice(index + 1, 0, newSpanNode);\n      }\n      break;\n    }\n  }\n  return root;\n}\nfunction pluginUpdateValue(context, editor) {\n  const {\n    apply: apply2\n  } = editor;\n  return editor.apply = (operation) => {\n    if (operation.type === \"set_selection\") {\n      apply2(operation);\n      return;\n    }\n    if (editor.value = applyOperationToPortableText(context, editor.value, operation), operation.type === \"insert_text\" || operation.type === \"remove_text\") {\n      apply2(operation);\n      return;\n    }\n    buildIndexMaps({\n      schema: context.schema,\n      value: editor.value\n    }, {\n      blockIndexMap: editor.blockIndexMap,\n      listIndexMap: editor.listIndexMap\n    }), apply2(operation);\n  }, editor;\n}\nconst withPlugins = (editor, options) => {\n  const e = editor, {\n    editorActor,\n    relayActor\n  } = options, withObjectKeys = createWithObjectKeys(editorActor), withSchemaTypes = createWithSchemaTypes({\n    editorActor\n  }), withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions\n  }), withMaxBlocks = createWithMaxBlocks(editorActor), withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions\n  }), withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor), withPlaceholderBlock = createWithPlaceholderBlock(editorActor), withUtils = createWithUtils({\n    editorActor\n  });\n  return createWithEventListeners(editorActor)(withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPlaceholderBlock(withUtils(withMaxBlocks(withUndoRedo(withPatches(pluginUpdateValue(editorActor.getSnapshot().context, pluginUpdateSelection({\n    editorActor,\n    editor: e\n  })))))))))));\n}, debug$9 = debugWithName(\"setup\");\nfunction createSlateEditor(config) {\n  debug$9(\"Creating new Slate editor instance\");\n  const instance = withPlugins((0,slate_react__WEBPACK_IMPORTED_MODULE_24__.withReact)((0,slate__WEBPACK_IMPORTED_MODULE_16__.createEditor)()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions\n  });\n  KEY_TO_VALUE_ELEMENT.set(instance, {}), KEY_TO_SLATE_ELEMENT.set(instance, {}), instance.decoratedRanges = [], instance.decoratorState = {};\n  const placeholderBlock = createPlaceholderBlock(config.editorActor.getSnapshot().context);\n  instance.value = [placeholderBlock], instance.blockIndexMap = /* @__PURE__ */ new Map(), instance.listIndexMap = /* @__PURE__ */ new Map(), buildIndexMaps({\n    schema: config.editorActor.getSnapshot().context.schema,\n    value: instance.value\n  }, {\n    blockIndexMap: instance.blockIndexMap,\n    listIndexMap: instance.listIndexMap\n  });\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema\n  });\n  return {\n    instance,\n    initialValue\n  };\n}\nfunction createEditorDom(sendBack, slateEditor) {\n  return {\n    getBlockNodes: (snapshot) => getBlockNodes(slateEditor, snapshot),\n    getChildNodes: (snapshot) => getChildNodes(slateEditor, snapshot),\n    setDragGhost: ({\n      event,\n      ghost\n    }) => setDragGhost({\n      sendBack,\n      event,\n      ghost\n    })\n  };\n}\nfunction getBlockNodes(slateEditor, snapshot) {\n  if (!snapshot.context.selection)\n    return [];\n  const range = toSlateRange(snapshot);\n  if (!range)\n    return [];\n  try {\n    return Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(slateEditor, {\n      at: range,\n      mode: \"highest\",\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(n)\n    })).map(([blockNode]) => slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.toDOMNode(slateEditor, blockNode));\n  } catch {\n    return [];\n  }\n}\nfunction getChildNodes(slateEditor, snapshot) {\n  if (!snapshot.context.selection)\n    return [];\n  const range = toSlateRange(snapshot);\n  if (!range)\n    return [];\n  try {\n    return Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(slateEditor, {\n      at: range,\n      mode: \"lowest\",\n      match: (n) => !slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isEditor(n)\n    })).map(([childNode]) => slate_dom__WEBPACK_IMPORTED_MODULE_19__.DOMEditor.toDOMNode(slateEditor, childNode));\n  } catch {\n    return [];\n  }\n}\nfunction setDragGhost({\n  sendBack,\n  event,\n  ghost\n}) {\n  event.originEvent.dataTransfer.setDragImage(ghost.element, ghost.x, ghost.y), sendBack({\n    type: \"set drag ghost\",\n    ghost: ghost.element\n  });\n}\nconst addAnnotationOnCollapsedSelection = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"annotation.add\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const caretWordSelection = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getCaretWordSelection)(snapshot);\n    return !caretWordSelection || !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionExpanded)({\n      context: {\n        ...snapshot.context,\n        selection: caretWordSelection\n      }\n    }) ? !1 : {\n      caretWordSelection\n    };\n  },\n  actions: [({\n    event\n  }, {\n    caretWordSelection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"select\",\n    at: caretWordSelection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"annotation.add\",\n    annotation: event.annotation\n  })]]\n}), coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection\n}, defaultKeyboardShortcuts = {\n  arrowDown: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.createKeyboardShortcut)({\n    default: [{\n      key: \"ArrowDown\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  arrowUp: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.createKeyboardShortcut)({\n    default: [{\n      key: \"ArrowUp\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  break: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.createKeyboardShortcut)({\n    default: [{\n      key: \"Enter\",\n      shift: !1\n    }]\n  }),\n  lineBreak: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.createKeyboardShortcut)({\n    default: [{\n      key: \"Enter\",\n      shift: !0\n    }]\n  }),\n  decorators: {\n    strong: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.bold,\n    em: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.italic,\n    underline: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.underline,\n    code: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.code\n  },\n  history: {\n    undo: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.undo,\n    redo: _portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.redo\n  },\n  tab: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.createKeyboardShortcut)({\n    default: [{\n      key: \"Tab\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !1\n    }]\n  }),\n  shiftTab: (0,_portabletext_keyboard_shortcuts__WEBPACK_IMPORTED_MODULE_33__.createKeyboardShortcut)({\n    default: [{\n      key: \"Tab\",\n      alt: !1,\n      ctrl: !1,\n      meta: !1,\n      shift: !0\n    }]\n  })\n}, arrowDownOnLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.arrowDown.guard(event.originEvent) || !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusBlockObject)(snapshot), nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getNextBlock)(snapshot);\n    return focusBlockObject && !nextBlock;\n  },\n  actions: [({\n    snapshot\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\"\n  })]]\n}), arrowUpOnLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.arrowUp.guard(event.originEvent) || !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusBlockObject)(snapshot), previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getPreviousBlock)(snapshot);\n    return focusBlockObject && !previousBlock;\n  },\n  actions: [({\n    snapshot\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"before\"\n  })]]\n}), breakingBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusBlockObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusBlockObject)(snapshot);\n    return (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot) && focusBlockObject !== void 0;\n  },\n  actions: [({\n    snapshot\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\"\n  })]]\n}), clickingAboveLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"mouse.click\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (snapshot.context.readOnly || snapshot.context.selection && !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusBlockObject)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    }), previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getPreviousBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    });\n    return event.position.isEditor && event.position.block === \"start\" && focusBlockObject && !previousBlock;\n  },\n  actions: [({\n    snapshot,\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"select\",\n    at: event.position.selection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"before\",\n    select: \"start\"\n  })]]\n}), clickingBelowLonelyBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"mouse.click\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (snapshot.context.readOnly || snapshot.context.selection && !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot))\n      return !1;\n    const focusBlockObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusBlockObject)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    }), nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getNextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection\n      }\n    });\n    return event.position.isEditor && event.position.block === \"end\" && focusBlockObject && !nextBlock;\n  },\n  actions: [({\n    snapshot,\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"select\",\n    at: event.position.selection\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name\n    },\n    placement: \"after\",\n    select: \"start\"\n  })]]\n}), deletingEmptyTextBlockAfterBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot), previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getPreviousBlock)(snapshot);\n    return !focusTextBlock || !selectionCollapsed || !previousBlock ? !1 : (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node) && !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(snapshot.context, previousBlock.node) ? {\n      focusTextBlock,\n      previousBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"select\",\n    at: {\n      anchor: {\n        path: previousBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: previousBlock.path,\n        offset: 0\n      }\n    }\n  })]]\n}), deletingEmptyTextBlockBeforeBlockObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.forward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot), nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getNextBlock)(snapshot);\n    return !focusTextBlock || !selectionCollapsed || !nextBlock ? !1 : (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node) && !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(snapshot.context, nextBlock.node) ? {\n      focusTextBlock,\n      nextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"select\",\n    at: {\n      anchor: {\n        path: nextBlock.path,\n        offset: 0\n      },\n      focus: {\n        path: nextBlock.path,\n        offset: 0\n      }\n    }\n  })]]\n}), coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject\n}, coreDecoratorBehaviors = {\n  strongShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.strong.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"strong\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"strong\"\n    })]]\n  }),\n  emShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.em.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"em\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"em\"\n    })]]\n  }),\n  underlineShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.underline.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"underline\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"underline\"\n    })]]\n  }),\n  codeShortcut: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.decorators.code.guard(event.originEvent) && snapshot.context.schema.decorators.some((decorator) => decorator.name === \"code\"),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"decorator.toggle\",\n      decorator: \"code\"\n    })]]\n  })\n};\nfunction getCompoundClientRect(nodes) {\n  if (nodes.length === 0)\n    return new DOMRect(0, 0, 0, 0);\n  const elements = nodes.filter((node) => node instanceof Element), firstRect = elements.at(0)?.getBoundingClientRect();\n  if (!firstRect)\n    return new DOMRect(0, 0, 0, 0);\n  let left = firstRect.left, top = firstRect.top, right = firstRect.right, bottom = firstRect.bottom;\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect();\n    left = Math.min(left, rect.left), top = Math.min(top, rect.top), right = Math.max(right, rect.right), bottom = Math.max(bottom, rect.bottom);\n  }\n  return new DOMRect(left, top, right - left, bottom - top);\n}\nconst coreDndBehaviors = [\n  /**\n   * Core Behavior that:\n   * 1. Calculates and selects a \"drag selection\"\n   * 2. Constructs and sets a drag ghost element\n   * 3. Forwards the dragstart event\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"drag.dragstart\",\n    guard: ({\n      snapshot,\n      dom,\n      event\n    }) => {\n      const dragSelection = getDragSelection({\n        snapshot,\n        eventSelection: event.position.selection\n      }), selectingEntireBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isSelectingEntireBlocks)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      }), draggedDomNodes = {\n        blockNodes: dom.getBlockNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        }),\n        childNodes: dom.getChildNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection\n          }\n        })\n      };\n      return {\n        dragSelection,\n        draggedDomNodes,\n        selectingEntireBlocks\n      };\n    },\n    actions: [({\n      dom,\n      event\n    }, {\n      dragSelection,\n      draggedDomNodes,\n      selectingEntireBlocks\n    }) => {\n      const dragGhost = document.createElement(\"div\");\n      if (selectingEntireBlocks) {\n        const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) => node.cloneNode(!0));\n        for (const block of clonedBlockNodes)\n          block instanceof HTMLElement && (block.style.position = \"relative\"), dragGhost.appendChild(block);\n        const customGhost = dragGhost.querySelector(\"[data-pt-drag-ghost-element]\");\n        if (customGhost && dragGhost.replaceChildren(customGhost), dragGhost.setAttribute(\"data-dragged\", \"\"), dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost), customGhost) {\n          const customGhostRect = customGhost.getBoundingClientRect(), x = event.originEvent.clientX - customGhostRect.left, y = event.originEvent.clientY - customGhostRect.top;\n          return dragGhost.style.width = `${customGhostRect.width}px`, dragGhost.style.height = `${customGhostRect.height}px`, [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n            type: \"select\",\n            at: dragSelection\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.effect)(() => {\n            dom.setDragGhost({\n              event,\n              ghost: {\n                element: dragGhost,\n                x,\n                y\n              }\n            });\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.forward)(event)];\n        } else {\n          const blocksDomRect = getCompoundClientRect(draggedDomNodes.blockNodes), x = event.originEvent.clientX - blocksDomRect.left, y = event.originEvent.clientY - blocksDomRect.top;\n          return dragGhost.style.width = `${blocksDomRect.width}px`, dragGhost.style.height = `${blocksDomRect.height}px`, [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n            type: \"select\",\n            at: dragSelection\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.effect)(() => {\n            dom.setDragGhost({\n              event,\n              ghost: {\n                element: dragGhost,\n                x,\n                y\n              }\n            });\n          }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.forward)(event)];\n        }\n      } else {\n        const clonedChildNodes = draggedDomNodes.childNodes.map((node) => node.cloneNode(!0));\n        for (const child of clonedChildNodes)\n          dragGhost.appendChild(child);\n        dragGhost.style.position = \"absolute\", dragGhost.style.left = \"-99999px\", dragGhost.style.boxSizing = \"border-box\", document.body.appendChild(dragGhost);\n        const childrenDomRect = getCompoundClientRect(draggedDomNodes.childNodes), x = event.originEvent.clientX - childrenDomRect.left, y = event.originEvent.clientY - childrenDomRect.top;\n        return dragGhost.style.width = `${childrenDomRect.width}px`, dragGhost.style.height = `${childrenDomRect.height}px`, [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n          type: \"select\",\n          at: dragSelection\n        }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.effect)(() => {\n          dom.setDragGhost({\n            event,\n            ghost: {\n              element: dragGhost,\n              x,\n              y\n            }\n          });\n        }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.forward)(event)];\n      }\n    }]\n  }),\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"drag.dragover\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const dragOrigin = event.dragOrigin;\n      return dragOrigin ? (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isOverlappingSelection)(event.position.selection)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      }) : !1;\n    },\n    actions: []\n  }),\n  /**\n   * If the drop position overlaps the drag origin, then the event should be\n   * cancelled.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"drag.drop\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const dragOrigin = event.dragOrigin, dropPosition = event.position.selection;\n      return dragOrigin ? (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isOverlappingSelection)(dropPosition)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection\n        }\n      }) : !1;\n    },\n    actions: []\n  }),\n  /**\n   * If we drop and have access to a drag origin, then we can deserialize\n   * without creating a new selection.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"drag.drop\",\n    guard: ({\n      event\n    }) => event.dragOrigin !== void 0,\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  /**\n   * Otherwise, we should to create a new selection.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"drag.drop\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"select\",\n      at: event.position.selection\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  /**\n   * Core Behavior that uses the drag origin to mimic a move operation during\n   * internal dragging.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"deserialization.success\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.originEvent.type !== \"drag.drop\" || event.originEvent.dragOrigin === void 0)\n        return !1;\n      const dragOrigin = event.originEvent.dragOrigin, dragSelection = getDragSelection({\n        eventSelection: dragOrigin.selection,\n        snapshot\n      }), dropPosition = event.originEvent.position.selection, droppingOnDragOrigin = dragOrigin ? (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isOverlappingSelection)(dropPosition)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      }) : !1, draggingEntireBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isSelectingEntireBlocks)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      }), draggedBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedBlocks)({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection\n        }\n      });\n      return droppingOnDragOrigin ? !1 : {\n        dropPosition,\n        draggingEntireBlocks,\n        draggedBlocks,\n        dragOrigin,\n        originEvent: event.originEvent\n      };\n    },\n    actions: [({\n      event\n    }, {\n      draggingEntireBlocks,\n      draggedBlocks,\n      dragOrigin,\n      dropPosition,\n      originEvent\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"select\",\n      at: dropPosition\n    }), ...draggingEntireBlocks ? draggedBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"delete.block\",\n      at: block.path\n    })) : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"delete\",\n      at: dragOrigin.selection\n    })], (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"insert.blocks\",\n      blocks: event.data,\n      placement: draggingEntireBlocks ? originEvent.position.block === \"start\" ? \"before\" : originEvent.position.block === \"end\" ? \"after\" : \"auto\" : \"auto\"\n    })]]\n  })\n], breakingAtTheEndOfTextBlock = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot);\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed)\n      return !1;\n    const atTheEndOfBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isAtTheEndOfBlock)(focusTextBlock)(snapshot), focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;\n    return atTheEndOfBlock ? {\n      focusListItem,\n      focusLevel\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    focusListItem,\n    focusLevel\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        text: \"\",\n        marks: []\n      }],\n      markDefs: [],\n      listItem: focusListItem,\n      level: focusLevel,\n      style: snapshot.context.schema.styles[0]?.name\n    },\n    placement: \"after\"\n  })]]\n}), breakingAtTheStartOfTextBlock = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot);\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed)\n      return !1;\n    const focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusSpan)(snapshot), focusDecorators = focusSpan?.node.marks?.filter((mark) => snapshot.context.schema.decorators.some((decorator) => decorator.name === mark) ?? []), focusAnnotations = focusSpan?.node.marks?.filter((mark) => !snapshot.context.schema.decorators.some((decorator) => decorator.name === mark)) ?? [], focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;\n    return (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isAtTheStartOfBlock)(focusTextBlock)(snapshot) ? {\n      focusAnnotations,\n      focusDecorators,\n      focusListItem,\n      focusLevel\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    focusAnnotations,\n    focusDecorators,\n    focusListItem,\n    focusLevel\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        marks: focusAnnotations.length === 0 ? focusDecorators : [],\n        text: \"\"\n      }],\n      listItem: focusListItem,\n      level: focusLevel,\n      style: snapshot.context.schema.styles[0]?.name\n    },\n    placement: \"before\",\n    select: \"none\"\n  })]]\n}), breakingEntireDocument = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!snapshot.context.selection || !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionExpanded)(snapshot))\n      return !1;\n    const firstBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFirstBlock)(snapshot), lastBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getLastBlock)(snapshot);\n    if (!firstBlock || !lastBlock)\n      return !1;\n    const firstBlockStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: firstBlock\n    }), selectionStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getSelectionStartPoint)(snapshot.context.selection), lastBlockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: lastBlock\n    }), selectionEndPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getSelectionEndPoint)(snapshot.context.selection);\n    return (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEqualSelectionPoints)(firstBlockStartPoint, selectionStartPoint) && (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEqualSelectionPoints)(lastBlockEndPoint, selectionEndPoint) ? {\n      selection: snapshot.context.selection\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n}), breakingEntireBlocks = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    if (!snapshot.context.selection || !(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionExpanded)(snapshot))\n      return !1;\n    const selectedBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedBlocks)(snapshot), selectionStartBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectionEndBlock)(snapshot);\n    if (!selectionStartBlock || !selectionEndBlock)\n      return !1;\n    const startBlockStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: selectionStartBlock\n    }), selectionStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getSelectionStartPoint)(snapshot.context.selection), endBlockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: selectionEndBlock\n    }), selectionEndPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getSelectionEndPoint)(snapshot.context.selection);\n    return (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEqualSelectionPoints)(selectionStartPoint, startBlockStartPoint) && (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEqualSelectionPoints)(selectionEndPoint, endBlockEndPoint) ? {\n      selectedBlocks\n    } : !1;\n  },\n  actions: [({\n    snapshot\n  }, {\n    selectedBlocks\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: {\n      _type: snapshot.context.schema.block.name,\n      children: [{\n        _type: snapshot.context.schema.span.name,\n        text: \"\",\n        marks: []\n      }]\n    },\n    placement: \"before\",\n    select: \"start\"\n  }), ...selectedBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete.block\",\n    at: block.path\n  }))]]\n}), breakingInlineObject = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot), focusInlineObject = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusInlineObject)(snapshot);\n    return selectionCollapsed && focusInlineObject;\n  },\n  actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"move.forward\",\n    distance: 1\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"split\"\n  })]]\n}), coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n  breakingInlineObject\n}, MAX_LIST_LEVEL = 10, clearListOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusSpan)(snapshot);\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0 && focusTextBlock.node.level === 1 ? {\n      focusTextBlock\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusTextBlock.path\n  })]]\n}), unindentListOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusSpan)(snapshot);\n    return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0 && focusTextBlock.node.level !== void 0 && focusTextBlock.node.level > 1 ? {\n      focusTextBlock,\n      level: focusTextBlock.node.level - 1\n    } : !1;\n  },\n  actions: [(_, {\n    focusTextBlock,\n    level\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"block.set\",\n    props: {\n      level\n    },\n    at: focusTextBlock.path\n  })]]\n}), mergeTextIntoListOnDelete = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.forward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusListBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusListBlock)(snapshot), nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getNextBlock)(snapshot);\n    return !focusListBlock || !nextBlock || !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(snapshot.context, nextBlock.node) || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEmptyTextBlock)(snapshot.context, focusListBlock.node) ? !1 : {\n      focusListBlock,\n      nextBlock\n    };\n  },\n  actions: [(_, {\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: nextBlock.node,\n    placement: \"auto\",\n    select: \"start\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete.block\",\n    at: nextBlock.path\n  })]]\n}), mergeTextIntoListOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => {\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)(snapshot), previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getPreviousBlock)(snapshot);\n    if (!focusTextBlock || !previousBlock || !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isListBlock)(snapshot.context, previousBlock.node) || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEmptyTextBlock)(snapshot.context, previousBlock.node))\n      return !1;\n    const previousBlockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: previousBlock\n    });\n    return {\n      focusTextBlock,\n      previousBlockEndPoint\n    };\n  },\n  actions: [(_, {\n    focusTextBlock,\n    previousBlockEndPoint\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"select\",\n    at: {\n      anchor: previousBlockEndPoint,\n      focus: previousBlockEndPoint\n    }\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: focusTextBlock.node,\n    placement: \"auto\",\n    select: \"start\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete.block\",\n    at: focusTextBlock.path\n  })]]\n}), clearListOnEnter = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.break\",\n  guard: ({\n    snapshot\n  }) => {\n    const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot), focusListBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusListBlock)(snapshot);\n    return !selectionCollapsed || !focusListBlock || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEmptyTextBlock)(snapshot.context, focusListBlock.node) ? !1 : {\n      focusListBlock\n    };\n  },\n  actions: [(_, {\n    focusListBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"block.unset\",\n    props: [\"listItem\", \"level\"],\n    at: focusListBlock.path\n  })]]\n}), indentListOnTab = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.tab.guard(event.originEvent))\n      return !1;\n    const selectedBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedBlocks)(snapshot), selectedListBlocks = selectedBlocks.flatMap((block) => (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isListBlock)(snapshot.context, block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"block.set\",\n    props: {\n      level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level + 1))\n    },\n    at: selectedListBlock.path\n  }))]\n}), unindentListOnShiftTab = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"keyboard.keydown\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (!defaultKeyboardShortcuts.shiftTab.guard(event.originEvent))\n      return !1;\n    const selectedBlocks = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedBlocks)(snapshot), selectedListBlocks = selectedBlocks.flatMap((block) => (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isListBlock)(snapshot.context, block.node) ? [{\n      node: block.node,\n      path: block.path\n    }] : []);\n    return selectedListBlocks.length === selectedBlocks.length ? {\n      selectedListBlocks\n    } : !1;\n  },\n  actions: [(_, {\n    selectedListBlocks\n  }) => selectedListBlocks.map((selectedListBlock) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"block.set\",\n    props: {\n      level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level - 1))\n    },\n    at: selectedListBlock.path\n  }))]\n}), inheritListLevel = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const focusListBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusListBlock)(snapshot);\n    if (!focusListBlock)\n      return !1;\n    const firstInsertedBlock = event.blocks.at(0), secondInsertedBlock = event.blocks.at(1), insertedListBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isListBlock)(snapshot.context, firstInsertedBlock) ? firstInsertedBlock : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isListBlock)(snapshot.context, secondInsertedBlock) ? secondInsertedBlock : void 0;\n    if (!insertedListBlock)\n      return !1;\n    const levelDifference = focusListBlock.node.level - insertedListBlock.level;\n    return levelDifference === 0 ? !1 : {\n      levelDifference,\n      insertedListBlock\n    };\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    levelDifference,\n    insertedListBlock\n  }) => {\n    let adjustLevel = !0, listStartBlockFound = !1;\n    return [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      ...event,\n      blocks: event.blocks.map((block) => (block._key === insertedListBlock._key && (listStartBlockFound = !0), adjustLevel ? listStartBlockFound && adjustLevel && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isListBlock)(snapshot.context, block) ? {\n        ...block,\n        level: Math.min(MAX_LIST_LEVEL, Math.max(1, block.level + levelDifference))\n      } : (listStartBlockFound && (adjustLevel = !1), block) : block))\n    })];\n  }]\n}), inheritListItem = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const focusListBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusListBlock)(snapshot);\n    if (!focusListBlock || (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEmptyTextBlock)(snapshot.context, focusListBlock.node))\n      return !1;\n    const firstInsertedBlock = event.blocks.at(0), secondInsertedBlock = event.blocks.at(1), insertedListBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isListBlock)(snapshot.context, firstInsertedBlock) ? firstInsertedBlock : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isListBlock)(snapshot.context, secondInsertedBlock) ? secondInsertedBlock : void 0;\n    return !insertedListBlock || focusListBlock.node.level !== insertedListBlock.level || focusListBlock.node.listItem === insertedListBlock.listItem ? !1 : {\n      listItem: focusListBlock.node.listItem,\n      insertedListBlock\n    };\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    listItem,\n    insertedListBlock\n  }) => {\n    let adjustListItem = !0, listStartBlockFound = !1;\n    return [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      ...event,\n      blocks: event.blocks.map((block) => (block._key === insertedListBlock._key && (listStartBlockFound = !0), adjustListItem ? listStartBlockFound && adjustListItem && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isListBlock)(snapshot.context, block) ? {\n        ...block,\n        listItem: block.level === insertedListBlock.level ? listItem : block.listItem\n      } : (listStartBlockFound && (adjustListItem = !1), block) : block))\n    })];\n  }]\n}), inheritListProperties = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.block\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.placement !== \"auto\" || event.block._type !== snapshot.context.schema.block.name || event.block.listItem !== void 0)\n      return !1;\n    const focusListBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusListBlock)(snapshot);\n    return !focusListBlock || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEmptyTextBlock)(snapshot.context, focusListBlock.node) ? !1 : {\n      level: focusListBlock.node.level,\n      listItem: focusListBlock.node.listItem\n    };\n  },\n  actions: [({\n    event\n  }, {\n    level,\n    listItem\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    ...event,\n    block: {\n      ...event.block,\n      level,\n      listItem\n    }\n  })]]\n}), coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  mergeTextIntoListOnDelete,\n  mergeTextIntoListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n  inheritListLevel,\n  inheritListItem,\n  inheritListProperties\n}, coreBehaviorsConfig = [coreAnnotationBehaviors.addAnnotationOnCollapsedSelection, coreDecoratorBehaviors.strongShortcut, coreDecoratorBehaviors.emShortcut, coreDecoratorBehaviors.underlineShortcut, coreDecoratorBehaviors.codeShortcut, ...coreDndBehaviors, coreBlockObjectBehaviors.clickingAboveLonelyBlockObject, coreBlockObjectBehaviors.clickingBelowLonelyBlockObject, coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject, coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject, coreBlockObjectBehaviors.breakingBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject, coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject, coreListBehaviors.clearListOnBackspace, coreListBehaviors.unindentListOnBackspace, coreListBehaviors.mergeTextIntoListOnDelete, coreListBehaviors.mergeTextIntoListOnBackspace, coreListBehaviors.clearListOnEnter, coreListBehaviors.indentListOnTab, coreListBehaviors.unindentListOnShiftTab, coreListBehaviors.inheritListLevel, coreListBehaviors.inheritListItem, coreListBehaviors.inheritListProperties, coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock, coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock, coreInsertBreakBehaviors.breakingEntireDocument, coreInsertBreakBehaviors.breakingEntireBlocks, coreInsertBreakBehaviors.breakingInlineObject].map((behavior) => ({\n  behavior,\n  priority: corePriority\n})), abstractAnnotationBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"annotation.set\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const blockKey = event.at[0]._key, markDefKey = event.at[2]._key, block = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: [{\n              _key: blockKey\n            }],\n            offset: 0\n          },\n          focus: {\n            path: [{\n              _key: blockKey\n            }],\n            offset: 0\n          }\n        }\n      }\n    });\n    if (!block)\n      return !1;\n    const updatedMarkDefs = block.node.markDefs?.map((markDef) => markDef._key === markDefKey ? {\n      ...markDef,\n      ...event.props\n    } : markDef);\n    return {\n      blockKey,\n      updatedMarkDefs\n    };\n  },\n  actions: [(_, {\n    blockKey,\n    updatedMarkDefs\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"block.set\",\n    at: [{\n      _key: blockKey\n    }],\n    props: {\n      markDefs: updatedMarkDefs\n    }\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"annotation.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isActiveAnnotation)(event.annotation.name)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"annotation.remove\",\n    annotation: event.annotation\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"annotation.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isActiveAnnotation)(event.annotation.name)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"annotation.add\",\n    annotation: event.annotation\n  })]]\n})], abstractDecoratorBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"decorator.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isActiveDecorator)(event.decorator)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"decorator.remove\",\n    decorator: event.decorator\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"decorator.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const manualSelection = event.at ? (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_31__.blockOffsetsToSelection)({\n      context: snapshot.context,\n      offsets: event.at\n    }) : null;\n    return manualSelection ? !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isActiveDecorator)(event.decorator)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: manualSelection\n      }\n    }) : !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isActiveDecorator)(event.decorator)(snapshot);\n  },\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    ...event,\n    type: \"decorator.add\"\n  })]]\n})], abstractDeleteBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.backward\",\n  guard: ({\n    snapshot\n  }) => snapshot.context.selection ? {\n    selection: snapshot.context.selection\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete\",\n    direction: \"backward\",\n    unit: event.unit,\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.forward\",\n  guard: ({\n    snapshot\n  }) => snapshot.context.selection ? {\n    selection: snapshot.context.selection\n  } : !1,\n  actions: [({\n    event\n  }, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete\",\n    direction: \"forward\",\n    unit: event.unit,\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.block\",\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete\",\n    at: {\n      anchor: {\n        path: event.at,\n        offset: 0\n      },\n      focus: {\n        path: event.at,\n        offset: 0\n      }\n    }\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.child\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const focusChild = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusChild)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return focusChild ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isSpan)(snapshot.context, focusChild.node) ? {\n      selection: {\n        anchor: {\n          path: event.at,\n          offset: 0\n        },\n        focus: {\n          path: event.at,\n          offset: focusChild.node.text.length\n        }\n      }\n    } : {\n      selection: {\n        anchor: {\n          path: event.at,\n          offset: 0\n        },\n        focus: {\n          path: event.at,\n          offset: 0\n        }\n      }\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"delete.text\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const selection = (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_31__.blockOffsetsToSelection)({\n      context: snapshot.context,\n      offsets: event.at\n    });\n    if (!selection)\n      return !1;\n    const trimmedSelection = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getTrimmedSelection)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        value: snapshot.context.value,\n        selection\n      }\n    });\n    return trimmedSelection ? {\n      selection: trimmedSelection\n    } : !1;\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"delete\",\n    at: selection\n  })]]\n})], abstractInsertBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => event.placement === \"before\",\n  actions: [({\n    event\n  }) => event.blocks.map((block, index) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"before\" : \"after\",\n    select: event.select ?? \"end\"\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => event.placement === \"after\",\n  actions: [({\n    event\n  }) => event.blocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"after\",\n    select: event.select ?? \"end\"\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (event.placement !== \"auto\")\n      return !1;\n    const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)(snapshot);\n    return focusTextBlock ? {\n      focusTextBlock\n    } : !1;\n  },\n  actions: [({\n    snapshot,\n    event\n  }, {\n    focusTextBlock\n  }) => event.blocks.length === 1 ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block: event.blocks[0],\n    placement: \"auto\",\n    select: event.select ?? \"end\"\n  })] : (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isEmptyTextBlock)(snapshot.context, focusTextBlock.node) ? event.blocks.map((block, index) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"auto\" : \"after\",\n    select: event.select ?? \"end\"\n  })) : event.blocks.flatMap((block, index) => index === 0 ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"split\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"select.previous block\",\n    select: \"end\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"auto\",\n    select: event.select ?? \"end\"\n  })] : index === event.blocks.length - 1 ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"select.next block\",\n    select: \"start\"\n  }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"auto\",\n    select: event.select ?? \"end\"\n  })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: \"after\",\n    select: event.select ?? \"end\"\n  })])]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.blocks\",\n  guard: ({\n    event\n  }) => event.placement === \"auto\",\n  actions: [({\n    event\n  }) => event.blocks.map((block, index) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.block\",\n    block,\n    placement: index === 0 ? \"auto\" : \"after\",\n    select: event.select ?? \"end\"\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.break\",\n  actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"split\"\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"insert.soft break\",\n  actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"insert.text\",\n    text: `\n`\n  })]]\n})], abstractKeyboardBehaviors = [\n  /**\n   * Allow raising an `insert.break` event when pressing Enter on an inline\n   * object.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      snapshot,\n      event\n    }) => defaultKeyboardShortcuts.break.guard(event.originEvent) && (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot) && (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusInlineObject)(snapshot),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"insert.break\"\n    })]]\n  }),\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      event\n    }) => defaultKeyboardShortcuts.lineBreak.guard(event.originEvent),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"insert.soft break\"\n    })]]\n  }),\n  /**\n   * Manual handling of undo shortcuts.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      event\n    }) => defaultKeyboardShortcuts.history.undo.guard(event.originEvent),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"history.undo\"\n    })]]\n  }),\n  /**\n   * Manual handling of redo shortcuts.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"keyboard.keydown\",\n    guard: ({\n      event\n    }) => defaultKeyboardShortcuts.history.redo.guard(event.originEvent),\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"history.redo\"\n    })]]\n  })\n], abstractListItemBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"list item.add\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [({\n    event\n  }, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"block.set\",\n    at: block.path,\n    props: {\n      level: 1,\n      listItem: event.listItem\n    }\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"list item.remove\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [(_, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"block.unset\",\n    at: block.path,\n    props: [\"level\", \"listItem\"]\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"list item.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isActiveListItem)(event.listItem)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"list item.remove\",\n    listItem: event.listItem\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"list item.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isActiveListItem)(event.listItem)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"list item.add\",\n    listItem: event.listItem\n  })]]\n})], abstractMoveBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"move.block up\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getPreviousBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return previousBlock ? {\n      previousBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    previousBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"move.block\",\n    at: event.at,\n    to: previousBlock.path\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"move.block down\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getNextBlock)({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0\n          },\n          focus: {\n            path: event.at,\n            offset: 0\n          }\n        }\n      }\n    });\n    return nextBlock ? {\n      nextBlock\n    } : !1;\n  },\n  actions: [({\n    event\n  }, {\n    nextBlock\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"move.block\",\n    at: event.at,\n    to: nextBlock.path\n  })]]\n})], abstractSelectBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"select.previous block\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const previousBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getPreviousBlock)(snapshot);\n    if (!previousBlock)\n      return !1;\n    const point = event.select === \"end\" ? (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: previousBlock\n    }) : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: previousBlock\n    });\n    return {\n      selection: {\n        anchor: point,\n        focus: point\n      }\n    };\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"select\",\n    at: selection\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"select.next block\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    const nextBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getNextBlock)(snapshot);\n    if (!nextBlock)\n      return !1;\n    const point = event.select === \"end\" ? (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.getBlockEndPoint)({\n      context: snapshot.context,\n      block: nextBlock\n    }) : (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getBlockStartPoint)({\n      context: snapshot.context,\n      block: nextBlock\n    });\n    return {\n      selection: {\n        anchor: point,\n        focus: point\n      }\n    };\n  },\n  actions: [(_, {\n    selection\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"select\",\n    at: selection\n  })]]\n})], abstractSplitBehaviors = [\n  /**\n   * You can't split an inline object.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot) && (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusInlineObject)(snapshot),\n    actions: []\n  }),\n  /**\n   * You can't split a block object.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot) && (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getFocusBlockObject)(snapshot),\n    actions: []\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      if (!selection || (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isSelectionCollapsed)(selection))\n        return !1;\n      const selectionStartBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectionStartBlock)(snapshot), selectionEndBlock = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectionEndBlock)(snapshot);\n      return !selectionStartBlock || !selectionEndBlock ? !1 : !(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(snapshot.context, selectionStartBlock.node) && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(snapshot.context, selectionEndBlock.node) ? {\n        selection\n      } : !1;\n    },\n    actions: [(_, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"delete\",\n      at: selection\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      return !selection || (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isSelectionCollapsed)(selection) ? !1 : {\n        selection\n      };\n    },\n    actions: [(_, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"delete\",\n      at: selection\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"split\"\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"split\",\n    guard: ({\n      snapshot\n    }) => {\n      const selection = snapshot.context.selection;\n      if (!selection || !(0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isSelectionCollapsed)(selection))\n        return !1;\n      const selectionStartPoint = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getSelectionStartPoint)(selection), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)(snapshot);\n      if (!focusTextBlock)\n        return !1;\n      const blockEndPoint = (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.getBlockEndPoint)({\n        context: snapshot.context,\n        block: focusTextBlock\n      }), newTextBlockSelection = {\n        anchor: selectionStartPoint,\n        focus: blockEndPoint\n      }, newTextBlock = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseBlock)({\n        block: (0,_chunks_es_util_slice_text_block_js__WEBPACK_IMPORTED_MODULE_30__.sliceTextBlock)({\n          context: {\n            ...snapshot.context,\n            selection: newTextBlockSelection\n          },\n          block: focusTextBlock.node\n        }),\n        context: snapshot.context,\n        options: {\n          refreshKeys: !0,\n          validateFields: !0\n        }\n      });\n      return newTextBlock ? {\n        newTextBlock,\n        newTextBlockSelection\n      } : !1;\n    },\n    actions: [(_, {\n      newTextBlock,\n      newTextBlockSelection\n    }) => (0,_chunks_es_util_is_selection_collapsed_js__WEBPACK_IMPORTED_MODULE_18__.isSelectionCollapsed)(newTextBlockSelection) ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"insert.block\",\n      block: newTextBlock,\n      placement: \"after\",\n      select: \"start\"\n    })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"delete\",\n      at: newTextBlockSelection\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"insert.block\",\n      block: newTextBlock,\n      placement: \"after\",\n      select: \"start\"\n    })]]\n  })\n], abstractStyleBehaviors = [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"style.add\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [({\n    event\n  }, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"block.set\",\n    at: block.path,\n    props: {\n      style: event.style\n    }\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"style.remove\",\n  guard: ({\n    snapshot\n  }) => ({\n    selectedTextBlocks: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getSelectedTextBlocks)(snapshot)\n  }),\n  actions: [(_, {\n    selectedTextBlocks\n  }) => selectedTextBlocks.map((block) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"block.unset\",\n    at: block.path,\n    props: [\"style\"]\n  }))]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"style.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isActiveStyle)(event.style)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"style.remove\",\n    style: event.style\n  })]]\n}), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"style.toggle\",\n  guard: ({\n    snapshot,\n    event\n  }) => !(0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isActiveStyle)(event.style)(snapshot),\n  actions: [({\n    event\n  }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    type: \"style.add\",\n    style: event.style\n  })]]\n})], raiseDeserializationSuccessOrFailure = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"deserialize\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    let success;\n    const failures = [];\n    for (const converter of snapshot.context.converters) {\n      const data = event.originEvent.originEvent.dataTransfer.getData(converter.mimeType);\n      if (!data)\n        continue;\n      const deserializeEvent = converter.deserialize({\n        snapshot,\n        event: {\n          type: \"deserialize\",\n          data\n        }\n      });\n      if (deserializeEvent.type === \"deserialization.success\") {\n        success = deserializeEvent;\n        break;\n      } else\n        failures.push(deserializeEvent);\n    }\n    return success || {\n      type: \"deserialization.failure\",\n      mimeType: \"*/*\",\n      reason: failures.map((failure) => failure.reason).join(\", \")\n    };\n  },\n  actions: [({\n    event\n  }, deserializeEvent) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    ...deserializeEvent,\n    originEvent: event.originEvent\n  })]]\n}), raiseSerializationSuccessOrFailure = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n  on: \"serialize\",\n  guard: ({\n    snapshot,\n    event\n  }) => {\n    if (snapshot.context.converters.length === 0)\n      return !1;\n    const serializeEvents = snapshot.context.converters.map((converter) => converter.serialize({\n      snapshot,\n      event: {\n        ...event,\n        originEvent: event.originEvent.type\n      }\n    }));\n    return serializeEvents.length === 0 ? !1 : serializeEvents;\n  },\n  actions: [({\n    event\n  }, serializeEvents) => serializeEvents.map((serializeEvent) => (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n    ...serializeEvent,\n    originEvent: event.originEvent\n  }))]\n}), abstractBehaviors = [\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"clipboard.copy\",\n    guard: ({\n      snapshot\n    }) => {\n      const focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusSpan)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot);\n      return focusSpan && selectionCollapsed;\n    },\n    actions: []\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"clipboard.copy\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"serialize\",\n      originEvent: event\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"clipboard.cut\",\n    guard: ({\n      snapshot\n    }) => {\n      const focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusSpan)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionCollapsed)(snapshot);\n      return focusSpan && selectionCollapsed;\n    },\n    actions: []\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"clipboard.cut\",\n    guard: ({\n      snapshot\n    }) => snapshot.context.selection ? {\n      selection: snapshot.context.selection\n    } : !1,\n    actions: [({\n      event\n    }, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"serialize\",\n      originEvent: event\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"delete\",\n      at: selection\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"drag.dragstart\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"serialize\",\n      originEvent: event\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"serialization.success\",\n    actions: [({\n      event\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        event.originEvent.originEvent.dataTransfer.setData(event.mimeType, event.data);\n      }\n    }]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"serialization.failure\",\n    actions: [({\n      event\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        console.warn(`Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`);\n      }\n    }]]\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"deserialization.success\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if ((0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.getFocusTextBlock)(snapshot) && event.mimeType === \"text/plain\" && event.originEvent.type === \"clipboard.paste\") {\n        const activeDecorators = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getActiveDecorators)(snapshot);\n        return {\n          activeAnnotations: (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getActiveAnnotations)(snapshot),\n          activeDecorators,\n          textRuns: event.data.flatMap((block) => (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)(snapshot.context, block) ? [(0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.getTextBlockText)(block)] : [])\n        };\n      }\n      return !1;\n    },\n    actions: [(_, {\n      activeAnnotations,\n      activeDecorators,\n      textRuns\n    }) => textRuns.flatMap((textRun, index) => index !== textRuns.length - 1 ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"insert.span\",\n      text: textRun,\n      decorators: activeDecorators,\n      annotations: activeAnnotations.map(({\n        _key,\n        _type,\n        ...value\n      }) => ({\n        name: _type,\n        value\n      }))\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"insert.break\"\n    })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"insert.span\",\n      text: textRun,\n      decorators: activeDecorators,\n      annotations: activeAnnotations.map(({\n        _key,\n        _type,\n        ...value\n      }) => ({\n        name: _type,\n        value\n      }))\n    })])]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"deserialization.success\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"insert.blocks\",\n      blocks: event.data,\n      placement: \"auto\"\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"deserialization.failure\",\n    actions: [({\n      event\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        console.warn(`Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`);\n      }\n    }]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"clipboard.paste\",\n    guard: ({\n      snapshot\n    }) => snapshot.context.selection && (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_21__.isSelectionExpanded)(snapshot) ? {\n      selection: snapshot.context.selection\n    } : !1,\n    actions: [({\n      event\n    }, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"delete\",\n      at: selection\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"clipboard.paste\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.defineBehavior)({\n    on: \"input.*\",\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_23__.raise)({\n      type: \"deserialize\",\n      originEvent: event\n    })]]\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSplitBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure\n];\nfunction isSyntheticBehaviorEvent(event) {\n  return !isCustomBehaviorEvent(event) && !isNativeBehaviorEvent(event) && !isAbstractBehaviorEvent(event);\n}\nconst abstractBehaviorEventTypes = [\"annotation.set\", \"annotation.toggle\", \"decorator.toggle\", \"delete.backward\", \"delete.block\", \"delete.child\", \"delete.forward\", \"delete.text\", \"deserialize\", \"deserialization.success\", \"deserialization.failure\", \"insert.blocks\", \"insert.break\", \"insert.soft break\", \"list item.add\", \"list item.remove\", \"list item.toggle\", \"move.block down\", \"move.block up\", \"select.previous block\", \"select.next block\", \"serialize\", \"serialization.success\", \"serialization.failure\", \"split\", \"style.add\", \"style.remove\", \"style.toggle\"];\nfunction isAbstractBehaviorEvent(event) {\n  return abstractBehaviorEventTypes.includes(event.type);\n}\nconst nativeBehaviorEventTypes = [\"clipboard.copy\", \"clipboard.cut\", \"clipboard.paste\", \"drag.dragstart\", \"drag.drag\", \"drag.dragend\", \"drag.dragenter\", \"drag.dragover\", \"drag.dragleave\", \"drag.drop\", \"input.*\", \"keyboard.keydown\", \"keyboard.keyup\", \"mouse.click\"];\nfunction isNativeBehaviorEvent(event) {\n  return nativeBehaviorEventTypes.includes(event.type);\n}\nfunction isCustomBehaviorEvent(event) {\n  return event.type.startsWith(\"custom.\");\n}\nconst debug$8 = debugWithName(\"behaviors:event\");\nfunction eventCategory(event) {\n  return isNativeBehaviorEvent(event) ? \"native\" : isAbstractBehaviorEvent(event) ? \"synthetic\" : isCustomBehaviorEvent(event) ? \"custom\" : \"synthetic\";\n}\nfunction performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  sendBack\n}) {\n  debug$8(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2));\n  const eventBehaviors = [...remainingEventBehaviors, ...abstractBehaviors].filter((behavior) => {\n    if (behavior.on === \"*\")\n      return !0;\n    const [listenedNamespace] = behavior.on.includes(\"*\") && behavior.on.includes(\".\") ? behavior.on.split(\".\") : [void 0], [eventNamespace] = event.type.includes(\".\") ? event.type.split(\".\") : [void 0];\n    return listenedNamespace !== void 0 && eventNamespace !== void 0 && listenedNamespace === eventNamespace || listenedNamespace !== void 0 && eventNamespace === void 0 && listenedNamespace === event.type ? !0 : behavior.on === event.type;\n  });\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault(), withApplyingBehaviorOperations(editor, () => {\n      debug$8(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2)), performOperation({\n        context: {\n          keyGenerator,\n          schema\n        },\n        operation: {\n          ...event,\n          editor\n        }\n      });\n    }), editor.onChange();\n    return;\n  }\n  const guardSnapshot = getSnapshot();\n  let nativeEventPrevented = !1, defaultBehaviorOverwritten = !1, eventBehaviorIndex = -1;\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++;\n    let shouldRun = !1;\n    try {\n      shouldRun = eventBehavior.guard === void 0 || eventBehavior.guard({\n        snapshot: guardSnapshot,\n        event,\n        dom: createEditorDom(sendBack, editor)\n      });\n    } catch (error) {\n      console.error(new Error(`Evaluating guard for \"${event.type}\" failed due to: ${error.message}`));\n    }\n    if (shouldRun) {\n      defaultBehaviorOverwritten = !0;\n      for (const actionSet of eventBehavior.actions) {\n        const actionsSnapshot = getSnapshot();\n        let actions = [];\n        try {\n          actions = actionSet({\n            snapshot: actionsSnapshot,\n            event,\n            dom: createEditorDom(sendBack, editor)\n          }, shouldRun);\n        } catch (error) {\n          console.error(new Error(`Evaluating actions for \"${event.type}\" failed due to: ${error.message}`));\n        }\n        if (actions.length !== 0) {\n          if (nativeEventPrevented = actions.some((action) => action.type === \"raise\" || action.type === \"execute\") || !actions.some((action) => action.type === \"forward\"), actions.some((action) => action.type === \"execute\")) {\n            withUndoStep(editor, () => {\n              for (const action of actions) {\n                if (action.type === \"effect\") {\n                  try {\n                    action.effect();\n                  } catch (error) {\n                    console.error(new Error(`Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`));\n                  }\n                  continue;\n                }\n                if (action.type === \"forward\") {\n                  const remainingEventBehaviors2 = eventBehaviors.slice(eventBehaviorIndex + 1);\n                  performEvent({\n                    mode: \"forward\",\n                    behaviors,\n                    remainingEventBehaviors: remainingEventBehaviors2,\n                    event: action.event,\n                    editor,\n                    keyGenerator,\n                    schema,\n                    getSnapshot,\n                    nativeEvent,\n                    sendBack\n                  });\n                  continue;\n                }\n                if (action.type === \"raise\") {\n                  performEvent({\n                    mode: \"raise\",\n                    behaviors,\n                    remainingEventBehaviors: behaviors,\n                    event: action.event,\n                    editor,\n                    keyGenerator,\n                    schema,\n                    getSnapshot,\n                    nativeEvent,\n                    sendBack\n                  });\n                  continue;\n                }\n                performEvent({\n                  mode: \"execute\",\n                  behaviors,\n                  remainingEventBehaviors: [],\n                  event: action.event,\n                  editor,\n                  keyGenerator,\n                  schema,\n                  getSnapshot,\n                  nativeEvent: void 0,\n                  sendBack\n                });\n              }\n            });\n            continue;\n          }\n          for (const action of actions) {\n            if (action.type === \"effect\") {\n              try {\n                action.effect();\n              } catch (error) {\n                console.error(new Error(`Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`));\n              }\n              continue;\n            }\n            if (action.type === \"forward\") {\n              const remainingEventBehaviors2 = eventBehaviors.slice(eventBehaviorIndex + 1);\n              performEvent({\n                mode: \"forward\",\n                behaviors,\n                remainingEventBehaviors: remainingEventBehaviors2,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack\n              });\n              continue;\n            }\n            if (action.type === \"raise\") {\n              performEvent({\n                mode: \"raise\",\n                behaviors,\n                remainingEventBehaviors: behaviors,\n                event: action.event,\n                editor,\n                keyGenerator,\n                schema,\n                getSnapshot,\n                nativeEvent,\n                sendBack\n              });\n              continue;\n            }\n            action.type === \"execute\" && console.error(\"Unexpected action type: `execute`\");\n          }\n        }\n      }\n      break;\n    }\n  }\n  !defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event) ? (nativeEvent?.preventDefault(), withApplyingBehaviorOperations(editor, () => {\n    debug$8(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2)), performOperation({\n      context: {\n        keyGenerator,\n        schema\n      },\n      operation: {\n        ...event,\n        editor\n      }\n    });\n  }), editor.onChange()) : nativeEventPrevented && nativeEvent?.preventDefault();\n}\nfunction sortByPriority(items) {\n  if (items.length === 0)\n    return [];\n  const itemsWithPriority = items.filter((item) => item.priority !== void 0), itemsWithoutPriority = items.filter((item) => item.priority === void 0);\n  if (itemsWithPriority.length === 0)\n    return items;\n  const itemsByPriorityId = new Map(itemsWithPriority.map((item) => [item.priority.id, item])), graph = /* @__PURE__ */ new Map(), inDegree = /* @__PURE__ */ new Map();\n  function ensureNode(id) {\n    graph.has(id) || (graph.set(id, /* @__PURE__ */ new Set()), inDegree.set(id, 0));\n  }\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id;\n    ensureNode(id);\n  }\n  function addEdge(fromId, toId) {\n    !graph.has(fromId) || !graph.has(toId) || (graph.get(fromId)?.add(toId), inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1));\n  }\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id, visited = /* @__PURE__ */ new Set();\n    let ref = item.priority.reference;\n    for (; ref; ) {\n      const refId = ref.priority.id;\n      if (ensureNode(refId), visited.has(refId))\n        throw new Error(\"Circular dependency detected in priorities\");\n      visited.add(refId), ref.importance === \"higher\" ? addEdge(id, refId) : addEdge(refId, id), ref = ref.priority.reference;\n    }\n  }\n  const queue = [];\n  for (const [id, degree] of inDegree)\n    degree === 0 && queue.push(id);\n  const result = [];\n  for (; queue.length > 0; ) {\n    const currentId = queue.shift(), currentItem = itemsByPriorityId.get(currentId);\n    currentItem && result.push(currentItem);\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1;\n      inDegree.set(neighborId, newDegree), newDegree === 0 && queue.push(neighborId);\n    }\n  }\n  for (const item of itemsWithPriority)\n    result.includes(item) || result.push(item);\n  return [...result, ...itemsWithoutPriority];\n}\nfunction createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema\n}) {\n  const selection = editor.selection ? slateRangeToSelection({\n    schema,\n    editor,\n    range: editor.selection\n  }) : null, context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value\n  };\n  return {\n    blockIndexMap: editor.blockIndexMap,\n    context,\n    decoratorState: editor.decoratorState\n  };\n}\nconst debug$7 = debugWithName(\"editor machine\"), editorMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_34__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {},\n    input: {},\n    tags: {}\n  },\n  actions: {\n    \"add behavior to context\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"add behavior\"), /* @__PURE__ */ new Set([...context.behaviors, event.behaviorConfig])),\n      behaviorsSorted: !1\n    }),\n    \"remove behavior from context\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      behaviors: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"remove behavior\"), context.behaviors.delete(event.behaviorConfig), /* @__PURE__ */ new Set([...context.behaviors]))\n    }),\n    \"emit patch event\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"internal.patch\"), event)),\n    \"emit mutation event\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"mutation\"), event)),\n    \"emit read only\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"read only\"\n    }),\n    \"emit editable\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"editable\"\n    }),\n    \"defer event\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingEvents: ({\n        context,\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, [\"internal.patch\", \"mutation\"]), [...context.pendingEvents, event])\n    }),\n    \"emit pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.e)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingEvents)\n        enqueue.emit(event);\n    }),\n    \"emit ready\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"ready\"\n    }),\n    \"clear pending events\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingEvents: []\n    }),\n    \"defer incoming patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingIncomingPatchesEvents: ({\n        context,\n        event\n      }) => event.type === \"patches\" ? [...context.pendingIncomingPatchesEvents, event] : context.pendingIncomingPatchesEvents\n    }),\n    \"emit pending incoming patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.e)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingIncomingPatchesEvents)\n        enqueue.emit(event);\n    }),\n    \"clear pending incoming patches\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingIncomingPatchesEvents: []\n    }),\n    \"handle blur\": ({\n      event\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"blur\");\n      try {\n        slate_react__WEBPACK_IMPORTED_MODULE_24__.ReactEditor.blur(event.editor);\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`));\n      }\n    },\n    \"handle focus\": ({\n      context\n    }) => {\n      if (!context.slateEditor) {\n        console.error(\"No Slate editor found to focus\");\n        return;\n      }\n      try {\n        const currentSelection = context.slateEditor.selection;\n        slate_react__WEBPACK_IMPORTED_MODULE_24__.ReactEditor.focus(context.slateEditor), currentSelection && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(context.slateEditor, currentSelection);\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`));\n      }\n    },\n    \"handle behavior event\": ({\n      context,\n      event,\n      self\n    }) => {\n      (0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, [\"behavior event\"]);\n      try {\n        const behaviors = [...context.behaviors.values()].map((config) => config.behavior);\n        performEvent({\n          mode: \"raise\",\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () => createEditorSnapshot({\n            converters: [...context.converters],\n            editor: event.editor,\n            keyGenerator: context.keyGenerator,\n            readOnly: self.getSnapshot().matches({\n              \"edit mode\": \"read only\"\n            }),\n            schema: context.schema\n          }),\n          nativeEvent: event.nativeEvent,\n          sendBack: (event2) => self.send(event2)\n        });\n      } catch (error) {\n        console.error(new Error(`Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`));\n      }\n    },\n    \"sort behaviors\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      behaviors: ({\n        context\n      }) => context.behaviorsSorted ? context.behaviors : new Set(sortByPriority([...context.behaviors.values()])),\n      behaviorsSorted: !0\n    })\n  },\n  guards: {\n    \"slate is busy\": ({\n      context\n    }) => context.slateEditor ? context.slateEditor.operations.length > 0 : !1\n  }\n}).createMachine({\n  id: \"editor\",\n  context: ({\n    input\n  }) => ({\n    behaviors: new Set(coreBehaviorsConfig),\n    behaviorsSorted: !1,\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? !1,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue\n  }),\n  on: {\n    \"add behavior\": {\n      actions: \"add behavior to context\"\n    },\n    \"remove behavior\": {\n      actions: \"remove behavior from context\"\n    },\n    \"update maxBlocks\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        maxBlocks: ({\n          event\n        }) => event.maxBlocks\n      })\n    },\n    \"update selection\": {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        selection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n        event\n      }) => ({\n        ...event,\n        type: \"selection\"\n      }))]\n    },\n    \"set drag ghost\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        dragGhost: ({\n          event\n        }) => event.ghost\n      })\n    }\n  },\n  type: \"parallel\",\n  states: {\n    \"edit mode\": {\n      initial: \"read only\",\n      states: {\n        \"read only\": {\n          initial: \"determine initial edit mode\",\n          on: {\n            \"behavior event\": {\n              actions: [\"sort behaviors\", \"handle behavior event\"],\n              guard: ({\n                event\n              }) => event.behaviorEvent.type === \"clipboard.copy\" || event.behaviorEvent.type === \"mouse.click\" || event.behaviorEvent.type === \"serialize\" || event.behaviorEvent.type === \"serialization.failure\" || event.behaviorEvent.type === \"serialization.success\" || event.behaviorEvent.type === \"select\"\n            }\n          },\n          states: {\n            \"determine initial edit mode\": {\n              entry: [() => {\n                debug$7(\"entry: edit mode->read only->determine initial edit mode\");\n              }],\n              exit: [() => {\n                debug$7(\"exit: edit mode->read only->determine initial edit mode\");\n              }],\n              on: {\n                \"done syncing value\": [{\n                  target: \"#editor.edit mode.read only.read only\",\n                  guard: ({\n                    context\n                  }) => context.initialReadOnly\n                }, {\n                  target: \"#editor.edit mode.editable\"\n                }]\n              }\n            },\n            \"read only\": {\n              entry: [() => {\n                debug$7(\"entry: edit mode->read only->read only\");\n              }],\n              exit: [() => {\n                debug$7(\"exit: edit mode->read only->read only\");\n              }],\n              on: {\n                \"update readOnly\": {\n                  guard: ({\n                    event\n                  }) => !event.readOnly,\n                  target: \"#editor.edit mode.editable\",\n                  actions: [\"emit editable\"]\n                }\n              }\n            }\n          }\n        },\n        editable: {\n          on: {\n            \"update readOnly\": {\n              guard: ({\n                event\n              }) => event.readOnly,\n              target: \"#editor.edit mode.read only.read only\",\n              actions: [\"emit read only\"]\n            },\n            \"behavior event\": {\n              actions: [\"sort behaviors\", \"handle behavior event\"]\n            },\n            blur: {\n              actions: \"handle blur\"\n            },\n            focus: {\n              target: \".focusing\",\n              actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n                slateEditor: ({\n                  event\n                }) => event.editor\n              })]\n            }\n          },\n          initial: \"idle\",\n          states: {\n            idle: {\n              entry: [() => {\n                debug$7(\"entry: edit mode->editable->idle\");\n              }],\n              exit: [() => {\n                debug$7(\"exit: edit mode->editable-idle\");\n              }],\n              on: {\n                dragstart: {\n                  actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n                    internalDrag: ({\n                      event\n                    }) => ({\n                      origin: event.origin\n                    })\n                  })],\n                  target: \"dragging internally\"\n                }\n              }\n            },\n            focusing: {\n              initial: \"checking if busy\",\n              states: {\n                \"checking if busy\": {\n                  entry: [() => {\n                    debug$7(\"entry: edit mode->editable->focusing->checking if busy\");\n                  }],\n                  exit: [() => {\n                    debug$7(\"exit: edit mode->editable->focusing->checking if busy\");\n                  }],\n                  always: [{\n                    guard: \"slate is busy\",\n                    target: \"busy\"\n                  }, {\n                    target: \"#editor.edit mode.editable.idle\",\n                    actions: [\"handle focus\"]\n                  }]\n                },\n                busy: {\n                  entry: [() => {\n                    debug$7(\"entry: edit mode->editable->focusing-busy\");\n                  }],\n                  exit: [() => {\n                    debug$7(\"exit: edit mode->editable->focusing->busy\");\n                  }],\n                  after: {\n                    10: {\n                      target: \"checking if busy\"\n                    }\n                  }\n                }\n              }\n            },\n            \"dragging internally\": {\n              entry: [() => {\n                debug$7(\"entry: edit mode->editable->dragging internally\");\n              }],\n              exit: [() => {\n                debug$7(\"exit: edit mode->editable->dragging internally\");\n              }, ({\n                context\n              }) => {\n                if (context.dragGhost)\n                  try {\n                    context.dragGhost.parentNode?.removeChild(context.dragGhost);\n                  } catch (error) {\n                    console.error(new Error(`Removing the drag ghost failed due to: ${error.message}`));\n                  }\n              }, (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n                dragGhost: void 0\n              }), (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n                internalDrag: void 0\n              })],\n              tags: [\"dragging internally\"],\n              on: {\n                dragend: {\n                  target: \"idle\"\n                },\n                drop: {\n                  target: \"idle\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    setup: {\n      initial: \"setting up\",\n      states: {\n        \"setting up\": {\n          entry: [() => {\n            debug$7(\"entry: setup->setting up\");\n          }],\n          exit: [() => {\n            debug$7(\"exit: setup->setting up\");\n          }, \"emit ready\", \"emit pending incoming patches\", \"clear pending incoming patches\"],\n          on: {\n            \"internal.patch\": {\n              actions: \"defer event\"\n            },\n            mutation: {\n              actions: \"defer event\"\n            },\n            \"done syncing value\": {\n              target: \"set up\"\n            },\n            patches: {\n              actions: [\"defer incoming patches\"]\n            }\n          }\n        },\n        \"set up\": {\n          type: \"parallel\",\n          states: {\n            \"value sync\": {\n              initial: \"idle\",\n              states: {\n                idle: {\n                  entry: [() => {\n                    debug$7(\"entry: setup->set up->value sync->idle\");\n                  }],\n                  exit: [() => {\n                    debug$7(\"exit: setup->set up->value sync->idle\");\n                  }],\n                  on: {\n                    patches: {\n                      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n                        event\n                      }) => event)]\n                    },\n                    \"syncing value\": {\n                      target: \"syncing value\"\n                    }\n                  }\n                },\n                \"syncing value\": {\n                  entry: [() => {\n                    debug$7(\"entry: setup->set up->value sync->syncing value\");\n                  }],\n                  exit: [() => {\n                    debug$7(\"exit: setup->set up->value sync->syncing value\");\n                  }, \"emit pending incoming patches\", \"clear pending incoming patches\"],\n                  on: {\n                    patches: {\n                      actions: [\"defer incoming patches\"]\n                    },\n                    \"done syncing value\": {\n                      target: \"idle\"\n                    }\n                  }\n                }\n              }\n            },\n            writing: {\n              initial: \"pristine\",\n              states: {\n                pristine: {\n                  initial: \"idle\",\n                  states: {\n                    idle: {\n                      entry: [() => {\n                        debug$7(\"entry: setup->set up->writing->pristine->idle\");\n                      }],\n                      exit: [() => {\n                        debug$7(\"exit: setup->set up->writing->pristine->idle\");\n                      }],\n                      on: {\n                        normalizing: {\n                          target: \"normalizing\"\n                        },\n                        \"internal.patch\": {\n                          actions: \"defer event\",\n                          target: \"#editor.setup.set up.writing.dirty\"\n                        },\n                        mutation: {\n                          actions: \"defer event\",\n                          target: \"#editor.setup.set up.writing.dirty\"\n                        }\n                      }\n                    },\n                    normalizing: {\n                      entry: [() => {\n                        debug$7(\"entry: setup->set up->writing->pristine->normalizing\");\n                      }],\n                      exit: [() => {\n                        debug$7(\"exit: setup->set up->writing->pristine->normalizing\");\n                      }],\n                      on: {\n                        \"done normalizing\": {\n                          target: \"idle\"\n                        },\n                        \"internal.patch\": {\n                          actions: \"defer event\"\n                        },\n                        mutation: {\n                          actions: \"defer event\"\n                        }\n                      }\n                    }\n                  }\n                },\n                dirty: {\n                  entry: [() => {\n                    debug$7(\"entry: setup->set up->writing->dirty\");\n                  }, \"emit pending events\", \"clear pending events\"],\n                  exit: [() => {\n                    debug$7(\"exit: setup->set up->writing->dirty\");\n                  }],\n                  on: {\n                    \"internal.patch\": {\n                      actions: \"emit patch event\"\n                    },\n                    mutation: {\n                      actions: \"emit mutation event\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n});\nfunction createLegacySchema(portableTextType) {\n  if (!portableTextType)\n    throw new Error(\"Parameter 'portabletextType' missing (required)\");\n  const blockType = portableTextType.of?.find(findBlockType);\n  if (!blockType)\n    throw new Error(\"Block type is not defined in this schema (required)\");\n  const childrenField = blockType.fields?.find((field) => field.name === \"children\");\n  if (!childrenField)\n    throw new Error(\"Children field for block type found in schema (required)\");\n  const ofType = childrenField.type.of;\n  if (!ofType)\n    throw new Error(\"Valid types for block children not found in schema (required)\");\n  const spanType = ofType.find((memberType) => memberType.name === \"span\");\n  if (!spanType)\n    throw new Error(\"Span type not found in schema (required)\");\n  const inlineObjectTypes = ofType.filter((memberType) => memberType.name !== \"span\") || [], blockObjectTypes = portableTextType.of?.filter((field) => field.name !== blockType.name) || [];\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: spanType.annotations\n  };\n}\nfunction resolveEnabledStyles(blockType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === \"style\");\n  if (!styleField)\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\");\n  const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter((style) => style.value);\n  if (!textStyles || textStyles.length === 0)\n    throw new Error(\"The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.\");\n  return textStyles;\n}\nfunction resolveEnabledDecorators(spanType) {\n  return spanType.decorators;\n}\nfunction resolveEnabledListItems(blockType) {\n  const listField = blockType.fields?.find((btField) => btField.name === \"listItem\");\n  if (!listField)\n    throw new Error(\"A field with name 'listItem' is not defined in the block type (required).\");\n  const listItems = listField.type.options?.list && listField.type.options.list.filter((list) => list.value);\n  if (!listItems)\n    throw new Error(\"The list field need at least to be an empty array\");\n  return listItems;\n}\nfunction findBlockType(type) {\n  return type.type ? findBlockType(type.type) : type.name === \"block\" ? type : null;\n}\nconst temporaryImageName = `tmp-${defaultKeyGenerator()}-image`, temporaryUrlName = `tmp-${defaultKeyGenerator()}-url`, temporaryObjectNames = {\n  image: temporaryImageName,\n  url: temporaryUrlName\n}, objectNames = {\n  [temporaryImageName]: \"image\",\n  [temporaryUrlName]: \"url\"\n}, defaultObjectTitles = {\n  image: \"Image\",\n  url: \"URL\"\n};\nfunction legacySchemaToEditorSchema(schema) {\n  return {\n    annotations: schema.annotations.map((annotation) => ({\n      name: annotation.name,\n      fields: annotation.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title\n      })),\n      title: annotation.title\n    })),\n    block: {\n      name: schema.block.name\n    },\n    blockObjects: schema.blockObjects.map((blockObject) => ({\n      name: blockObject.name,\n      fields: blockObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title\n      })),\n      title: blockObject.title\n    })),\n    decorators: schema.decorators.map((decorator) => ({\n      name: decorator.value,\n      title: decorator.title,\n      value: decorator.value\n    })),\n    inlineObjects: schema.inlineObjects.map((inlineObject) => ({\n      name: inlineObject.name,\n      fields: inlineObject.fields.map((field) => ({\n        name: field.name,\n        type: field.type.jsonType,\n        title: field.type.title\n      })),\n      title: inlineObject.title\n    })),\n    span: {\n      name: schema.span.name\n    },\n    styles: schema.styles.map((style) => ({\n      name: style.value,\n      title: style.title,\n      value: style.value\n    })),\n    lists: schema.lists.map((list) => ({\n      name: list.value,\n      title: list.title,\n      value: list.value\n    }))\n  };\n}\nfunction compileSchemaDefinitionToLegacySchema(definition) {\n  const blockObjects = definition?.blockObjects?.map((blockObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_37__.defineType)({\n    type: \"object\",\n    // Very naive way to work around `SanitySchema.compile` adding default\n    // fields to objects with certain names.\n    name: temporaryObjectNames[blockObject.name] ?? blockObject.name,\n    title: blockObject.title === void 0 ? (\n      // This avoids the default title which is a title case of the object name\n      defaultObjectTitles[blockObject.name]\n    ) : blockObject.title,\n    fields: blockObject.fields?.map((field) => ({\n      name: field.name,\n      type: field.type,\n      title: field.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_12__(field.name)\n    })) ?? []\n  })) ?? [], inlineObjects = definition?.inlineObjects?.map((inlineObject) => (0,_sanity_types__WEBPACK_IMPORTED_MODULE_37__.defineType)({\n    type: \"object\",\n    // Very naive way to work around `SanitySchema.compile` adding default\n    // fields to objects with certain names.\n    name: temporaryObjectNames[inlineObject.name] ?? inlineObject.name,\n    title: inlineObject.title === void 0 ? (\n      // This avoids the default title which is a title case of the object name\n      defaultObjectTitles[inlineObject.name]\n    ) : inlineObject.title,\n    fields: inlineObject.fields?.map((field) => ({\n      name: field.name,\n      type: field.type,\n      title: field.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_12__(field.name)\n    })) ?? []\n  })) ?? [], portableTextSchema = (0,_sanity_types__WEBPACK_IMPORTED_MODULE_37__.defineField)({\n    type: \"array\",\n    name: \"portable-text\",\n    of: [...blockObjects.map((blockObject) => ({\n      type: blockObject.name\n    })), {\n      type: \"block\",\n      name: \"block\",\n      of: inlineObjects.map((inlineObject) => ({\n        type: inlineObject.name\n      })),\n      marks: {\n        decorators: definition?.decorators?.map((decorator) => ({\n          title: decorator.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_12__(decorator.name),\n          value: decorator.name\n        })) ?? [],\n        annotations: definition?.annotations?.map((annotation) => ({\n          name: annotation.name,\n          type: \"object\",\n          title: annotation.title,\n          fields: annotation.fields?.map((field) => ({\n            name: field.name,\n            title: field.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_12__(field.name),\n            type: field.type\n          })) ?? []\n        })) ?? []\n      },\n      lists: definition?.lists?.map((list) => ({\n        value: list.name,\n        title: list.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_12__(list.name)\n      })) ?? [],\n      styles: definition?.styles?.map((style) => ({\n        value: style.name,\n        title: style.title ?? lodash_startcase__WEBPACK_IMPORTED_MODULE_12__(style.name)\n      })) ?? []\n    }]\n  }), schema = _sanity_schema__WEBPACK_IMPORTED_MODULE_28__.Schema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects]\n  }).get(\"portable-text\"), pteSchema = createLegacySchema(schema);\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) => objectNames[blockObject.name] !== void 0 ? {\n      ...blockObject,\n      name: objectNames[blockObject.name],\n      type: {\n        ...blockObject.type,\n        name: objectNames[blockObject.name]\n      }\n    } : blockObject),\n    inlineObjects: pteSchema.inlineObjects.map((inlineObject) => objectNames[inlineObject.name] !== void 0 ? {\n      ...inlineObject,\n      name: objectNames[inlineObject.name]\n    } : inlineObject)\n  };\n}\nconst debug$6 = debugWithName(\"mutation-machine\"), mutationMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_34__.setup)({\n  types: {\n    context: {},\n    events: {},\n    input: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      readOnly: ({\n        context,\n        event\n      }) => event.type === \"update readOnly\" ? event.readOnly : context.readOnly\n    }),\n    \"emit patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"patch\"), {\n      type: \"patch\",\n      patch: event.patch\n    })),\n    \"emit has pending mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"has pending mutations\"\n    }),\n    \"emit mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.e)(({\n      context,\n      enqueue\n    }) => {\n      for (const bulk of context.pendingMutations)\n        enqueue.emit({\n          type: \"mutation\",\n          patches: bulk.patches,\n          snapshot: bulk.value\n        });\n    }),\n    \"clear pending mutations\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingMutations: []\n    }),\n    \"defer mutation\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingMutations: ({\n        context,\n        event\n      }) => {\n        if ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"patch\"), context.pendingMutations.length === 0)\n          return [{\n            operationId: event.operationId,\n            value: event.value,\n            patches: [event.patch]\n          }];\n        const lastBulk = context.pendingMutations.at(-1);\n        return lastBulk && lastBulk.operationId === event.operationId ? context.pendingMutations.slice(0, -1).concat({\n          value: event.value,\n          operationId: lastBulk.operationId,\n          patches: [...lastBulk.patches, event.patch]\n        }) : context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch]\n        });\n      }\n    }),\n    \"clear pending patch events\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingPatchEvents: []\n    }),\n    \"defer patch\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingPatchEvents: ({\n        context,\n        event\n      }) => event.type === \"patch\" ? [...context.pendingPatchEvents, event] : context.pendingPatchEvents\n    }),\n    \"emit pending patch events\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.e)(({\n      context,\n      enqueue\n    }) => {\n      for (const event of context.pendingPatchEvents)\n        enqueue.emit(event);\n    })\n  },\n  actors: {\n    \"type listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_38__.fromCallback)(({\n      input,\n      sendBack\n    }) => {\n      const originalApply = input.slateEditor.apply;\n      return input.slateEditor.apply = (op) => {\n        op.type === \"insert_text\" || op.type === \"remove_text\" ? sendBack({\n          type: \"typing\"\n        }) : sendBack({\n          type: \"not typing\"\n        }), originalApply(op);\n      }, () => {\n        input.slateEditor.apply = originalApply;\n      };\n    }),\n    \"mutation debouncer\": (0,xstate__WEBPACK_IMPORTED_MODULE_38__.fromCallback)(({\n      sendBack\n    }) => {\n      const interval = setInterval(() => {\n        sendBack({\n          type: \"mutation delay passed\"\n        });\n      },  false ? 0 : 0);\n      return () => {\n        clearInterval(interval);\n      };\n    })\n  },\n  guards: {\n    \"is read-only\": ({\n      context\n    }) => context.readOnly,\n    \"is typing\": (0,xstate__WEBPACK_IMPORTED_MODULE_39__.e)({\n      typing: \"typing\"\n    }),\n    \"slate is normalizing\": ({\n      context\n    }) => slate__WEBPACK_IMPORTED_MODULE_16__.Editor.isNormalizing(context.slateEditor)\n  },\n  delays: {\n    \"type debounce\":  false ? 0 : 250\n  }\n}).createMachine({\n  id: \"mutation\",\n  context: ({\n    input\n  }) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor\n  }),\n  on: {\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  type: \"parallel\",\n  states: {\n    typing: {\n      initial: \"idle\",\n      invoke: {\n        src: \"type listener\",\n        input: ({\n          context\n        }) => ({\n          slateEditor: context.slateEditor\n        })\n      },\n      states: {\n        idle: {\n          entry: [() => {\n            debug$6(\"entry: typing->idle\");\n          }],\n          exit: [() => {\n            debug$6(\"exit: typing->idle\"), debug$6(\"entry: typing->typing\");\n          }],\n          on: {\n            typing: {\n              target: \"typing\"\n            }\n          }\n        },\n        typing: {\n          after: {\n            \"type debounce\": {\n              target: \"idle\",\n              actions: [() => {\n                debug$6(\"exit: typing->typing\");\n              }]\n            }\n          },\n          on: {\n            \"not typing\": {\n              target: \"idle\"\n            },\n            typing: {\n              target: \"typing\",\n              reenter: !0\n            }\n          }\n        }\n      }\n    },\n    mutations: {\n      initial: \"idle\",\n      states: {\n        idle: {\n          entry: [() => {\n            debug$6(\"entry: mutations->idle\");\n          }],\n          exit: [() => {\n            debug$6(\"exit: mutations->idle\");\n          }],\n          on: {\n            patch: [{\n              guard: \"is read-only\",\n              actions: [\"defer patch\", \"defer mutation\"],\n              target: \"has pending mutations\"\n            }, {\n              actions: [\"emit patch\", \"defer mutation\"],\n              target: \"has pending mutations\"\n            }]\n          }\n        },\n        \"has pending mutations\": {\n          entry: [() => {\n            debug$6(\"entry: mutations->has pending mutations\");\n          }, \"emit has pending mutations\"],\n          exit: [() => {\n            debug$6(\"exit: mutations->has pending mutations\");\n          }],\n          invoke: {\n            src: \"mutation debouncer\"\n          },\n          on: {\n            \"mutation delay passed\": {\n              guard: (0,xstate__WEBPACK_IMPORTED_MODULE_39__.d)([(0,xstate__WEBPACK_IMPORTED_MODULE_39__.n)(\"is read-only\"), (0,xstate__WEBPACK_IMPORTED_MODULE_39__.n)(\"is typing\"), \"slate is normalizing\"]),\n              target: \"idle\",\n              actions: [\"emit pending patch events\", \"clear pending patch events\", \"emit mutations\", \"clear pending mutations\"]\n            },\n            patch: [{\n              guard: \"is read-only\",\n              actions: [\"defer patch\", \"defer mutation\"]\n            }, {\n              actions: [\"emit patch\", \"defer mutation\"]\n            }]\n          }\n        }\n      }\n    }\n  }\n}), debug$5 = debugWithName(\"API:editable\");\nfunction createEditableAPI(editor, editorActor) {\n  const types = editorActor.getSnapshot().context.schema;\n  return {\n    focus: () => {\n      editorActor.send({\n        type: \"focus\",\n        editor\n      });\n    },\n    blur: () => {\n      editorActor.send({\n        type: \"blur\",\n        editor\n      });\n    },\n    toggleMark: (mark) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"decorator.toggle\",\n          decorator: mark\n        },\n        editor\n      });\n    },\n    toggleList: (listItem) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"list item.toggle\",\n          listItem\n        },\n        editor\n      });\n    },\n    toggleBlockStyle: (style) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"style.toggle\",\n          style\n        },\n        editor\n      });\n    },\n    isMarkActive: (mark) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      });\n      return (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getActiveDecorators)(snapshot).includes(mark);\n    },\n    marks: () => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      }), activeAnnotations = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getActiveAnnotationsMarks)(snapshot), activeDecorators = (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.getActiveDecorators)(snapshot);\n      return [...activeAnnotations, ...activeDecorators];\n    },\n    undo: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.undo\"\n        },\n        editor\n      });\n    },\n    redo: () => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"history.redo\"\n        },\n        editor\n      });\n    },\n    select: (selection) => {\n      const slateSelection = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection\n        },\n        blockIndexMap: editor.blockIndexMap\n      });\n      slateSelection ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(editor, slateSelection) : slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(editor), editor.onChange();\n    },\n    focusBlock: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_16__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block)\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n      }\n    },\n    focusChild: () => {\n      if (editor.selection) {\n        const block = slate__WEBPACK_IMPORTED_MODULE_16__.Node.descendant(editor, editor.selection.focus.path.slice(0, 1));\n        if (block && editor.isTextBlock(block))\n          return fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0].children[editor.selection.focus.path[1]];\n      }\n    },\n    insertChild: (type, value) => {\n      if (type.name !== types.span.name)\n        return editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.inline object\",\n            inlineObject: {\n              name: type.name,\n              value\n            }\n          },\n          editor\n        }), editor.selection ? slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        })?.focus.path ?? [] : [];\n      if (!editor.selection)\n        throw new Error(\"The editor has no selection\");\n      const [focusBlock] = Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n        at: editor.selection.focus.path.slice(0, 1),\n        match: (n) => n._type === types.block.name\n      }))[0] || [void 0];\n      if (!focusBlock)\n        throw new Error(\"No focused text block\");\n      if (type.name !== types.span.name && !types.inlineObjects.some((t) => t.name === type.name))\n        throw new Error(\"This type cannot be inserted as a child to a text block\");\n      const child = toSlateValue([{\n        _key: editorActor.getSnapshot().context.keyGenerator(),\n        _type: types.block.name,\n        children: [{\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          _type: type.name,\n          ...value || {}\n        }]\n      }], {\n        schemaTypes: editorActor.getSnapshot().context.schema\n      })[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode2 = child._type === types.span.name, focusNode = slate__WEBPACK_IMPORTED_MODULE_16__.Node.get(editor, focusChildPath);\n      return isSpanNode2 && focusNode._type !== types.span.name && (debug$5(\"Inserting span child next to inline object child, moving selection + 1\"), editor.move({\n        distance: 1,\n        unit: \"character\"\n      })), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(editor, child, {\n        select: !0,\n        at: editor.selection\n      }), editor.onChange(), editor.selection ? slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range: editor.selection\n      })?.focus.path ?? [] : [];\n    },\n    insertBlock: (type, value) => (editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"insert.block\",\n        block: {\n          _type: type.name,\n          ...value || {}\n        },\n        placement: \"auto\"\n      },\n      editor\n    }), editor.selection ? slateRangeToSelection({\n      schema: editorActor.getSnapshot().context.schema,\n      editor,\n      range: editor.selection\n    })?.focus.path ?? [] : []),\n    hasBlockStyle: (style) => {\n      try {\n        return isStyleActive({\n          editor,\n          style\n        });\n      } catch {\n        return !1;\n      }\n    },\n    hasListStyle: (listItem) => {\n      try {\n        return isListItemActive({\n          editor,\n          listItem\n        });\n      } catch {\n        return !1;\n      }\n    },\n    isVoid: (element) => ![types.block.name, types.span.name].includes(element._type),\n    findByPath: (path) => {\n      const slatePath = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: {\n            focus: {\n              path,\n              offset: 0\n            },\n            anchor: {\n              path,\n              offset: 0\n            }\n          }\n        },\n        blockIndexMap: editor.blockIndexMap\n      });\n      if (slatePath) {\n        const [block, blockPath] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, slatePath.focus.path.slice(0, 1));\n        if (block && blockPath && typeof block._key == \"string\") {\n          if (path.length === 1 && slatePath.focus.path.length === 1)\n            return [fromSlateValue([block], types.block.name)[0], [{\n              _key: block._key\n            }]];\n          const ptBlock = fromSlateValue([block], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]];\n            if (ptChild)\n              return [ptChild, [{\n                _key: block._key\n              }, \"children\", {\n                _key: ptChild._key\n              }]];\n          }\n        }\n      }\n      return [void 0, void 0];\n    },\n    findDOMNode: (element) => {\n      let node;\n      try {\n        const [item] = Array.from(slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n          at: [],\n          match: (n) => n._key === element._key\n        }) || [])[0] || [void 0];\n        node = slate_react__WEBPACK_IMPORTED_MODULE_24__.ReactEditor.toDOMNode(editor, item);\n      } catch {\n      }\n      return node;\n    },\n    activeAnnotations: () => {\n      if (!editor.selection || editor.selection.focus.path.length < 2)\n        return [];\n      try {\n        const activeAnnotations = [], spans = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0\n        });\n        for (const [span, path] of spans) {\n          const [block] = slate__WEBPACK_IMPORTED_MODULE_16__.Editor.node(editor, path, {\n            depth: 1\n          });\n          editor.isTextBlock(block) && block.markDefs?.forEach((def) => {\n            slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);\n          });\n        }\n        return activeAnnotations;\n      } catch {\n        return [];\n      }\n    },\n    isAnnotationActive: (annotationType) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor\n      });\n      return (0,_chunks_es_selector_is_selecting_entire_blocks_js__WEBPACK_IMPORTED_MODULE_20__.isActiveAnnotation)(annotationType)(snapshot);\n    },\n    addAnnotation: (type, value) => {\n      let paths;\n      return slate__WEBPACK_IMPORTED_MODULE_16__.Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationOperationImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types\n          },\n          operation: {\n            annotation: {\n              name: type.name,\n              value: value ?? {}\n            },\n            editor\n          }\n        });\n      }), editor.onChange(), paths;\n    },\n    delete: (selection, options) => {\n      if (selection) {\n        const range = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: editor.value,\n            selection\n          },\n          blockIndexMap: editor.blockIndexMap\n        });\n        if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0))\n          throw new Error(\"Invalid range\");\n        if (range) {\n          if (!options?.mode || options?.mode === \"selected\") {\n            debug$5(\"Deleting content in selection\"), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.delete(editor, {\n              at: range,\n              hanging: !0,\n              voids: !0\n            }), editor.onChange();\n            return;\n          }\n          if (options?.mode === \"blocks\" && (debug$5(\"Deleting blocks touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => editor.isTextBlock(node) || !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(node)\n          })), options?.mode === \"children\" && (debug$5(\"Deleting children touched by selection\"), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(editor, {\n            at: range,\n            voids: !0,\n            match: (node) => node._type === types.span.name || // Text children\n            !editor.isTextBlock(node) && slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(node)\n          })), editor.children.length === 0) {\n            const placeholderBlock = createPlaceholderBlock(editorActor.getSnapshot().context);\n            editor.children = [placeholderBlock], editor.value = [placeholderBlock], buildIndexMaps({\n              schema: editorActor.getSnapshot().context.schema,\n              value: editor.value\n            }, {\n              blockIndexMap: editor.blockIndexMap,\n              listIndexMap: editor.listIndexMap\n            });\n          }\n          editor.onChange();\n        }\n      }\n    },\n    removeAnnotation: (type) => {\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"annotation.remove\",\n          annotation: {\n            name: type.name\n          }\n        },\n        editor\n      });\n    },\n    getSelection: () => {\n      let ptRange = null;\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);\n        if (existing)\n          return existing;\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection\n        }), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);\n      }\n      return ptRange;\n    },\n    getValue: () => fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),\n    isCollapsedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed(editor.selection),\n    isExpandedSelection: () => !!editor.selection && slate__WEBPACK_IMPORTED_MODULE_16__.Range.isExpanded(editor.selection),\n    insertBreak: () => {\n      editor.insertBreak(), editor.onChange();\n    },\n    getFragment: () => fromSlateValue(editor.getFragment(), types.block.name),\n    isSelectionsOverlapping: (selectionA, selectionB) => {\n      const rangeA = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionA\n        },\n        blockIndexMap: editor.blockIndexMap\n      }), rangeB = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionB\n        },\n        blockIndexMap: editor.blockIndexMap\n      });\n      return slate__WEBPACK_IMPORTED_MODULE_16__.Range.isRange(rangeA) && slate__WEBPACK_IMPORTED_MODULE_16__.Range.isRange(rangeB) && slate__WEBPACK_IMPORTED_MODULE_16__.Range.includes(rangeA, rangeB);\n    }\n  };\n}\nconst relayMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_34__.setup)({\n  types: {\n    context: {},\n    events: {},\n    emitted: {}\n  }\n}).createMachine({\n  id: \"relay\",\n  context: {\n    prevSelection: null,\n    lastEventWasFocused: !1\n  },\n  on: {\n    focused: {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        lastEventWasFocused: !0\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n        event\n      }) => event)]\n    },\n    selection: [{\n      guard: ({\n        context\n      }) => context.lastEventWasFocused,\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        prevSelection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n        event\n      }) => event), (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        lastEventWasFocused: !1\n      })]\n    }, {\n      guard: ({\n        context,\n        event\n      }) => context.prevSelection !== event.selection,\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        prevSelection: ({\n          event\n        }) => event.selection\n      }), (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n        event\n      }) => event), (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        lastEventWasFocused: !1\n      })]\n    }],\n    \"*\": {\n      actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n        event\n      }) => event), (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        lastEventWasFocused: !1\n      })]\n    }\n  }\n});\nfunction validateValue(value, types, keyGenerator) {\n  let resolution = null, valid = !0;\n  const validChildTypes = [types.span.name, ...types.inlineObjects.map((t) => t.name)], validBlockTypes = [types.block.name, ...types.blockObjects.map((t) => t.name)];\n  return value === void 0 ? {\n    valid: !0,\n    resolution: null,\n    value\n  } : !Array.isArray(value) || value.length === 0 ? {\n    valid: !1,\n    resolution: {\n      patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([])],\n      description: \"Editor value must be an array of Portable Text blocks, or undefined.\",\n      action: \"Unset the value\",\n      item: value,\n      i18n: {\n        description: \"inputs.portable-text.invalid-value.not-an-array.description\",\n        action: \"inputs.portable-text.invalid-value.not-an-array.action\"\n      }\n    },\n    value\n  } : (value.some((blk, index) => {\n    if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_13__(blk))\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([index])],\n        description: `Block must be an object, got ${String(blk)}`,\n        action: \"Unset invalid item\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.not-an-object.description\",\n          action: \"inputs.portable-text.invalid-value.not-an-object.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._key || typeof blk._key != \"string\")\n      return resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)({\n          ...blk,\n          _key: keyGenerator()\n        }, [index])],\n        description: `Block at index ${index} is missing required _key.`,\n        action: \"Set the block with a random _key value\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-key.description\",\n          action: \"inputs.portable-text.invalid-value.missing-key.action\",\n          values: {\n            index\n          }\n        }\n      }, !0;\n    if (!blk._type || !validBlockTypes.includes(blk._type)) {\n      if (blk._type === \"block\") {\n        const currentBlockTypeName = types.block.name;\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)({\n            ...blk,\n            _type: currentBlockTypeName\n          }, [{\n            _key: blk._key\n          }])],\n          description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n          action: `Use type '${currentBlockTypeName}'`,\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.incorrect-block-type.description\",\n            action: \"inputs.portable-text.invalid-value.incorrect-block-type.action\",\n            values: {\n              key: blk._key,\n              expectedTypeName: currentBlockTypeName\n            }\n          }\n        }, !0;\n      }\n      return !blk._type && (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.isTextBlock)({\n        schema: types\n      }, {\n        ...blk,\n        _type: types.block.name\n      }) ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)({\n          ...blk,\n          _type: types.block.name\n        }, [{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n        action: `Use type '${types.block.name}'`,\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-block-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-block-type.action\",\n          values: {\n            key: blk._key,\n            expectedTypeName: types.block.name\n          }\n        }\n      }, !0) : blk._type ? (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.disallowed-type.description\",\n          action: \"inputs.portable-text.invalid-value.disallowed-type.action\",\n          values: {\n            key: blk._key,\n            typeName: blk._type\n          }\n        }\n      }, !0) : (resolution = {\n        patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n          _key: blk._key\n        }])],\n        description: `Block with _key '${blk._key}' is missing an _type property`,\n        action: \"Remove the block\",\n        item: blk,\n        i18n: {\n          description: \"inputs.portable-text.invalid-value.missing-type.description\",\n          action: \"inputs.portable-text.invalid-value.missing-type.action\",\n          values: {\n            key: blk._key\n          }\n        }\n      }, !0);\n    }\n    if (blk._type === types.block.name) {\n      const textBlock = blk;\n      if (textBlock.children && !Array.isArray(textBlock.children))\n        return resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)({\n            children: []\n          }, [{\n            _key: textBlock._key\n          }])],\n          description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n          action: \"Reset the children property\",\n          item: textBlock,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-or-invalid-children.description\",\n            action: \"inputs.portable-text.invalid-value.missing-or-invalid-children.action\",\n            values: {\n              key: textBlock._key\n            }\n          }\n        }, !0;\n      if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {\n        const newSpan = {\n          _type: types.span.name,\n          _key: keyGenerator(),\n          text: \"\",\n          marks: []\n        };\n        return resolution = {\n          autoResolve: !0,\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.setIfMissing)([], [{\n            _key: blk._key\n          }, \"children\"]), (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.insert)([newSpan], \"after\", [{\n            _key: blk._key\n          }, \"children\", 0])],\n          description: `Children for text block with _key '${blk._key}' is empty.`,\n          action: \"Insert an empty text\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.empty-children.description\",\n            action: \"inputs.portable-text.invalid-value.empty-children.action\",\n            values: {\n              key: blk._key\n            }\n          }\n        }, !0;\n      }\n      const allUsedMarks = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__(lodash_flatten_js__WEBPACK_IMPORTED_MODULE_7__(textBlock.children.filter((cld) => cld._type === types.span.name).map((cld) => cld.marks || [])));\n      if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n        const unusedMarkDefs = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__(blk.markDefs.map((def) => def._key).filter((key) => !allUsedMarks.includes(key)));\n        if (unusedMarkDefs.length > 0)\n          return resolution = {\n            autoResolve: !0,\n            patches: unusedMarkDefs.map((markDefKey) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n              _key: blk._key\n            }, \"markDefs\", {\n              _key: markDefKey\n            }])),\n            description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\", \")}.`,\n            action: \"Remove unused mark definition item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-mark-defs.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-mark-defs.action\",\n              values: {\n                key: blk._key,\n                unusedMarkDefs: unusedMarkDefs.map((m) => m.toString())\n              }\n            }\n          }, !0;\n      }\n      const orphanedMarks = allUsedMarks.filter((mark) => !types.decorators.map((dec) => dec.name).includes(mark)).filter((mark) => textBlock.markDefs === void 0 || !textBlock.markDefs.find((def) => def._key === mark));\n      if (orphanedMarks.length > 0) {\n        const spanChildren = textBlock.children.filter((cld) => cld._type === types.span.name && Array.isArray(cld.marks) && cld.marks.some((mark) => orphanedMarks.includes(mark)));\n        if (spanChildren) {\n          const orphaned = orphanedMarks.join(\", \");\n          return resolution = {\n            autoResolve: !0,\n            patches: spanChildren.map((child) => (0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)((child.marks || []).filter((cMrk) => !orphanedMarks.includes(cMrk)), [{\n              _key: blk._key\n            }, \"children\", {\n              _key: child._key\n            }, \"marks\"])),\n            description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n            action: \"Remove invalid marks\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.orphaned-marks.description\",\n              action: \"inputs.portable-text.invalid-value.orphaned-marks.action\",\n              values: {\n                key: blk._key,\n                orphanedMarks: orphanedMarks.map((m) => m.toString())\n              }\n            }\n          }, !0;\n        }\n      }\n      textBlock.children.some((child, cIndex) => {\n        if (!lodash_isPlainObject_js__WEBPACK_IMPORTED_MODULE_13__(child))\n          return resolution = {\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n            action: \"Remove the item\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.non-object-child.description\",\n              action: \"inputs.portable-text.invalid-value.non-object-child.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        if (!child._key || typeof child._key != \"string\") {\n          const newChild = {\n            ...child,\n            _key: keyGenerator()\n          };\n          return resolution = {\n            autoResolve: !0,\n            patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)(newChild, [{\n              _key: blk._key\n            }, \"children\", cIndex])],\n            description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n            action: \"Set a new random _key on the object\",\n            item: blk,\n            i18n: {\n              description: \"inputs.portable-text.invalid-value.missing-child-key.description\",\n              action: \"inputs.portable-text.invalid-value.missing-child-key.action\",\n              values: {\n                key: blk._key,\n                index: cIndex\n              }\n            }\n          }, !0;\n        }\n        return child._type ? validChildTypes.includes(child._type) ? child._type === types.span.name && typeof child.text != \"string\" ? (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.set)({\n            ...child,\n            text: \"\"\n          }, [{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n          action: \"Write an empty text property to the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.invalid-span-text.description\",\n            action: \"inputs.portable-text.invalid-value.invalid-span-text.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0) : !1 : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.disallowed-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.disallowed-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key,\n              childType: child._type\n            }\n          }\n        }, !0) : (resolution = {\n          patches: [(0,_portabletext_patches__WEBPACK_IMPORTED_MODULE_29__.unset)([{\n            _key: blk._key\n          }, \"children\", {\n            _key: child._key\n          }])],\n          description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n          action: \"Remove the object\",\n          item: blk,\n          i18n: {\n            description: \"inputs.portable-text.invalid-value.missing-child-type.description\",\n            action: \"inputs.portable-text.invalid-value.missing-child-type.action\",\n            values: {\n              key: blk._key,\n              childKey: child._key\n            }\n          }\n        }, !0);\n      }) && (valid = !1);\n    }\n    return !1;\n  }) && (valid = !1), {\n    valid,\n    resolution,\n    value\n  });\n}\nconst debug$4 = debugWithName(\"sync machine\"), syncValueCallback = ({\n  sendBack,\n  input\n}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks\n  });\n}, syncValueLogic = (0,xstate__WEBPACK_IMPORTED_MODULE_38__.fromCallback)(syncValueCallback), syncMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_34__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {},\n    emitted: {}\n  },\n  actions: {\n    \"assign initial value synced\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      initialValueSynced: !0\n    }),\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      readOnly: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"update readOnly\"), event.readOnly)\n    }),\n    \"assign pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"update value\"), event.value)\n    }),\n    \"clear pending value\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingValue: void 0\n    }),\n    \"assign previous value\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      previousValue: ({\n        event\n      }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"done syncing\"), event.value)\n    }),\n    \"emit done syncing value\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"done syncing value\"\n    }),\n    \"emit syncing value\": (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n      type: \"syncing value\"\n    })\n  },\n  guards: {\n    \"initial value synced\": ({\n      context\n    }) => context.initialValueSynced,\n    \"is busy\": ({\n      context\n    }) => {\n      const editable = !context.readOnly, isProcessingLocalChanges = context.isProcessingLocalChanges, isChanging = isChangingRemotely(context.slateEditor) ?? !1, isBusy = editable && (isProcessingLocalChanges || isChanging);\n      return debug$4(\"isBusy\", {\n        isBusy,\n        editable,\n        isProcessingLocalChanges,\n        isChanging\n      }), isBusy;\n    },\n    \"is empty value\": ({\n      event\n    }) => event.type === \"update value\" && event.value === void 0,\n    \"is empty array\": ({\n      event\n    }) => event.type === \"update value\" && Array.isArray(event.value) && event.value.length === 0,\n    \"is new value\": ({\n      context,\n      event\n    }) => event.type === \"update value\" && context.previousValue !== event.value,\n    \"value changed while syncing\": ({\n      context,\n      event\n    }) => ((0,xstate__WEBPACK_IMPORTED_MODULE_34__.assertEvent)(event, \"done syncing\"), context.pendingValue !== event.value),\n    \"pending value equals previous value\": ({\n      context\n    }) => lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(context.pendingValue, context.previousValue)\n  },\n  actors: {\n    \"sync value\": syncValueLogic\n  }\n}).createMachine({\n  id: \"sync\",\n  context: ({\n    input\n  }) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: !1,\n    isProcessingLocalChanges: !1,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: void 0,\n    previousValue: void 0\n  }),\n  entry: [(0,xstate__WEBPACK_IMPORTED_MODULE_39__.r)(({\n    context\n  }) => ({\n    type: \"update value\",\n    value: context.initialValue\n  }))],\n  on: {\n    \"has pending mutations\": {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        isProcessingLocalChanges: !0\n      })\n    },\n    mutation: {\n      actions: (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n        isProcessingLocalChanges: !1\n      })\n    },\n    \"update readOnly\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  initial: \"idle\",\n  states: {\n    idle: {\n      entry: [() => {\n        debug$4(\"entry: syncing->idle\");\n      }],\n      exit: [() => {\n        debug$4(\"exit: syncing->idle\");\n      }],\n      on: {\n        \"update value\": [{\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_39__.d)([\"is empty value\", (0,xstate__WEBPACK_IMPORTED_MODULE_39__.n)(\"initial value synced\")]),\n          actions: [\"assign initial value synced\", \"emit done syncing value\"]\n        }, {\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_39__.d)([\"is empty array\", (0,xstate__WEBPACK_IMPORTED_MODULE_39__.n)(\"initial value synced\")]),\n          actions: [\"assign initial value synced\", (0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)({\n            type: \"value changed\",\n            value: []\n          }), \"emit done syncing value\"]\n        }, {\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_39__.d)([\"is busy\", \"is new value\"]),\n          target: \"busy\",\n          actions: [\"assign pending value\"]\n        }, {\n          guard: \"is new value\",\n          target: \"syncing\",\n          actions: [\"assign pending value\"]\n        }, {\n          guard: (0,xstate__WEBPACK_IMPORTED_MODULE_39__.n)(\"initial value synced\"),\n          actions: [() => {\n            debug$4(\"no new value \\u2013 setting initial value as synced\");\n          }, \"assign initial value synced\", \"emit done syncing value\"]\n        }, {\n          actions: [() => {\n            debug$4(\"no new value and initial value already synced\");\n          }]\n        }]\n      }\n    },\n    busy: {\n      entry: [() => {\n        debug$4(\"entry: syncing->busy\");\n      }],\n      exit: [() => {\n        debug$4(\"exit: syncing->busy\");\n      }],\n      after: {\n        1e3: [{\n          guard: \"is busy\",\n          target: \".\",\n          reenter: !0,\n          actions: [() => {\n            debug$4(\"reenter: syncing->busy\");\n          }]\n        }, {\n          target: \"syncing\"\n        }]\n      },\n      on: {\n        \"update value\": [{\n          guard: \"is new value\",\n          actions: [\"assign pending value\"]\n        }]\n      }\n    },\n    syncing: {\n      entry: [() => {\n        debug$4(\"entry: syncing->syncing\");\n      }, \"emit syncing value\"],\n      exit: [() => {\n        debug$4(\"exit: syncing->syncing\");\n      }, \"emit done syncing value\"],\n      invoke: {\n        src: \"sync value\",\n        id: \"sync value\",\n        input: ({\n          context\n        }) => ({\n          context: {\n            keyGenerator: context.keyGenerator,\n            previousValue: context.previousValue,\n            readOnly: context.readOnly,\n            schema: context.schema\n          },\n          slateEditor: context.slateEditor,\n          streamBlocks: !context.initialValueSynced,\n          value: context.pendingValue\n        })\n      },\n      on: {\n        \"update value\": {\n          guard: \"is new value\",\n          actions: [\"assign pending value\"]\n        },\n        patch: {\n          actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n            event\n          }) => event)]\n        },\n        \"invalid value\": {\n          actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n            event\n          }) => event)]\n        },\n        \"value changed\": {\n          actions: [(0,xstate__WEBPACK_IMPORTED_MODULE_36__.a)(({\n            event\n          }) => event)]\n        },\n        \"done syncing\": [{\n          guard: \"value changed while syncing\",\n          actions: [\"assign previous value\", \"assign initial value synced\"],\n          target: \"syncing\",\n          reenter: !0\n        }, {\n          target: \"idle\",\n          actions: [\"clear pending value\", \"assign previous value\", \"assign initial value synced\"]\n        }]\n      }\n    }\n  }\n});\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value\n}) {\n  let doneSyncing = !1, isChanged = !1, isValid = !0;\n  const hadSelection = !!slateEditor.selection;\n  if ((!value || value.length === 0) && (debug$4(\"Value is empty\"), slate__WEBPACK_IMPORTED_MODULE_16__.Editor.withoutNormalizing(slateEditor, () => {\n    withoutSaving(slateEditor, () => {\n      withRemoteChanges(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (doneSyncing)\n            return;\n          hadSelection && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(slateEditor);\n          const childrenLength = slateEditor.children.length;\n          slateEditor.children.forEach((_, index) => {\n            slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index]\n            });\n          }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(slateEditor, slateEditor.pteCreateTextBlock({\n            decorators: []\n          }), {\n            at: [0]\n          }), hadSelection && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(slateEditor, [0, 0]);\n        });\n      });\n    });\n  }), isChanged = !0), value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema\n    });\n    streamBlocks ? await new Promise((resolve) => {\n      slate__WEBPACK_IMPORTED_MODULE_16__.Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              resolve();\n              return;\n            }\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps\n            }), (async () => {\n              for await (const [currentBlock, currentBlockIndex] of getStreamedBlocks({\n                slateValue: slateValueFromProps\n              })) {\n                const {\n                  blockChanged,\n                  blockValid\n                } = syncBlock({\n                  context,\n                  sendBack,\n                  block: currentBlock,\n                  index: currentBlockIndex,\n                  slateEditor,\n                  value\n                });\n                isChanged = blockChanged || isChanged, isValid = isValid && blockValid;\n              }\n              resolve();\n            })();\n          });\n        });\n      });\n    }) : slate__WEBPACK_IMPORTED_MODULE_16__.Editor.withoutNormalizing(slateEditor, () => {\n      withRemoteChanges(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (doneSyncing)\n            return;\n          isChanged = removeExtraBlocks({\n            slateEditor,\n            slateValueFromProps\n          });\n          let index = 0;\n          for (const currentBlock of slateValueFromProps) {\n            const {\n              blockChanged,\n              blockValid\n            } = syncBlock({\n              context,\n              sendBack,\n              block: currentBlock,\n              index,\n              slateEditor,\n              value\n            });\n            isChanged = blockChanged || isChanged, isValid = isValid && blockValid, index++;\n          }\n        });\n      });\n    });\n  }\n  if (!isValid) {\n    debug$4(\"Invalid value, returning\"), doneSyncing = !0, sendBack({\n      type: \"done syncing\",\n      value\n    });\n    return;\n  }\n  if (isChanged) {\n    debug$4(\"Server value changed, syncing editor\");\n    try {\n      slateEditor.onChange();\n    } catch (err) {\n      console.error(err), sendBack({\n        type: \"invalid value\",\n        resolution: null,\n        value\n      }), doneSyncing = !0, sendBack({\n        type: \"done syncing\",\n        value\n      });\n      return;\n    }\n    hadSelection && !slateEditor.selection && (slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(slateEditor, {\n      anchor: {\n        path: [0, 0],\n        offset: 0\n      },\n      focus: {\n        path: [0, 0],\n        offset: 0\n      }\n    }), slateEditor.onChange()), sendBack({\n      type: \"value changed\",\n      value\n    });\n  } else\n    debug$4(\"Server value and editor value is equal, no need to sync.\");\n  doneSyncing = !0, sendBack({\n    type: \"done syncing\",\n    value\n  });\n}\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps\n}) {\n  let isChanged = !1;\n  const childrenLength = slateEditor.children.length;\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)\n      slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(slateEditor, {\n        at: [i]\n      });\n    isChanged = !0;\n  }\n  return isChanged;\n}\nasync function* getStreamedBlocks({\n  slateValue\n}) {\n  let index = 0;\n  for await (const block of slateValue)\n    index % 10 === 0 && await new Promise((resolve) => setTimeout(resolve, 0)), yield [block, index], index++;\n}\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value\n}) {\n  let blockChanged = !1, blockValid = !0;\n  const currentBlock = block, currentBlockIndex = index, oldBlock = slateEditor.children[currentBlockIndex], hasChanges = oldBlock && !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(currentBlock, oldBlock);\n  return slate__WEBPACK_IMPORTED_MODULE_16__.Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !context.readOnly && context.previousValue && context.previousValue !== value && (console.warn(`${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`), validation.resolution.patches.forEach((patch) => {\n            sendBack({\n              type: \"patch\",\n              patch\n            });\n          })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$4.enabled && debug$4(\"Updating block\", oldBlock, currentBlock), _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)) : (debug$4.enabled && debug$4(\"Replacing block\", oldBlock, currentBlock), _replaceBlock(slateEditor, currentBlock, currentBlockIndex)), blockChanged = !0) : (sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]], validation = validateValue(validationValue, context.schema, context.keyGenerator);\n          debug$4.enabled && debug$4(\"Validating and inserting new block in the end of the value\", currentBlock), validation.valid || validation.resolution?.autoResolve ? slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(slateEditor, currentBlock, {\n            at: [currentBlockIndex]\n          }) : (debug$4(\"Invalid\", validation), sendBack({\n            type: \"invalid value\",\n            resolution: validation.resolution,\n            value\n          }), blockValid = !1);\n        }\n      });\n    });\n  }), {\n    blockChanged,\n    blockValid\n  };\n}\nfunction _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {\n  const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;\n  selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(slateEditor), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(slateEditor, {\n    at: [currentBlockIndex]\n  }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.onChange(), selectionFocusOnBlock && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(slateEditor, currentSelection);\n}\nfunction _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {\n  if (slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(slateEditor, currentBlock, {\n    at: [currentBlockIndex]\n  }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {\n    const oldBlockChildrenLength = oldBlock.children.length;\n    currentBlock.children.length < oldBlockChildrenLength && Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach((_, index) => {\n      const childIndex = oldBlockChildrenLength - 1 - index;\n      childIndex > 0 && (debug$4(\"Removing child\"), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(slateEditor, {\n        at: [currentBlockIndex, childIndex]\n      }));\n    }), currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex) => {\n      const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(currentBlockChild, oldBlockChild), isTextChanged = !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(currentBlockChild.text, oldBlockChild?.text), path = [currentBlockIndex, currentBlockChildIndex];\n      if (isChildChanged)\n        if (currentBlockChild._key === oldBlockChild?._key) {\n          debug$4(\"Updating changed child\", currentBlockChild, oldBlockChild), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(slateEditor, currentBlockChild, {\n            at: path\n          });\n          const isSpanNode2 = slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(currentBlockChild) && currentBlockChild._type === \"span\" && slate__WEBPACK_IMPORTED_MODULE_16__.Text.isText(oldBlockChild) && oldBlockChild._type === \"span\";\n          isSpanNode2 && isTextChanged ? (oldBlockChild.text.length > 0 && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.delete(slateEditor, {\n            at: {\n              focus: {\n                path,\n                offset: 0\n              },\n              anchor: {\n                path,\n                offset: oldBlockChild.text.length\n              }\n            }\n          }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertText(slateEditor, currentBlockChild.text, {\n            at: path\n          }), slateEditor.onChange()) : isSpanNode2 || (debug$4(\"Updating changed inline object child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.setNodes(slateEditor, {\n            _key: VOID_CHILD_KEY\n          }, {\n            at: [...path, 0],\n            voids: !0\n          }));\n        } else oldBlockChild ? (debug$4(\"Replacing child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.removeNodes(slateEditor, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange()) : oldBlockChild || (debug$4(\"Inserting new child\", currentBlockChild), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.insertNodes(slateEditor, currentBlockChild, {\n          at: [currentBlockIndex, currentBlockChildIndex]\n        }), slateEditor.onChange());\n    });\n  }\n}\nconst debug$3 = debugWithName(\"setup\");\nfunction createInternalEditor(config) {\n  debug$3(\"Creating new Editor instance\");\n  const subscriptions = [], editorActor = (0,xstate__WEBPACK_IMPORTED_MODULE_39__.c)(editorMachine, {\n    input: editorConfigToMachineInput(config)\n  }), relayActor = (0,xstate__WEBPACK_IMPORTED_MODULE_39__.c)(relayMachine), slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions\n  }), editable = createEditableAPI(slateEditor.instance, editorActor), {\n    mutationActor,\n    syncActor\n  } = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions\n  }), editor = {\n    dom: createEditorDom((event) => editorActor.send(event), slateEditor.instance),\n    getSnapshot: () => getEditorSnapshot({\n      editorActorSnapshot: editorActor.getSnapshot(),\n      slateEditorInstance: slateEditor.instance\n    }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: \"custom\",\n        reference: {\n          priority: corePriority,\n          importance: \"higher\"\n        }\n      }), behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority\n      };\n      return editorActor.send({\n        type: \"add behavior\",\n        behaviorConfig: behaviorConfigWithPriority\n      }), () => {\n        editorActor.send({\n          type: \"remove behavior\",\n          behaviorConfig: behaviorConfigWithPriority\n        });\n      };\n    },\n    send: (event) => {\n      switch (event.type) {\n        case \"update value\":\n          syncActor.send(event);\n          break;\n        case \"update readOnly\":\n        case \"patches\":\n        case \"update maxBlocks\":\n          editorActor.send(event);\n          break;\n        case \"blur\":\n          editorActor.send({\n            type: \"blur\",\n            editor: slateEditor.instance\n          });\n          break;\n        case \"focus\":\n          editorActor.send({\n            type: \"focus\",\n            editor: slateEditor.instance\n          });\n          break;\n        case \"insert.block object\":\n          editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n              type: \"insert.block\",\n              block: {\n                _type: event.blockObject.name,\n                ...event.blockObject.value ?? {}\n              },\n              placement: event.placement\n            },\n            editor: slateEditor.instance\n          });\n          break;\n        default:\n          editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: event,\n            editor: slateEditor.instance\n          });\n      }\n    },\n    on: (event, listener) => relayActor.on(event, (event2) => {\n      switch (event2.type) {\n        case \"blurred\":\n        case \"done loading\":\n        case \"editable\":\n        case \"focused\":\n        case \"invalid value\":\n        case \"loading\":\n        case \"mutation\":\n        case \"patch\":\n        case \"read only\":\n        case \"ready\":\n        case \"selection\":\n        case \"value changed\":\n          listener(event2);\n          break;\n      }\n    }),\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor\n    }\n  };\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor\n    },\n    editor,\n    subscriptions\n  };\n}\nfunction editorConfigToMachineInput(config) {\n  const {\n    legacySchema,\n    schema\n  } = compileSchemasFromEditorConfig(config);\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue\n  };\n}\nfunction compileSchemasFromEditorConfig(config) {\n  const legacySchema = config.schemaDefinition ? compileSchemaDefinitionToLegacySchema(config.schemaDefinition) : createLegacySchema(config.schema.hasOwnProperty(\"jsonType\") ? config.schema : compileType(config.schema)), schema = legacySchemaToEditorSchema(legacySchema);\n  return {\n    legacySchema,\n    schema\n  };\n}\nfunction createActors(config) {\n  debug$3(\"Creating new Actors\");\n  const mutationActor = (0,xstate__WEBPACK_IMPORTED_MODULE_39__.c)(mutationMachine, {\n    input: {\n      readOnly: config.editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor\n    }\n  }), syncActor = (0,xstate__WEBPACK_IMPORTED_MODULE_39__.c)(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor.getSnapshot().matches({\n        \"edit mode\": \"read only\"\n      }),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor\n    }\n  });\n  return config.subscriptions.push(() => {\n    const subscription = mutationActor.on(\"*\", (event) => {\n      event.type === \"has pending mutations\" && syncActor.send({\n        type: \"has pending mutations\"\n      }), event.type === \"mutation\" && (syncActor.send({\n        type: \"mutation\"\n      }), config.editorActor.send({\n        type: \"mutation\",\n        patches: event.patches,\n        snapshot: event.snapshot,\n        value: event.snapshot\n      })), event.type === \"patch\" && config.relayActor.send(event);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), config.subscriptions.push(() => {\n    const subscription = syncActor.on(\"*\", (event) => {\n      switch (event.type) {\n        case \"invalid value\":\n          config.relayActor.send(event);\n          break;\n        case \"value changed\":\n          config.relayActor.send(event);\n          break;\n        case \"patch\":\n          config.editorActor.send({\n            ...event,\n            type: \"internal.patch\",\n            value: fromSlateValue(config.slateEditor.children, config.editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(config.slateEditor))\n          });\n          break;\n        default:\n          config.editorActor.send(event);\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      snapshot.matches({\n        \"edit mode\": \"read only\"\n      }) ? (mutationActor.send({\n        type: \"update readOnly\",\n        readOnly: !0\n      }), syncActor.send({\n        type: \"update readOnly\",\n        readOnly: !0\n      })) : (mutationActor.send({\n        type: \"update readOnly\",\n        readOnly: !1\n      }), syncActor.send({\n        type: \"update readOnly\",\n        readOnly: !1\n      }));\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), config.subscriptions.push(() => {\n    const subscription = config.editorActor.on(\"*\", (event) => {\n      switch (event.type) {\n        case \"editable\":\n        case \"mutation\":\n        case \"ready\":\n        case \"read only\":\n        case \"selection\":\n          config.relayActor.send(event);\n          break;\n        case \"internal.patch\":\n          mutationActor.send({\n            ...event,\n            type: \"patch\"\n          });\n          break;\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }), {\n    mutationActor,\n    syncActor\n  };\n}\nconst RelayActorContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({});\nfunction RouteEventsToChanges(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(7);\n  let t0;\n  $[0] !== props ? (t0 = (change) => props.onChange(change), $[0] = props, $[1] = t0) : t0 = $[1];\n  const handleChange = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_15__.useEffectEvent)(t0);\n  let t1;\n  $[2] !== handleChange || $[3] !== props.relayActor ? (t1 = () => {\n    const sub = props.relayActor.on(\"*\", (event) => {\n      const change_0 = eventToChange(event);\n      change_0 && handleChange(change_0);\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, $[2] = handleChange, $[3] = props.relayActor, $[4] = t1) : t1 = $[4];\n  let t2;\n  return $[5] !== props.relayActor ? (t2 = [props.relayActor], $[5] = props.relayActor, $[6] = t2) : t2 = $[6], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t1, t2), null;\n}\nfunction eventToChange(event) {\n  switch (event.type) {\n    case \"blurred\":\n      return {\n        type: \"blur\",\n        event: event.event\n      };\n    case \"patch\":\n      return event;\n    case \"loading\":\n      return {\n        type: \"loading\",\n        isLoading: !0\n      };\n    case \"done loading\":\n      return {\n        type: \"loading\",\n        isLoading: !1\n      };\n    case \"focused\":\n      return {\n        type: \"focus\",\n        event: event.event\n      };\n    case \"value changed\":\n      return {\n        type: \"value\",\n        value: event.value\n      };\n    case \"invalid value\":\n      return {\n        type: \"invalidValue\",\n        resolution: event.resolution,\n        value: event.value\n      };\n    case \"mutation\":\n      return event;\n    case \"ready\":\n      return event;\n    case \"selection\":\n      return event;\n    case \"unset\":\n      return event;\n  }\n}\nconst debug$2 = debugWithName(\"component:PortableTextEditor\");\nclass PortableTextEditor extends react__WEBPACK_IMPORTED_MODULE_1__.Component {\n  static displayName = \"PortableTextEditor\";\n  /**\n   * An observable of all the editor changes.\n   */\n  change$ = new rxjs__WEBPACK_IMPORTED_MODULE_40__.Subject();\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  /**\n   * The editor instance\n   */\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  subscriptions = [];\n  unsubscribers = [];\n  constructor(props) {\n    if (super(props), props.editor)\n      this.editor = props.editor, this.schemaTypes = this.editor._internal.editorActor.getSnapshot().context.getLegacySchema();\n    else {\n      const {\n        actors,\n        editor,\n        subscriptions\n      } = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks: props.maxBlocks === void 0 ? void 0 : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType\n      });\n      this.subscriptions = subscriptions, this.actors = actors, this.editor = editor, this.schemaTypes = actors.editorActor.getSnapshot().context.getLegacySchema();\n    }\n    this.editable = this.editor._internal.editable;\n  }\n  componentDidMount() {\n    if (!this.actors)\n      return;\n    for (const subscription of this.subscriptions)\n      this.unsubscribers.push(subscription());\n    const relayActorSubscription = this.actors.relayActor.on(\"*\", (event) => {\n      const change = eventToChange(event);\n      change && (this.props.editor || this.props.onChange(change), this.change$.next(change));\n    });\n    this.unsubscribers.push(relayActorSubscription.unsubscribe), this.actors.editorActor.start(), this.actors.mutationActor.start(), this.actors.relayActor.start(), this.actors.syncActor.start();\n  }\n  componentDidUpdate(prevProps) {\n    !this.props.editor && !prevProps.editor && this.props.schemaType !== prevProps.schemaType && console.warn(\"Updating schema type is no longer supported\"), !this.props.editor && !prevProps.editor && (this.props.readOnly !== prevProps.readOnly && this.editor._internal.editorActor.send({\n      type: \"update readOnly\",\n      readOnly: this.props.readOnly ?? !1\n    }), this.props.maxBlocks !== prevProps.maxBlocks && this.editor._internal.editorActor.send({\n      type: \"update maxBlocks\",\n      maxBlocks: this.props.maxBlocks === void 0 ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10)\n    }), this.props.value !== prevProps.value && this.editor.send({\n      type: \"update value\",\n      value: this.props.value\n    }), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this));\n  }\n  componentWillUnmount() {\n    for (const unsubscribe of this.unsubscribers)\n      unsubscribe();\n    this.actors && (stopActor(this.actors.editorActor), stopActor(this.actors.mutationActor), stopActor(this.actors.relayActor), stopActor(this.actors.syncActor));\n  }\n  setEditable = (editable) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable\n    };\n  };\n  render() {\n    const legacyPatches = this.props.editor ? void 0 : this.props.incomingPatches$ ?? this.props.patches$;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n      legacyPatches ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RoutePatchesObservableToEditorActor, { editorActor: this.editor._internal.editorActor, patches$: legacyPatches }) : null,\n      /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditorActorContext.Provider, { value: this.editor._internal.editorActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RelayActorContext.Provider, { value: this.actors.relayActor, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_24__.Slate, { editor: this.editor._internal.slateEditor.instance, initialValue: this.editor._internal.slateEditor.initialValue, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorContext.Provider, { value: this, children: this.props.children }) }) }) })\n    ] });\n  }\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (editor) => editor && editor.editable ? editor.editable.activeAnnotations() : [];\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (editor, annotationType) => editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = (editor, type, value) => editor.editable?.addAnnotation(type, value);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor) => {\n    debug$2(\"Host blurred\"), editor.editable?.blur();\n  };\n  static delete = (editor, selection, options) => editor.editable?.delete(selection, options);\n  static findDOMNode = (editor, element) => editor.editable?.findDOMNode(element);\n  static findByPath = (editor, path) => editor.editable?.findByPath(path) || [];\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor) => {\n    debug$2(\"Host requesting focus\"), editor.editable?.focus();\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor) => editor.editable?.focusBlock();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (editor) => editor.editable?.focusChild();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor) => editor.editable ? editor.editable.getSelection() : null;\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor) => editor.editable?.getValue();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor, blockStyle) => editor.editable?.hasBlockStyle(blockStyle);\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor, listStyle) => editor.editable?.hasListStyle(listStyle);\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor) => editor.editable?.isCollapsedSelection();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor) => editor.editable?.isExpandedSelection();\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor, mark) => editor.editable?.isMarkActive(mark);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = (editor, type, value) => (debug$2(\"Host inserting child\"), editor.editable?.insertChild(type, value));\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = (editor, type, value) => editor.editable?.insertBlock(type, value);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor) => editor.editable?.insertBreak();\n  static isVoid = (editor, element) => editor.editable?.isVoid(element);\n  static isObjectPath = (_editor, path) => {\n    if (!path || !Array.isArray(path)) return !1;\n    const isChildObjectEditPath = path.length > 3 && path[1] === \"children\";\n    return path.length > 1 && path[1] !== \"children\" || isChildObjectEditPath;\n  };\n  static marks = (editor) => editor.editable?.marks();\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (editor, selection) => {\n    debug$2(\"Host setting selection\", selection), editor.editable?.select(selection);\n  };\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = (editor, type) => editor.editable?.removeAnnotation(type);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (editor, blockStyle) => (debug$2(\"Host is toggling block style\"), editor.editable?.toggleBlockStyle(blockStyle));\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor, listStyle) => editor.editable?.toggleList(listStyle);\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor, mark) => {\n    debug$2(\"Host toggling mark\", mark), editor.editable?.toggleMark(mark);\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (editor) => editor.editable?.getFragment();\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor) => {\n    debug$2(\"Host undoing\"), editor.editable?.undo();\n  };\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor) => {\n    debug$2(\"Host redoing\"), editor.editable?.redo();\n  };\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (editor, selectionA, selectionB) => editor.editable?.isSelectionsOverlapping(selectionA, selectionB);\n}\nfunction RoutePatchesObservableToEditorActor(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4);\n  let t0, t1;\n  return $[0] !== props.editorActor || $[1] !== props.patches$ ? (t0 = () => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: \"patches\",\n        ...payload\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [props.editorActor, props.patches$], $[0] = props.editorActor, $[1] = props.patches$, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction RenderSpan(props) {\n  const slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSlateStatic)(), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), legacySchema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_25__.useSelector)(editorActor, (s) => s.context.getLegacySchema()), spanRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), portableTextEditor = usePortableTextEditor(), blockSelected = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSelected)(), [focused, setFocused] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), [selected, setSelected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1), parent = props.children.props.parent, block = parent && slateEditor.isTextBlock(parent) ? parent : void 0, path = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => block ? [{\n    _key: block._key\n  }, \"children\", {\n    _key: props.leaf._key\n  }] : void 0, [block, props.leaf._key]), decoratorSchemaTypes = editorActor.getSnapshot().context.schema.decorators.map((decorator) => decorator.name), decorators = lodash_uniq_js__WEBPACK_IMPORTED_MODULE_6__((props.leaf.marks ?? []).filter((mark) => decoratorSchemaTypes.includes(mark))), annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark_0) => {\n    if (decoratorSchemaTypes.includes(mark_0))\n      return [];\n    const markDef_0 = block?.markDefs?.find((markDef) => markDef._key === mark_0);\n    return markDef_0 ? [markDef_0] : [];\n  }), shouldTrackSelectionAndFocus = annotationMarkDefs.length > 0 && blockSelected;\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(!1);\n      return;\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor);\n    sel && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(sel.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && (0,react__WEBPACK_IMPORTED_MODULE_1__.startTransition)(() => {\n      setFocused(!0);\n    });\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor]);\n  const setSelectedFromRange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    const winSelection = window.getSelection();\n    if (!winSelection) {\n      setSelected(!1);\n      return;\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0);\n      spanRef.current && range.intersectsNode(spanRef.current) ? setSelected(!0) : setSelected(!1);\n    } else\n      setSelected(!1);\n  }, [shouldTrackSelectionAndFocus]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (!shouldTrackSelectionAndFocus)\n      return;\n    const onBlur = editorActor.on(\"blurred\", () => {\n      setFocused(!1), setSelected(!1);\n    }), onFocus = editorActor.on(\"focused\", () => {\n      const sel_0 = PortableTextEditor.getSelection(portableTextEditor);\n      sel_0 && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(sel_0.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) && setFocused(!0), setSelectedFromRange();\n    }), onSelection = editorActor.on(\"selection\", (event) => {\n      event.selection && lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(event.selection.focus.path, path) && PortableTextEditor.isCollapsedSelection(portableTextEditor) ? setFocused(!0) : setFocused(!1), setSelectedFromRange();\n    });\n    return () => {\n      onBlur.unsubscribe(), onFocus.unsubscribe(), onSelection.unsubscribe();\n    };\n  }, [editorActor, path, portableTextEditor, setSelectedFromRange, shouldTrackSelectionAndFocus]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => setSelectedFromRange(), [setSelectedFromRange]);\n  let children = props.children;\n  for (const mark_1 of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find((dec) => dec.value === mark_1);\n    path && legacyDecoratorSchemaType && props.renderDecorator && (children = props.renderDecorator({\n      children,\n      editorElementRef: spanRef,\n      focused,\n      path,\n      selected,\n      schemaType: legacyDecoratorSchemaType,\n      value: mark_1,\n      type: legacyDecoratorSchemaType\n    }));\n  }\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find((t) => t.name === annotationMarkDef._type);\n    legacyAnnotationSchemaType && (block && path && props.renderAnnotation ? children = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: spanRef, children: props.renderAnnotation({\n      block,\n      children,\n      editorElementRef: spanRef,\n      focused,\n      path,\n      selected,\n      schemaType: legacyAnnotationSchemaType,\n      value: annotationMarkDef,\n      type: legacyAnnotationSchemaType\n    }) }) : children = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ref: spanRef, children }));\n  }\n  if (block && path && props.renderChild) {\n    const child = block.children.find((_child) => _child._key === props.leaf._key);\n    child && (children = props.renderChild({\n      annotations: annotationMarkDefs,\n      children,\n      editorElementRef: spanRef,\n      focused,\n      path,\n      schemaType: legacySchema.span,\n      selected,\n      value: child,\n      type: legacySchema.span\n    }));\n  }\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ...props.attributes, ref: spanRef, children });\n}\nconst PLACEHOLDER_STYLE = {\n  position: \"absolute\",\n  userSelect: \"none\",\n  pointerEvents: \"none\",\n  left: 0,\n  right: 0\n};\nfunction RenderLeaf(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(12), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), schema = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_25__.useSelector)(editorActor, _temp);\n  if (props.leaf._type !== schema.span.name)\n    return props.children;\n  let t0;\n  $[0] !== props ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderSpan, { ...props }), $[0] = props, $[1] = t0) : t0 = $[1];\n  let renderedSpan = t0;\n  if (props.renderPlaceholder && props.leaf.placeholder && props.text.text === \"\") {\n    let t1;\n    $[2] !== props.renderPlaceholder ? (t1 = props.renderPlaceholder(), $[2] = props.renderPlaceholder, $[3] = t1) : t1 = $[3];\n    let t2;\n    $[4] !== t1 ? (t2 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { style: PLACEHOLDER_STYLE, contentEditable: !1, children: t1 }), $[4] = t1, $[5] = t2) : t2 = $[5];\n    let t3;\n    return $[6] !== renderedSpan || $[7] !== t2 ? (t3 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.Fragment, { children: [\n      t2,\n      renderedSpan\n    ] }), $[6] = renderedSpan, $[7] = t2, $[8] = t3) : t3 = $[8], t3;\n  }\n  const rangeDecoration = props.leaf.rangeDecoration;\n  if (rangeDecoration) {\n    let t1;\n    $[9] !== rangeDecoration || $[10] !== renderedSpan ? (t1 = rangeDecoration.component({\n      children: renderedSpan\n    }), $[9] = rangeDecoration, $[10] = renderedSpan, $[11] = t1) : t1 = $[11], renderedSpan = t1;\n  }\n  return renderedSpan;\n}\nfunction _temp(s) {\n  return s.context.schema;\n}\nfunction RenderText(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(5);\n  let t0;\n  return $[0] !== props.attributes || $[1] !== props.children || $[2] !== props.text._key || $[3] !== props.text._type ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\"span\", { ...props.attributes, \"data-child-key\": props.text._key, \"data-child-name\": props.text._type, \"data-child-type\": \"span\", children: props.children }), $[0] = props.attributes, $[1] = props.children, $[2] = props.text._key, $[3] = props.text._type, $[4] = t0) : t0 = $[4], t0;\n}\nconst IS_MAC = typeof window < \"u\" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent), modifiers = {\n  alt: \"altKey\",\n  control: \"ctrlKey\",\n  meta: \"metaKey\",\n  shift: \"shiftKey\"\n}, aliases = {\n  add: \"+\",\n  break: \"pause\",\n  cmd: \"meta\",\n  command: \"meta\",\n  ctl: \"control\",\n  ctrl: \"control\",\n  del: \"delete\",\n  down: \"arrowdown\",\n  esc: \"escape\",\n  ins: \"insert\",\n  left: \"arrowleft\",\n  mod: IS_MAC ? \"meta\" : \"control\",\n  opt: \"alt\",\n  option: \"alt\",\n  return: \"enter\",\n  right: \"arrowright\",\n  space: \" \",\n  spacebar: \" \",\n  up: \"arrowup\",\n  win: \"meta\",\n  windows: \"meta\"\n}, keyCodes = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  \" \": 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  \";\": 186,\n  \"=\": 187,\n  \",\": 188,\n  \"-\": 189,\n  \".\": 190,\n  \"/\": 191,\n  \"`\": 192,\n  \"[\": 219,\n  \"\\\\\": 220,\n  \"]\": 221,\n  \"'\": 222,\n  f1: 112,\n  f2: 113,\n  f3: 114,\n  f4: 115,\n  f5: 116,\n  f6: 117,\n  f7: 118,\n  f8: 119,\n  f9: 120,\n  f10: 121,\n  f11: 122,\n  f12: 123,\n  f13: 124,\n  f14: 125,\n  f15: 126,\n  f16: 127,\n  f17: 128,\n  f18: 129,\n  f19: 130,\n  f20: 131\n};\nfunction isHotkey(hotkey, event) {\n  return compareHotkey(parseHotkey(hotkey), event);\n}\nfunction parseHotkey(hotkey) {\n  const parsedHotkey = {\n    altKey: !1,\n    ctrlKey: !1,\n    metaKey: !1,\n    shiftKey: !1\n  }, hotkeySegments = hotkey.replace(\"++\", \"+add\").split(\"+\");\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional = rawHotkeySegment.endsWith(\"?\") && rawHotkeySegment.length > 1, hotkeySegment = optional ? rawHotkeySegment.slice(0, -1) : rawHotkeySegment, keyName = toKeyName(hotkeySegment), modifier = modifiers[keyName], alias = aliases[hotkeySegment], code2 = keyCodes[keyName];\n    if (hotkeySegment.length > 1 && modifier === void 0 && alias === void 0 && code2 === void 0)\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`);\n    (hotkeySegments.length === 1 || modifier === void 0) && (parsedHotkey.key = keyName, parsedHotkey.keyCode = toKeyCode(hotkeySegment)), modifier !== void 0 && (parsedHotkey[modifier] = optional ? null : !0);\n  }\n  return parsedHotkey;\n}\nfunction compareHotkey(parsedHotkey, event) {\n  return (parsedHotkey.altKey == null || parsedHotkey.altKey === event.altKey) && (parsedHotkey.ctrlKey == null || parsedHotkey.ctrlKey === event.ctrlKey) && (parsedHotkey.metaKey == null || parsedHotkey.metaKey === event.metaKey) && (parsedHotkey.shiftKey == null || parsedHotkey.shiftKey === event.shiftKey) ? parsedHotkey.keyCode !== void 0 && event.keyCode !== void 0 ? parsedHotkey.keyCode === 91 && event.keyCode === 93 ? !0 : parsedHotkey.keyCode === event.keyCode : parsedHotkey.keyCode === event.keyCode || parsedHotkey.key === event.key.toLowerCase() : !1;\n}\nfunction toKeyCode(name) {\n  const keyName = toKeyName(name);\n  return keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0);\n}\nfunction toKeyName(name) {\n  const keyName = name.toLowerCase();\n  return aliases[keyName] ?? keyName;\n}\nconst debug$1 = debugWithName(\"plugin:withHotKeys\");\nfunction createWithHotkeys(editorActor, portableTextEditor, hotkeysFromOptions) {\n  const reservedHotkeys = [\"enter\", \"tab\", \"shift\", \"delete\", \"end\"], activeHotkeys = hotkeysFromOptions ?? {};\n  return function(editor) {\n    return editor.pteWithHotKeys = (event) => {\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === \"marks\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault();\n              const possibleMark = activeHotkeys[cat];\n              if (possibleMark) {\n                const mark = possibleMark[hotkey];\n                debug$1(`HotKey ${hotkey} to toggle ${mark}`), editorActor.send({\n                  type: \"behavior event\",\n                  behaviorEvent: {\n                    type: \"decorator.toggle\",\n                    decorator: mark\n                  },\n                  editor\n                });\n              }\n            }\n          }\n        if (cat === \"custom\")\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey))\n              throw new Error(`The hotkey ${hotkey} is reserved!`);\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat];\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey];\n                command(event, portableTextEditor);\n              }\n            }\n          }\n      });\n    }, editor;\n  };\n}\nfunction moveRangeByOperation(range, operation) {\n  const anchor = slate__WEBPACK_IMPORTED_MODULE_16__.Point.transform(range.anchor, operation), focus = slate__WEBPACK_IMPORTED_MODULE_16__.Point.transform(range.focus, operation);\n  return anchor === null || focus === null ? null : slate__WEBPACK_IMPORTED_MODULE_16__.Point.equals(anchor, range.anchor) && slate__WEBPACK_IMPORTED_MODULE_16__.Point.equals(focus, range.focus) ? range : {\n    anchor,\n    focus\n  };\n}\nconst slateOperationCallback = ({\n  input,\n  sendBack\n}) => {\n  const originalApply = input.slateEditor.apply;\n  return input.slateEditor.apply = (op) => {\n    op.type !== \"set_selection\" && sendBack({\n      type: \"slate operation\",\n      operation: op\n    }), originalApply(op);\n  }, () => {\n    input.slateEditor.apply = originalApply;\n  };\n}, rangeDecorationsMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_34__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {}\n  },\n  actions: {\n    \"update pending range decorations\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      pendingRangeDecorations: ({\n        context,\n        event\n      }) => event.type !== \"range decorations updated\" ? context.pendingRangeDecorations : event.rangeDecorations\n    }),\n    \"set up initial range decorations\": ({\n      context\n    }) => {\n      const rangeDecorationState = [];\n      for (const rangeDecoration of context.pendingRangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap\n        });\n        if (!slate__WEBPACK_IMPORTED_MODULE_16__.Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: \"local\"\n          });\n          continue;\n        }\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange\n        });\n      }\n      context.slateEditor.decoratedRanges = rangeDecorationState;\n    },\n    \"update range decorations\": ({\n      context,\n      event\n    }) => {\n      if (event.type !== \"range decorations updated\")\n        return;\n      const rangeDecorationState = [];\n      for (const rangeDecoration of event.rangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap\n        });\n        if (!slate__WEBPACK_IMPORTED_MODULE_16__.Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: \"local\"\n          });\n          continue;\n        }\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange\n        });\n      }\n      context.slateEditor.decoratedRanges = rangeDecorationState;\n    },\n    \"move range decorations\": ({\n      context,\n      event\n    }) => {\n      if (event.type !== \"slate operation\")\n        return;\n      const rangeDecorationState = [];\n      for (const decoratedRange of context.slateEditor.decoratedRanges) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: decoratedRange.rangeDecoration.selection\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap\n        });\n        if (!slate__WEBPACK_IMPORTED_MODULE_16__.Range.isRange(slateRange)) {\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: \"local\"\n          });\n          continue;\n        }\n        let newRange;\n        if (newRange = moveRangeByOperation(slateRange, event.operation), newRange && newRange !== slateRange || newRange === null && slateRange) {\n          const newRangeSelection = newRange ? slateRangeToSelection({\n            schema: context.schema,\n            editor: context.slateEditor,\n            range: newRange\n          }) : null;\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: newRangeSelection,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: \"local\"\n          });\n        }\n        newRange !== null && rangeDecorationState.push({\n          ...newRange || slateRange,\n          rangeDecoration: {\n            ...decoratedRange.rangeDecoration,\n            selection: slateRangeToSelection({\n              schema: context.schema,\n              editor: context.slateEditor,\n              range: newRange\n            })\n          }\n        });\n      }\n      context.slateEditor.decoratedRanges = rangeDecorationState;\n    },\n    \"assign readOnly\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      readOnly: ({\n        context,\n        event\n      }) => event.type !== \"update read only\" ? context.readOnly : event.readOnly\n    }),\n    \"update decorate\": (0,xstate__WEBPACK_IMPORTED_MODULE_35__.a)({\n      decorate: ({\n        context\n      }) => ({\n        fn: createDecorate(context.schema, context.slateEditor)\n      })\n    })\n  },\n  actors: {\n    \"slate operation listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_38__.fromCallback)(slateOperationCallback)\n  },\n  guards: {\n    \"has pending range decorations\": ({\n      context\n    }) => context.pendingRangeDecorations.length > 0,\n    \"has range decorations\": ({\n      context\n    }) => context.slateEditor.decoratedRanges.length > 0,\n    \"has different decorations\": ({\n      context,\n      event\n    }) => {\n      if (event.type !== \"range decorations updated\")\n        return !1;\n      const existingRangeDecorations = context.slateEditor.decoratedRanges.map((decoratedRange) => ({\n        anchor: decoratedRange.rangeDecoration.selection?.anchor,\n        focus: decoratedRange.rangeDecoration.selection?.focus\n      })), newRangeDecorations = event.rangeDecorations.map((rangeDecoration) => ({\n        anchor: rangeDecoration.selection?.anchor,\n        focus: rangeDecoration.selection?.focus\n      }));\n      return !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_5__(existingRangeDecorations, newRangeDecorations);\n    },\n    \"not read only\": ({\n      context\n    }) => !context.readOnly,\n    \"should skip setup\": ({\n      context\n    }) => context.skipSetup\n  }\n}).createMachine({\n  id: \"range decorations\",\n  context: ({\n    input\n  }) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    decorate: {\n      fn: createDecorate(input.schema, input.slateEditor)\n    }\n  }),\n  invoke: {\n    src: \"slate operation listener\",\n    input: ({\n      context\n    }) => ({\n      slateEditor: context.slateEditor\n    })\n  },\n  on: {\n    \"update read only\": {\n      actions: [\"assign readOnly\"]\n    }\n  },\n  initial: \"setting up\",\n  states: {\n    \"setting up\": {\n      always: [{\n        guard: (0,xstate__WEBPACK_IMPORTED_MODULE_39__.d)([\"should skip setup\", \"has pending range decorations\"]),\n        target: \"ready\",\n        actions: [\"set up initial range decorations\", \"update decorate\"]\n      }, {\n        guard: \"should skip setup\",\n        target: \"ready\"\n      }],\n      on: {\n        \"range decorations updated\": {\n          actions: [\"update pending range decorations\"]\n        },\n        ready: [{\n          target: \"ready\",\n          guard: \"has pending range decorations\",\n          actions: [\"set up initial range decorations\", \"update decorate\"]\n        }, {\n          target: \"ready\"\n        }]\n      }\n    },\n    ready: {\n      initial: \"idle\",\n      on: {\n        \"range decorations updated\": {\n          target: \".idle\",\n          guard: \"has different decorations\",\n          actions: [\"update range decorations\", \"update decorate\"]\n        }\n      },\n      states: {\n        idle: {\n          on: {\n            \"slate operation\": {\n              target: \"moving range decorations\",\n              guard: (0,xstate__WEBPACK_IMPORTED_MODULE_39__.d)([\"has range decorations\", \"not read only\"])\n            }\n          }\n        },\n        \"moving range decorations\": {\n          entry: [\"move range decorations\"],\n          always: {\n            target: \"idle\"\n          }\n        }\n      }\n    }\n  }\n});\nfunction createDecorate(schema, slateEditor) {\n  return function([node, path]) {\n    if (isEqualToEmptyEditor(slateEditor.children, schema))\n      return [{\n        anchor: {\n          path: [0, 0],\n          offset: 0\n        },\n        focus: {\n          path: [0, 0],\n          offset: 0\n        },\n        placeholder: !0\n      }];\n    if (path.length === 0)\n      return [];\n    if (!slate__WEBPACK_IMPORTED_MODULE_16__.Element.isElement(node) || node.children.length === 0)\n      return [];\n    const blockIndex = path.at(0);\n    return blockIndex === void 0 ? [] : slateEditor.decoratedRanges.filter((decoratedRange) => slate__WEBPACK_IMPORTED_MODULE_16__.Range.isCollapsed(decoratedRange) ? node.children.some((_, childIndex) => slate__WEBPACK_IMPORTED_MODULE_16__.Path.equals(decoratedRange.anchor.path, [blockIndex, childIndex]) && slate__WEBPACK_IMPORTED_MODULE_16__.Path.equals(decoratedRange.focus.path, [blockIndex, childIndex])) : slate__WEBPACK_IMPORTED_MODULE_16__.Range.intersection(decoratedRange, {\n      anchor: {\n        path,\n        offset: 0\n      },\n      focus: {\n        path,\n        offset: 0\n      }\n    }) || slate__WEBPACK_IMPORTED_MODULE_16__.Range.includes(decoratedRange, path));\n  };\n}\nconst debug = debugWithName(\"component:Editable\"), PortableTextEditable = (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props, portableTextEditor = usePortableTextEditor(), ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null), [editableElement, setEditableElement] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null), [hasInvalidValue, setHasInvalidValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle)(forwardedRef, () => ref.current);\n  const editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), relayActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(RelayActorContext), readOnly = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_25__.useSelector)(editorActor, (s) => s.matches({\n    \"edit mode\": \"read only\"\n  })), slateEditor = (0,slate_react__WEBPACK_IMPORTED_MODULE_24__.useSlate)(), rangeDecorationsActor = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_25__.useActorRef)(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({\n        setup: \"setting up\"\n      })\n    }\n  }), decorate = (0,_xstate_react__WEBPACK_IMPORTED_MODULE_25__.useSelector)(rangeDecorationsActor, (s_0) => s_0.context.decorate?.fn);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    rangeDecorationsActor.send({\n      type: \"update read only\",\n      readOnly\n    });\n  }, [rangeDecorationsActor, readOnly]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    rangeDecorationsActor.send({\n      type: \"range decorations updated\",\n      rangeDecorations: rangeDecorations ?? []\n    });\n  }, [rangeDecorationsActor, rangeDecorations]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => readOnly ? slateEditor : createWithHotkeys(editorActor, portableTextEditor, hotkeys)(slateEditor), [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor]);\n  const renderElement = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((eProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderElement, { ...eProps, readOnly, renderBlock, renderChild, renderListItem, renderStyle, spellCheck }), [spellCheck, readOnly, renderBlock, renderChild, renderListItem, renderStyle]), renderLeaf = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((leafProps) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderLeaf, { ...leafProps, readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder }), [readOnly, renderAnnotation, renderChild, renderDecorator, renderPlaceholder]), renderText = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((props_0) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RenderText, { ...props_0 }), []), restoreSelectionFromProps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`);\n      const normalizedSelection = normalizeSelection(propsSelection, fromSlateValue(slateEditor.children, editorActor.getSnapshot().context.schema.block.name));\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`);\n        const slateRange = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: slateEditor.value,\n            selection: normalizedSelection\n          },\n          blockIndexMap: slateEditor.blockIndexMap\n        });\n        slateRange && (slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(slateEditor, slateRange), slateEditor.operations.some((o) => o.type === \"set_selection\") || editorActor.send({\n          type: \"update selection\",\n          selection: normalizedSelection\n        }), slateEditor.onChange());\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const onReady = editorActor.on(\"ready\", () => {\n      rangeDecorationsActor.send({\n        type: \"ready\"\n      }), restoreSelectionFromProps();\n    }), onInvalidValue = editorActor.on(\"invalid value\", () => {\n      setHasInvalidValue(!0);\n    }), onValueChanged = editorActor.on(\"value changed\", () => {\n      setHasInvalidValue(!1);\n    });\n    return () => {\n      onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();\n    };\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    propsSelection && !hasInvalidValue && restoreSelectionFromProps();\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps]);\n  const handleCopy = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event) => {\n    if (onCopy)\n      onCopy(event) !== void 0 && event.preventDefault();\n    else if (event.nativeEvent.clipboardData) {\n      event.stopPropagation(), event.preventDefault();\n      const selection = slateEditor.selection ? slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor: slateEditor,\n        range: slateEditor.selection\n      }) : void 0, position = selection ? {\n        selection\n      } : void 0;\n      if (!position) {\n        console.warn(\"Could not find position for copy event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.copy\",\n          originEvent: {\n            dataTransfer: event.nativeEvent.clipboardData\n          },\n          position\n        },\n        editor: slateEditor,\n        nativeEvent: event\n      });\n    }\n  }, [onCopy, editorActor, slateEditor]), handleCut = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_0) => {\n    if (onCut)\n      onCut(event_0) !== void 0 && event_0.preventDefault();\n    else if (event_0.nativeEvent.clipboardData) {\n      event_0.stopPropagation(), event_0.preventDefault();\n      const selection_0 = editorActor.getSnapshot().context.selection, position_0 = selection_0 ? {\n        selection: selection_0\n      } : void 0;\n      if (!position_0) {\n        console.warn(\"Could not find position for cut event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.cut\",\n          originEvent: {\n            dataTransfer: event_0.nativeEvent.clipboardData\n          },\n          position: position_0\n        },\n        editor: slateEditor,\n        nativeEvent: event_0\n      });\n    }\n  }, [onCut, editorActor, slateEditor]), handlePaste = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_1) => {\n    const value = fromSlateValue(slateEditor.children, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(slateEditor)), path = (slateEditor.selection ? slateRangeToSelection({\n      schema: editorActor.getSnapshot().context.schema,\n      editor: slateEditor,\n      range: slateEditor.selection\n    }) : null)?.focus.path || [], onPasteResult = onPaste?.({\n      event: event_1,\n      value,\n      path,\n      schemaTypes: portableTextEditor.schemaTypes\n    });\n    if (onPasteResult || !slateEditor.selection)\n      event_1.preventDefault(), relayActor.send({\n        type: \"loading\"\n      }), Promise.resolve(onPasteResult).then((result_1) => {\n        if (debug(\"Custom paste function from client resolved\", result_1), !result_1 || !result_1.insert) {\n          debug(\"No result from custom paste handler, pasting normally\");\n          const selection_1 = editorActor.getSnapshot().context.selection, position_1 = selection_1 ? {\n            selection: selection_1\n          } : void 0;\n          if (!position_1) {\n            console.warn(\"Could not find position for paste event\");\n            return;\n          }\n          editorActor.send({\n            type: \"behavior event\",\n            behaviorEvent: {\n              type: \"clipboard.paste\",\n              originEvent: {\n                dataTransfer: event_1.clipboardData\n              },\n              position: position_1\n            },\n            editor: slateEditor,\n            nativeEvent: event_1\n          });\n        } else result_1.insert ? editorActor.send({\n          type: \"behavior event\",\n          behaviorEvent: {\n            type: \"insert.blocks\",\n            blocks: (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_17__.parseBlocks)({\n              context: {\n                keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n                schema: editorActor.getSnapshot().context.schema\n              },\n              blocks: result_1.insert,\n              options: {\n                refreshKeys: !0,\n                validateFields: !0\n              }\n            }),\n            placement: \"auto\"\n          },\n          editor: slateEditor\n        }) : console.warn(\"Your onPaste function returned something unexpected:\", result_1);\n      }).catch((error) => (console.warn(error), error)).finally(() => {\n        relayActor.send({\n          type: \"done loading\"\n        });\n      });\n    else if (event_1.nativeEvent.clipboardData) {\n      event_1.preventDefault(), event_1.stopPropagation();\n      const selection_2 = editorActor.getSnapshot().context.selection, position_2 = selection_2 ? {\n        selection: selection_2\n      } : void 0;\n      if (!position_2) {\n        console.warn(\"Could not find position for paste event\");\n        return;\n      }\n      editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"clipboard.paste\",\n          originEvent: {\n            dataTransfer: event_1.nativeEvent.clipboardData\n          },\n          position: position_2\n        },\n        editor: slateEditor,\n        nativeEvent: event_1\n      });\n    }\n    debug(\"No result from custom paste handler, pasting normally\");\n  }, [editorActor, onPaste, portableTextEditor, relayActor, slateEditor]), handleOnFocus = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_2) => {\n    onFocus && onFocus(event_2), event_2.isDefaultPrevented() || (relayActor.send({\n      type: \"focused\",\n      event: event_2\n    }), !slateEditor.selection && isEqualToEmptyEditor(slateEditor.children, editorActor.getSnapshot().context.schema) && (slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(slateEditor, slate__WEBPACK_IMPORTED_MODULE_16__.Editor.start(slateEditor, [])), slateEditor.onChange()));\n  }, [editorActor, onFocus, relayActor, slateEditor]), handleClick = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_3) => {\n    if (onClick && onClick(event_3), event_3.isDefaultPrevented() || event_3.isPropagationStopped())\n      return;\n    const position_3 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_3.nativeEvent\n    });\n    position_3 && editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"mouse.click\",\n        position: position_3\n      },\n      editor: slateEditor,\n      nativeEvent: event_3\n    });\n  }, [onClick, editorActor, slateEditor]), handleOnBlur = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_4) => {\n    onBlur && onBlur(event_4), event_4.isPropagationStopped() || relayActor.send({\n      type: \"blurred\",\n      event: event_4\n    });\n  }, [relayActor, onBlur]), handleOnBeforeInput = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_5) => {\n    onBeforeInput && onBeforeInput(event_5);\n  }, [onBeforeInput]), validateSelection = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {\n    if (!slateEditor.selection)\n      return;\n    const root = slate_react__WEBPACK_IMPORTED_MODULE_24__.ReactEditor.findDocumentOrShadowRoot(slateEditor), {\n      activeElement\n    } = root;\n    if (ref.current !== activeElement)\n      return;\n    const domSelection = slate_react__WEBPACK_IMPORTED_MODULE_24__.ReactEditor.getWindow(slateEditor).getSelection();\n    if (!domSelection || domSelection.rangeCount === 0)\n      return;\n    const existingDOMRange = domSelection.getRangeAt(0);\n    try {\n      const newDOMRange = slate_react__WEBPACK_IMPORTED_MODULE_24__.ReactEditor.toDOMRange(slateEditor, slateEditor.selection);\n      (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug(\"DOM range out of sync, validating selection\"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));\n    } catch {\n      debug(\"Could not resolve selection, selecting top document\"), slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.deselect(slateEditor), slateEditor.children.length > 0 && slate__WEBPACK_IMPORTED_MODULE_16__.Transforms.select(slateEditor, [0, 0]), slateEditor.onChange();\n    }\n  }, [ref, slateEditor]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection);\n      return mutationObserver.observe(editableElement, {\n        attributeOldValue: !1,\n        attributes: !1,\n        characterData: !1,\n        childList: !0,\n        subtree: !0\n      }), () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [validateSelection, editableElement]);\n  const handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_6) => {\n    props.onKeyDown && props.onKeyDown(event_6), event_6.isDefaultPrevented() || slateEditor.pteWithHotKeys(event_6), event_6.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"keyboard.keydown\",\n        originEvent: {\n          key: event_6.key,\n          code: event_6.code,\n          altKey: event_6.altKey,\n          ctrlKey: event_6.ctrlKey,\n          metaKey: event_6.metaKey,\n          shiftKey: event_6.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_6\n    });\n  }, [props, editorActor, slateEditor]), handleKeyUp = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_7) => {\n    props.onKeyUp && props.onKeyUp(event_7), event_7.isDefaultPrevented() || editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"keyboard.keyup\",\n        originEvent: {\n          key: event_7.key,\n          code: event_7.code,\n          altKey: event_7.altKey,\n          ctrlKey: event_7.ctrlKey,\n          metaKey: event_7.metaKey,\n          shiftKey: event_7.shiftKey\n        }\n      },\n      editor: slateEditor,\n      nativeEvent: event_7\n    });\n  }, [props, editorActor, slateEditor]), scrollSelectionIntoViewToSlate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {\n    if (scrollSelectionIntoView !== void 0)\n      return scrollSelectionIntoView === null ? lodash_noop_js__WEBPACK_IMPORTED_MODULE_3__ : (_editor, domRange) => {\n        scrollSelectionIntoView(portableTextEditor, domRange);\n      };\n  }, [portableTextEditor, scrollSelectionIntoView]);\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    ref.current = slate_react__WEBPACK_IMPORTED_MODULE_24__.ReactEditor.toDOMNode(slateEditor, slateEditor), setEditableElement(ref.current);\n  }, [slateEditor, ref]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    const window_0 = slate_react__WEBPACK_IMPORTED_MODULE_24__.ReactEditor.getWindow(slateEditor), onDragEnd_0 = () => {\n      editorActor.send({\n        type: \"dragend\"\n      });\n    }, onDrop_0 = () => {\n      editorActor.send({\n        type: \"drop\"\n      });\n    };\n    return window_0.document.addEventListener(\"dragend\", onDragEnd_0), window_0.document.addEventListener(\"drop\", onDrop_0), () => {\n      window_0.document.removeEventListener(\"dragend\", onDragEnd_0), window_0.document.removeEventListener(\"drop\", onDrop_0);\n    };\n  }, [slateEditor, editorActor]);\n  const handleDragStart = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_8) => {\n    if (onDragStart?.(event_8), event_8.isDefaultPrevented() || event_8.isPropagationStopped())\n      return;\n    const position_4 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_8.nativeEvent\n    });\n    if (!position_4) {\n      console.warn(\"Could not find position for dragstart event\");\n      return;\n    }\n    return editorActor.send({\n      type: \"dragstart\",\n      origin: position_4\n    }), editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"drag.dragstart\",\n        originEvent: {\n          clientX: event_8.clientX,\n          clientY: event_8.clientY,\n          dataTransfer: event_8.dataTransfer\n        },\n        position: position_4\n      },\n      editor: slateEditor\n    }), !0;\n  }, [onDragStart, editorActor, slateEditor]), handleDrag = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_9) => {\n    if (onDrag?.(event_9), !(event_9.isDefaultPrevented() || event_9.isPropagationStopped() || !getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_9.nativeEvent\n    })))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.drag\",\n          originEvent: {\n            dataTransfer: event_9.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDrag, editorActor, slateEditor]), handleDragEnd = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_10) => {\n    if (onDragEnd?.(event_10), !(event_10.isDefaultPrevented() || event_10.isPropagationStopped()))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragend\",\n          originEvent: {\n            dataTransfer: event_10.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDragEnd, editorActor, slateEditor]), handleDragEnter = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_11) => {\n    if (onDragEnter?.(event_11), event_11.isDefaultPrevented() || event_11.isPropagationStopped())\n      return;\n    const position_6 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_11.nativeEvent\n    });\n    if (position_6)\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragenter\",\n          originEvent: {\n            dataTransfer: event_11.dataTransfer\n          },\n          position: position_6\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDragEnter, editorActor, slateEditor]), handleDragOver = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_12) => {\n    if (onDragOver?.(event_12), event_12.isDefaultPrevented() || event_12.isPropagationStopped())\n      return;\n    const position_7 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_12.nativeEvent\n    });\n    if (position_7)\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragover\",\n          originEvent: {\n            dataTransfer: event_12.dataTransfer\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position: position_7\n        },\n        editor: slateEditor,\n        nativeEvent: event_12\n      }), !0;\n  }, [onDragOver, editorActor, slateEditor]), handleDrop = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_13) => {\n    if (onDrop?.(event_13), event_13.isDefaultPrevented() || event_13.isPropagationStopped())\n      return;\n    const position_8 = getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_13.nativeEvent\n    });\n    if (!position_8) {\n      console.warn(\"Could not find position for drop event\");\n      return;\n    }\n    return editorActor.send({\n      type: \"behavior event\",\n      behaviorEvent: {\n        type: \"drag.drop\",\n        originEvent: {\n          dataTransfer: event_13.dataTransfer\n        },\n        dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n        position: position_8\n      },\n      editor: slateEditor,\n      nativeEvent: event_13\n    }), !0;\n  }, [onDrop, editorActor, slateEditor]), handleDragLeave = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((event_14) => {\n    if (onDragLeave?.(event_14), !(event_14.isDefaultPrevented() || event_14.isPropagationStopped() || !getEventPosition({\n      editorActor,\n      slateEditor,\n      event: event_14.nativeEvent\n    })))\n      return editorActor.send({\n        type: \"behavior event\",\n        behaviorEvent: {\n          type: \"drag.dragleave\",\n          originEvent: {\n            dataTransfer: event_14.dataTransfer\n          }\n        },\n        editor: slateEditor\n      }), !0;\n  }, [onDragLeave, editorActor, slateEditor]);\n  return portableTextEditor ? hasInvalidValue ? null : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(\n    slate_react__WEBPACK_IMPORTED_MODULE_24__.Editable,\n    {\n      ...restProps,\n      \"data-read-only\": readOnly,\n      autoFocus: !1,\n      className: restProps.className || \"pt-editable\",\n      decorate,\n      onBlur: handleOnBlur,\n      onCopy: handleCopy,\n      onCut: handleCut,\n      onClick: handleClick,\n      onDOMBeforeInput: handleOnBeforeInput,\n      onDragStart: handleDragStart,\n      onDrag: handleDrag,\n      onDragEnd: handleDragEnd,\n      onDragEnter: handleDragEnter,\n      onDragOver: handleDragOver,\n      onDrop: handleDrop,\n      onDragLeave: handleDragLeave,\n      onFocus: handleOnFocus,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onPaste: handlePaste,\n      readOnly,\n      renderPlaceholder: void 0,\n      renderElement,\n      renderLeaf,\n      renderText,\n      scrollSelectionIntoView: scrollSelectionIntoViewToSlate\n    }\n  ) : null;\n});\nPortableTextEditable.displayName = \"ForwardRef(PortableTextEditable)\";\nfunction useConstant(factory) {\n  const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n  return ref.current || (ref.current = {\n    constant: factory()\n  }), ref.current.constant;\n}\nfunction EditorProvider(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(32);\n  let t0;\n  $[0] !== props.initialConfig ? (t0 = () => {\n    const internalEditor = createInternalEditor(props.initialConfig), portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor\n    });\n    return {\n      internalEditor,\n      portableTextEditor\n    };\n  }, $[0] = props.initialConfig, $[1] = t0) : t0 = $[1];\n  const {\n    internalEditor: internalEditor_0,\n    portableTextEditor: portableTextEditor_0\n  } = useConstant(t0);\n  let t1;\n  $[2] !== internalEditor_0.actors.editorActor || $[3] !== internalEditor_0.actors.mutationActor || $[4] !== internalEditor_0.actors.relayActor || $[5] !== internalEditor_0.actors.syncActor || $[6] !== internalEditor_0.subscriptions ? (t1 = () => {\n    const unsubscribers = [];\n    for (const subscription of internalEditor_0.subscriptions)\n      unsubscribers.push(subscription());\n    return internalEditor_0.actors.editorActor.start(), internalEditor_0.actors.mutationActor.start(), internalEditor_0.actors.relayActor.start(), internalEditor_0.actors.syncActor.start(), () => {\n      for (const unsubscribe of unsubscribers)\n        unsubscribe();\n      stopActor(internalEditor_0.actors.editorActor), stopActor(internalEditor_0.actors.mutationActor), stopActor(internalEditor_0.actors.relayActor), stopActor(internalEditor_0.actors.syncActor);\n    };\n  }, $[2] = internalEditor_0.actors.editorActor, $[3] = internalEditor_0.actors.mutationActor, $[4] = internalEditor_0.actors.relayActor, $[5] = internalEditor_0.actors.syncActor, $[6] = internalEditor_0.subscriptions, $[7] = t1) : t1 = $[7];\n  let t2;\n  $[8] !== internalEditor_0 ? (t2 = [internalEditor_0], $[8] = internalEditor_0, $[9] = t2) : t2 = $[9], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t1, t2);\n  let t3;\n  $[10] !== portableTextEditor_0.change$ ? (t3 = (change) => {\n    portableTextEditor_0.change$.next(change);\n  }, $[10] = portableTextEditor_0.change$, $[11] = t3) : t3 = $[11];\n  let t4;\n  $[12] !== internalEditor_0.actors.relayActor || $[13] !== t3 ? (t4 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RouteEventsToChanges, { relayActor: internalEditor_0.actors.relayActor, onChange: t3 }), $[12] = internalEditor_0.actors.relayActor, $[13] = t3, $[14] = t4) : t4 = $[14];\n  let t5;\n  $[15] !== portableTextEditor_0 || $[16] !== props.children ? (t5 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(PortableTextEditorContext.Provider, { value: portableTextEditor_0, children: props.children }), $[15] = portableTextEditor_0, $[16] = props.children, $[17] = t5) : t5 = $[17];\n  let t6;\n  $[18] !== internalEditor_0.editor._internal.slateEditor.initialValue || $[19] !== internalEditor_0.editor._internal.slateEditor.instance || $[20] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_24__.Slate, { editor: internalEditor_0.editor._internal.slateEditor.instance, initialValue: internalEditor_0.editor._internal.slateEditor.initialValue, children: t5 }), $[18] = internalEditor_0.editor._internal.slateEditor.initialValue, $[19] = internalEditor_0.editor._internal.slateEditor.instance, $[20] = t5, $[21] = t6) : t6 = $[21];\n  let t7;\n  $[22] !== internalEditor_0.actors.relayActor || $[23] !== t6 ? (t7 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RelayActorContext.Provider, { value: internalEditor_0.actors.relayActor, children: t6 }), $[22] = internalEditor_0.actors.relayActor, $[23] = t6, $[24] = t7) : t7 = $[24];\n  let t8;\n  $[25] !== internalEditor_0.actors.editorActor || $[26] !== t7 ? (t8 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(EditorActorContext.Provider, { value: internalEditor_0.actors.editorActor, children: t7 }), $[25] = internalEditor_0.actors.editorActor, $[26] = t7, $[27] = t8) : t8 = $[27];\n  let t9;\n  return $[28] !== internalEditor_0.editor || $[29] !== t4 || $[30] !== t8 ? (t9 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_14__.EditorContext.Provider, { value: internalEditor_0.editor, children: [\n    t4,\n    t8\n  ] }), $[28] = internalEditor_0.editor, $[29] = t4, $[30] = t8, $[31] = t9) : t9 = $[31], t9;\n}\nfunction defineSchema(definition) {\n  return definition;\n}\nconst usePortableTextEditorSelection = () => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(3), editorActor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(EditorActorContext), [selection, setSelection] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n  let t0, t1;\n  return $[0] !== editorActor ? (t0 = () => {\n    const subscription = editorActor.on(\"selection\", (event) => {\n      (0,react__WEBPACK_IMPORTED_MODULE_1__.startTransition)(() => {\n        setSelection(event.selection);\n      });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, t1 = [editorActor], $[0] = editorActor, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), selection;\n};\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/plugins/index.js":
/*!*************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/plugins/index.js ***!
  \*************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BehaviorPlugin: () => (/* binding */ BehaviorPlugin),\n/* harmony export */   DecoratorShortcutPlugin: () => (/* binding */ DecoratorShortcutPlugin),\n/* harmony export */   EditorRefPlugin: () => (/* binding */ EditorRefPlugin),\n/* harmony export */   EventListenerPlugin: () => (/* binding */ EventListenerPlugin),\n/* harmony export */   MarkdownPlugin: () => (/* binding */ MarkdownPlugin),\n/* harmony export */   OneLinePlugin: () => (/* binding */ OneLinePlugin)\n/* harmony export */ });\n/* harmony import */ var react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-compiler-runtime */ \"(ssr)/../node_modules/.pnpm/react-compiler-runtime@19.1.0-rc.2_react@18.3.1/node_modules/react-compiler-runtime/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/.pnpm/next@15.5.2_@babel+core@7.2_a4e656b99e842170c0a22eb76d21770b/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_chunks-es/use-editor.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js\");\n/* harmony import */ var _xstate_react__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @xstate/react */ \"(ssr)/../node_modules/.pnpm/@xstate+react@6.0.0_@types+_62b57e7843be011498b19f66ee1684b8/node_modules/@xstate/react/dist/xstate-react.development.esm.js\");\n/* harmony import */ var lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEqual.js */ \"(ssr)/../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isEqual.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/.pnpm/xstate@5.22.0/node_modules/xstate/dist/xstate.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/.pnpm/xstate@5.22.0/node_modules/xstate/actors/dist/xstate-actors.development.esm.js\");\n/* harmony import */ var xstate__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! xstate */ \"(ssr)/../node_modules/.pnpm/xstate@5.22.0/node_modules/xstate/dist/assign-f4c801fe.development.esm.js\");\n/* harmony import */ var _chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../_chunks-es/selector.is-selection-expanded.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js\");\n/* harmony import */ var _chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../_chunks-es/util.slice-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js\");\n/* harmony import */ var _chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../_chunks-es/util.child-selection-point-to-block-offset.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js\");\n/* harmony import */ var _chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../_chunks-es/selector.get-text-before.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js\");\n/* harmony import */ var _behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../behaviors/index.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/behaviors/index.js\");\n/* harmony import */ var use_effect_event__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! use-effect-event */ \"(ssr)/../node_modules/.pnpm/use-effect-event@1.0.2_react@18.3.1/node_modules/use-effect-event/dist/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/../node_modules/.pnpm/next@15.5.2_@babel+core@7.2_a4e656b99e842170c0a22eb76d21770b/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var _chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../_chunks-es/util.merge-text-blocks.js */ \"(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction BehaviorPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0, t1;\n  return $[0] !== editor || $[1] !== props.behaviors ? (t0 = () => {\n    const unregisterBehaviors = props.behaviors.map((behavior) => editor.registerBehavior({\n      behavior\n    }));\n    return () => {\n      unregisterBehaviors.forEach(_temp);\n    };\n  }, t1 = [editor, props.behaviors], $[0] = editor, $[1] = props.behaviors, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction _temp(unregister) {\n  return unregister();\n}\nfunction createPairRegex(char, amount) {\n  const prePrefix = `(?<!\\\\${char})`, prefix = `\\\\${char}`.repeat(Math.max(amount, 1)), postPrefix = \"(?!\\\\s)\", content = `([^${char}\\\\n]+?)`, preSuffix = \"(?<!\\\\s)\", suffix = `\\\\${char}`.repeat(Math.max(amount, 1)), postSuffix = `(?!\\\\${char})`;\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`;\n}\nfunction createDecoratorPairBehavior(config) {\n  config.pair.amount < 1 && console.warn(\"The amount of characters in the pair should be greater than 0\");\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount), regEx = new RegExp(`(${pairRegex})$`);\n  return (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (config.pair.amount < 1)\n        return !1;\n      const decorator = config.decorator({\n        schema: snapshot.context.schema\n      });\n      if (decorator === void 0)\n        return !1;\n      const focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), selectionStartPoint = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getSelectionStartPoint)(snapshot), selectionStartOffset = selectionStartPoint ? (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: {\n          schema: snapshot.context.schema,\n          value: snapshot.context.value\n        },\n        selectionPoint: selectionStartPoint\n      }) : void 0;\n      if (!focusTextBlock || !selectionStartOffset)\n        return !1;\n      const newText = `${(0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__.getBlockTextBefore)(snapshot)}${event.text}`, textToDecorate = newText.match(regEx)?.at(0);\n      if (textToDecorate === void 0)\n        return !1;\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset: newText.length - textToDecorate.length + config.pair.char.length * config.pair.amount\n        }\n      }, suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset: selectionStartOffset.offset + event.text.length - config.pair.char.length * config.pair.amount\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length\n        }\n      };\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.blockOffsetsToSelection)({\n          context: snapshot.context,\n          offsets: prefixOffsets\n        }), inlineObjectBeforePrefixFocus = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: prefixSelection ? {\n              anchor: prefixSelection.focus,\n              focus: prefixSelection.focus\n            } : null\n          }\n        }), inlineObjectBeforePrefixFocusOffset = inlineObjectBeforePrefixFocus ? (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.childSelectionPointToBlockOffset)({\n          context: {\n            schema: snapshot.context.schema,\n            value: snapshot.context.value\n          },\n          selectionPoint: {\n            path: inlineObjectBeforePrefixFocus.path,\n            offset: 0\n          }\n        }) : void 0;\n        if (inlineObjectBeforePrefixFocusOffset && inlineObjectBeforePrefixFocusOffset.offset > prefixOffsets.anchor.offset && inlineObjectBeforePrefixFocusOffset.offset < prefixOffsets.focus.offset)\n          return !1;\n      }\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), previousInlineObjectOffset = previousInlineObject ? (0,_chunks_es_util_child_selection_point_to_block_offset_js__WEBPACK_IMPORTED_MODULE_9__.childSelectionPointToBlockOffset)({\n          context: {\n            schema: snapshot.context.schema,\n            value: snapshot.context.value\n          },\n          selectionPoint: {\n            path: previousInlineObject.path,\n            offset: 0\n          }\n        }) : void 0;\n        if (previousInlineObjectOffset && previousInlineObjectOffset.offset > suffixOffsets.anchor.offset && previousInlineObjectOffset.offset < suffixOffsets.focus.offset)\n          return !1;\n      }\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator\n      };\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({\n        event\n      }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)(event)],\n      (_, {\n        prefixOffsets,\n        suffixOffsets,\n        decorator\n      }) => [\n        // Decorate the text between the prefix and suffix\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"decorator.add\",\n          decorator,\n          at: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor\n          }\n        }),\n        // Delete the suffix\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"delete.text\",\n          at: suffixOffsets\n        }),\n        // Delete the prefix\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"delete.text\",\n          at: prefixOffsets\n        }),\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n          type: \"decorator.remove\",\n          decorator\n        }),\n        (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.effect)(() => {\n          config.onDecorate({\n            ...suffixOffsets.anchor,\n            offset: suffixOffsets.anchor.offset - (prefixOffsets.focus.offset - prefixOffsets.anchor.offset)\n          });\n        })\n      ]\n    ]\n  });\n}\nfunction DecoratorShortcutPlugin(config) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(4), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0;\n  return $[0] !== config.decorator || $[1] !== config.pair || $[2] !== editor ? (t0 = {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair\n    }\n  }, $[0] = config.decorator, $[1] = config.pair, $[2] = editor, $[3] = t0) : t0 = $[3], (0,_xstate_react__WEBPACK_IMPORTED_MODULE_10__.useActorRef)(decoratorPairMachine, t0), null;\n}\nconst emphasisListener = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: createDecoratorPairBehavior({\n    decorator: input.decorator,\n    pair: input.pair,\n    onDecorate: (offset) => {\n      sendBack({\n        type: \"emphasis.add\",\n        blockOffset: offset\n      });\n    }\n  })\n}), selectionListenerCallback = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"select\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (!event.at)\n        return {\n          blockOffsets: void 0\n        };\n      const anchor = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: event.at.anchor\n      }), focus = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: event.at.focus\n      });\n      return !anchor || !focus ? {\n        blockOffsets: void 0\n      } : {\n        blockOffsets: {\n          anchor,\n          focus\n        }\n      };\n    },\n    actions: [({\n      event\n    }, {\n      blockOffsets\n    }) => [{\n      type: \"effect\",\n      effect: () => {\n        sendBack({\n          type: \"selection\",\n          blockOffsets\n        });\n      }\n    }, (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.forward)(event)]]\n  })\n}), deleteBackwardListenerCallback = ({\n  sendBack,\n  input\n}) => input.editor.registerBehavior({\n  behavior: (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"delete.backward\",\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"history.undo\"\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.effect)(() => {\n      sendBack({\n        type: \"delete.backward\"\n      });\n    })]]\n  })\n}), decoratorPairMachine = (0,xstate__WEBPACK_IMPORTED_MODULE_11__.setup)({\n  types: {\n    context: {},\n    input: {},\n    events: {}\n  },\n  actors: {\n    \"emphasis listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(emphasisListener),\n    \"delete.backward listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(deleteBackwardListenerCallback),\n    \"selection listener\": (0,xstate__WEBPACK_IMPORTED_MODULE_12__.fromCallback)(selectionListenerCallback)\n  }\n}).createMachine({\n  id: \"decorator pair\",\n  context: ({\n    input\n  }) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair\n  }),\n  initial: \"idle\",\n  states: {\n    idle: {\n      invoke: [{\n        src: \"emphasis listener\",\n        input: ({\n          context\n        }) => ({\n          decorator: context.decorator,\n          editor: context.editor,\n          pair: context.pair\n        })\n      }],\n      on: {\n        \"emphasis.add\": {\n          target: \"emphasis added\",\n          actions: (0,xstate__WEBPACK_IMPORTED_MODULE_13__.a)({\n            offsetAfterEmphasis: ({\n              event\n            }) => event.blockOffset\n          })\n        }\n      }\n    },\n    \"emphasis added\": {\n      exit: [(0,xstate__WEBPACK_IMPORTED_MODULE_13__.a)({\n        offsetAfterEmphasis: void 0\n      })],\n      invoke: [{\n        src: \"selection listener\",\n        input: ({\n          context\n        }) => ({\n          editor: context.editor\n        })\n      }, {\n        src: \"delete.backward listener\",\n        input: ({\n          context\n        }) => ({\n          editor: context.editor\n        })\n      }],\n      on: {\n        selection: {\n          target: \"idle\",\n          guard: ({\n            context,\n            event\n          }) => !lodash_isEqual_js__WEBPACK_IMPORTED_MODULE_2__({\n            anchor: context.offsetAfterEmphasis,\n            focus: context.offsetAfterEmphasis\n          }, event.blockOffsets)\n        },\n        \"delete.backward\": {\n          target: \"idle\"\n        }\n      }\n    }\n  }\n}), EditorRefPlugin = react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((_, ref) => {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(2), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)(), portableTextEditorRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(editor);\n  let t0, t1;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = () => portableTextEditorRef.current, t1 = [], $[0] = t0, $[1] = t1) : (t0 = $[0], t1 = $[1]), react__WEBPACK_IMPORTED_MODULE_1__.useImperativeHandle(ref, t0, t1), null;\n});\nEditorRefPlugin.displayName = \"EditorRefPlugin\";\nfunction EventListenerPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(5), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)(), on = (0,use_effect_event__WEBPACK_IMPORTED_MODULE_14__.useEffectEvent)(props.on);\n  let t0;\n  $[0] !== editor || $[1] !== on ? (t0 = () => {\n    const subscription = editor.on(\"*\", on);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, $[0] = editor, $[1] = on, $[2] = t0) : t0 = $[2];\n  let t1;\n  return $[3] !== editor ? (t1 = [editor], $[3] = editor, $[4] = t1) : t1 = $[4], (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1), null;\n}\nfunction createMarkdownBehaviors(config) {\n  const automaticBlockquoteOnSpace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), blockOffset = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (previousInlineObject || !blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.getTextBlockText)(focusTextBlock.node), caretAtTheEndOfQuote = blockOffset.offset === 1, looksLikeMarkdownQuote = /^>/.test(blockText), blockquoteStyle = config.blockquoteStyle?.(snapshot.context);\n      return caretAtTheEndOfQuote && looksLikeMarkdownQuote && blockquoteStyle !== void 0 ? {\n        focusTextBlock,\n        style: blockquoteStyle\n      } : !1;\n    },\n    actions: [() => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.text\",\n      text: \" \"\n    })], (_, {\n      focusTextBlock,\n      style\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: 2\n        }\n      }\n    })]]\n  }), automaticHr = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const hrCharacter = event.text === \"-\" ? \"-\" : event.text === \"*\" ? \"*\" : event.text === \"_\" ? \"_\" : void 0;\n      if (hrCharacter === void 0)\n        return !1;\n      const hrObject = config.horizontalRuleObject?.(snapshot.context), focusBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot);\n      if (!hrObject || !focusBlock || !selectionCollapsed)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), textBefore = (0,_chunks_es_selector_get_text_before_js__WEBPACK_IMPORTED_MODULE_8__.getBlockTextBefore)(snapshot), hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3\n        }\n      };\n      return !previousInlineObject && textBefore === `${hrCharacter}${hrCharacter}` ? {\n        hrObject,\n        focusBlock,\n        hrCharacter,\n        hrBlockOffsets\n      } : !1;\n    },\n    actions: [(_, {\n      hrCharacter\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.text\",\n      text: hrCharacter\n    })], (_, {\n      hrObject,\n      hrBlockOffsets\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      placement: \"before\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      }\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: hrBlockOffsets\n    })]]\n  }), automaticHrOnPaste = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"clipboard.paste\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const text = event.originEvent.dataTransfer.getData(\"text/plain\"), hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/, hrCharacters = text.match(hrRegExp)?.[0], hrObject = config.horizontalRuleObject?.(snapshot.context), focusBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusBlock)(snapshot);\n      return !hrCharacters || !hrObject || !focusBlock ? !1 : {\n        hrCharacters,\n        hrObject,\n        focusBlock\n      };\n    },\n    actions: [(_, {\n      hrCharacters\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.text\",\n      text: hrCharacters\n    })], ({\n      snapshot\n    }, {\n      hrObject,\n      focusBlock\n    }) => (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.isTextBlock)(snapshot.context, focusBlock.node) ? [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: snapshot.context.schema.block.name,\n        children: focusBlock.node.children\n      },\n      placement: \"after\"\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      },\n      placement: \"after\"\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.block\",\n      at: focusBlock.path\n    })] : [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: {\n        _type: hrObject.name,\n        ...hrObject.value ?? {}\n      },\n      placement: \"after\"\n    })]]\n  }), automaticHeadingOnSpace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const blockOffset = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (!blockOffset)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), blockText = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.getTextBlockText)(focusTextBlock.node), markdownHeadingSearch = /^#+/.exec(blockText), level = markdownHeadingSearch ? markdownHeadingSearch[0].length : void 0, caretAtTheEndOfHeading = blockOffset.offset === level;\n      if (previousInlineObject || !caretAtTheEndOfHeading)\n        return !1;\n      const style = level !== void 0 ? config.headingStyle?.({\n        schema: snapshot.context.schema,\n        level\n      }) : void 0;\n      return level !== void 0 && style !== void 0 ? {\n        focusTextBlock,\n        style,\n        level\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)(event)], (_, {\n      focusTextBlock,\n      style,\n      level\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.unset\",\n      props: [\"listItem\", \"level\"],\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: level + 1\n        }\n      }\n    })]]\n  }), clearStyleOnBackspace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"delete.backward\",\n    guard: ({\n      snapshot\n    }) => {\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const atTheBeginningOfBLock = focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0, defaultStyle = config.defaultStyle?.(snapshot.context);\n      return atTheBeginningOfBLock && defaultStyle && focusTextBlock.node.style !== defaultStyle ? {\n        defaultStyle,\n        focusTextBlock\n      } : !1;\n    },\n    actions: [(_, {\n      defaultStyle,\n      focusTextBlock\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        style: defaultStyle\n      },\n      at: focusTextBlock.path\n    })]]\n  }), automaticListOnSpace = (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.text\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      if (event.text !== \" \")\n        return !1;\n      const selectionCollapsed = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionCollapsed)(snapshot), focusTextBlock = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot), focusSpan = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusSpan)(snapshot);\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan)\n        return !1;\n      const previousInlineObject = (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getPreviousInlineObject)(snapshot), blockOffset = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.spanSelectionPointToBlockOffset)({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [{\n            _key: focusTextBlock.node._key\n          }, \"children\", {\n            _key: focusSpan.node._key\n          }],\n          offset: snapshot.context.selection?.focus.offset ?? 0\n        }\n      });\n      if (previousInlineObject || !blockOffset)\n        return !1;\n      const blockText = (0,_chunks_es_util_slice_blocks_js__WEBPACK_IMPORTED_MODULE_7__.getTextBlockText)(focusTextBlock.node), defaultStyle = config.defaultStyle?.(snapshot.context), looksLikeUnorderedList = /^(-|\\*)/.test(blockText), unorderedListStyle = config.unorderedListStyle?.(snapshot.context), caretAtTheEndOfUnorderedList = blockOffset.offset === 1;\n      if (defaultStyle && caretAtTheEndOfUnorderedList && looksLikeUnorderedList && unorderedListStyle !== void 0)\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle\n        };\n      const looksLikeOrderedList = /^1\\./.test(blockText), orderedListStyle = config.orderedListStyle?.(snapshot.context), caretAtTheEndOfOrderedList = blockOffset.offset === 2;\n      return defaultStyle && caretAtTheEndOfOrderedList && looksLikeOrderedList && orderedListStyle !== void 0 ? {\n        focusTextBlock,\n        listItem: orderedListStyle,\n        listItemLength: 2,\n        style: defaultStyle\n      } : !1;\n    },\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)(event)], (_, {\n      focusTextBlock,\n      style,\n      listItem,\n      listItemLength\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"block.set\",\n      props: {\n        listItem,\n        level: 1,\n        style\n      },\n      at: focusTextBlock.path\n    }), (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete.text\",\n      at: {\n        anchor: {\n          path: focusTextBlock.path,\n          offset: 0\n        },\n        focus: {\n          path: focusTextBlock.path,\n          offset: listItemLength + 1\n        }\n      }\n    })]]\n  });\n  return [automaticBlockquoteOnSpace, automaticHeadingOnSpace, automaticHr, automaticHrOnPaste, clearStyleOnBackspace, automaticListOnSpace];\n}\nfunction MarkdownPlugin(props) {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(17), editor = (0,_chunks_es_use_editor_js__WEBPACK_IMPORTED_MODULE_4__.useEditor)();\n  let t0, t1;\n  $[0] !== editor || $[1] !== props.config ? (t0 = () => {\n    const unregisterBehaviors = createMarkdownBehaviors(props.config).map((behavior) => editor.registerBehavior({\n      behavior\n    }));\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors)\n        unregisterBehavior();\n    };\n  }, t1 = [editor, props.config], $[0] = editor, $[1] = props.config, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(t0, t1);\n  let t2;\n  $[4] !== props.config.boldDecorator ? (t2 = props.config.boldDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.boldDecorator, pair: {\n      char: \"*\",\n      amount: 2\n    } }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.boldDecorator, pair: {\n      char: \"_\",\n      amount: 2\n    } })\n  ] }) : null, $[4] = props.config.boldDecorator, $[5] = t2) : t2 = $[5];\n  let t3;\n  $[6] !== props.config.codeDecorator ? (t3 = props.config.codeDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.codeDecorator, pair: {\n    char: \"`\",\n    amount: 1\n  } }) : null, $[6] = props.config.codeDecorator, $[7] = t3) : t3 = $[7];\n  let t4;\n  $[8] !== props.config.italicDecorator ? (t4 = props.config.italicDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.italicDecorator, pair: {\n      char: \"*\",\n      amount: 1\n    } }),\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.italicDecorator, pair: {\n      char: \"_\",\n      amount: 1\n    } })\n  ] }) : null, $[8] = props.config.italicDecorator, $[9] = t4) : t4 = $[9];\n  let t5;\n  $[10] !== props.config.strikeThroughDecorator ? (t5 = props.config.strikeThroughDecorator ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DecoratorShortcutPlugin, { decorator: props.config.strikeThroughDecorator, pair: {\n    char: \"~\",\n    amount: 2\n  } }) : null, $[10] = props.config.strikeThroughDecorator, $[11] = t5) : t5 = $[11];\n  let t6;\n  return $[12] !== t2 || $[13] !== t3 || $[14] !== t4 || $[15] !== t5 ? (t6 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, { children: [\n    t2,\n    t3,\n    t4,\n    t5\n  ] }), $[12] = t2, $[13] = t3, $[14] = t4, $[15] = t5, $[16] = t6) : t6 = $[16], t6;\n}\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.break\",\n    guard: ({\n      snapshot\n    }) => snapshot.context.selection && (0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.isSelectionExpanded)(snapshot) ? {\n      selection: snapshot.context.selection\n    } : !1,\n    actions: [(_, {\n      selection\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"delete\",\n      at: selection\n    })]]\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.break\",\n    actions: []\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    guard: ({\n      event\n    }) => event.placement === \"before\" || event.placement === \"after\",\n    actions: []\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    guard: ({\n      snapshot,\n      event\n    }) => !(!(0,_chunks_es_selector_is_selection_expanded_js__WEBPACK_IMPORTED_MODULE_6__.getFocusTextBlock)(snapshot) || !(0,_chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, event.block)),\n    actions: [({\n      event\n    }) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.execute)({\n      type: \"insert.block\",\n      block: event.block,\n      placement: \"auto\",\n      select: \"end\"\n    })]]\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.block\",\n    actions: []\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.blocks\",\n    guard: ({\n      snapshot,\n      event\n    }) => {\n      const textBlocks = event.blocks.filter((block) => (0,_chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_15__.isTextBlock)(snapshot.context, block));\n      return textBlocks.length === 0 ? !1 : textBlocks.reduce((targetBlock, incomingBlock) => (0,_chunks_es_util_merge_text_blocks_js__WEBPACK_IMPORTED_MODULE_15__.mergeTextBlocks)({\n        context: snapshot.context,\n        targetBlock,\n        incomingBlock\n      }));\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [(0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.raise)({\n        type: \"insert.block\",\n        block,\n        placement: \"auto\"\n      })]\n    ]\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.blocks` in case the Behavior above\n   * ends up with a falsy guard.\n   */\n  (0,_behaviors_index_js__WEBPACK_IMPORTED_MODULE_5__.defineBehavior)({\n    on: \"insert.blocks\",\n    actions: []\n  })\n];\nfunction OneLinePlugin() {\n  const $ = (0,react_compiler_runtime__WEBPACK_IMPORTED_MODULE_0__.c)(1);\n  let t0;\n  return $[0] === Symbol.for(\"react.memo_cache_sentinel\") ? (t0 = /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(BehaviorPlugin, { behaviors: oneLineBehaviors }), $[0] = t0) : t0 = $[0], t0;\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@portabletext+editor@1.58.0_9fcf1baa30f4ae6386b6394a074fe8de/node_modules/@portabletext/editor/lib/plugins/index.js\n");

/***/ })

};
;