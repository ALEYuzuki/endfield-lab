"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity+diff@3.99.0";
exports.ids = ["vendor-chunks/@sanity+diff@3.99.0"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/@sanity+diff@3.99.0/node_modules/@sanity/diff/lib/index.mjs":
/*!*****************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sanity+diff@3.99.0/node_modules/@sanity/diff/lib/index.mjs ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   diffInput: () => (/* binding */ diffInput),\n/* harmony export */   wrap: () => (/* binding */ wrap)\n/* harmony export */ });\n/* harmony import */ var _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/diff-match-patch */ \"(ssr)/../node_modules/.pnpm/@sanity+diff-match-patch@3.2.0/node_modules/@sanity/diff-match-patch/dist/index.js\");\n\nfunction replaceProperty(parent, prop, value) {\n  return delete parent[prop], parent[prop] = value, value;\n}\nfunction getLongestCommonSubsequence(previous, next) {\n  const matrix = getLengthMatrix(previous, next);\n  return backtrack(matrix, previous, next);\n}\nfunction getLengthMatrix(previous, next) {\n  const len1 = previous.length, len2 = next.length;\n  let x = 0, y = 0;\n  const matrix = new Array(len1 + 1);\n  for (x = 0; x < len1 + 1; x++)\n    for (matrix[x] = [len2 + 1], y = 0; y < len2 + 1; y++)\n      matrix[x][y] = 0;\n  for (x = 1; x < len1 + 1; x++)\n    for (y = 1; y < len2 + 1; y++)\n      previous[x - 1] === next[y - 1] ? matrix[x][y] = matrix[x - 1][y - 1] + 1 : matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1]);\n  return matrix;\n}\nfunction backtrack(matrix, previous, next) {\n  let prevIndex = previous.length, nextIndex = next.length;\n  const subsequence = {\n    sequence: [],\n    prevIndices: [],\n    nextIndices: []\n  };\n  for (; prevIndex !== 0 && nextIndex !== 0; )\n    if (previous[prevIndex - 1] === next[nextIndex - 1])\n      subsequence.sequence.unshift(previous[prevIndex - 1]), subsequence.prevIndices.unshift(prevIndex - 1), subsequence.nextIndices.unshift(nextIndex - 1), --prevIndex, --nextIndex;\n    else {\n      const valueAtMatrixAbove = matrix[prevIndex][nextIndex - 1], valueAtMatrixLeft = matrix[prevIndex - 1][nextIndex];\n      valueAtMatrixAbove > valueAtMatrixLeft ? --nextIndex : --prevIndex;\n    }\n  return subsequence;\n}\nfunction diffArray(fromInput, toInput, options) {\n  if (fromInput === toInput) {\n    const fromValue = fromInput.value, toValue = toInput.value;\n    return {\n      type: \"array\",\n      action: \"unchanged\",\n      isChanged: !1,\n      fromValue,\n      toValue,\n      get items() {\n        const items2 = diffExactByPosition(fromInput, toInput, options);\n        if (!items2) throw new Error(\"invariant broken: equivalent input, but diff detected\");\n        return replaceProperty(this, \"items\", items2);\n      }\n    };\n  }\n  const keyedA = indexByKey(fromInput), keyedB = indexByKey(toInput);\n  if (keyedA && keyedB)\n    return diffArrayByKey(fromInput, keyedA, toInput, keyedB);\n  const items = diffExactByPosition(fromInput, toInput, options);\n  return items ? buildArrayDiff(fromInput, toInput, items, !1) : diffArrayByReinsert(fromInput, toInput);\n}\nfunction buildArrayDiff(fromInput, toInput, items, isChanged) {\n  const fromValue = fromInput.value, toValue = toInput.value;\n  return isChanged ? {\n    type: \"array\",\n    action: \"changed\",\n    isChanged: !0,\n    fromValue,\n    toValue,\n    items,\n    annotation: toInput.annotation\n  } : {\n    type: \"array\",\n    action: \"unchanged\",\n    isChanged: !1,\n    fromValue,\n    toValue,\n    items\n  };\n}\nfunction diffExactByPosition(fromInput, toInput, options) {\n  if (fromInput.length !== toInput.length)\n    return;\n  const items = [];\n  for (let idx = 0; idx < fromInput.length; idx++) {\n    const diff = diffInput(fromInput.at(idx), toInput.at(idx), options);\n    if (diff.isChanged)\n      return;\n    items.push({\n      fromIndex: idx,\n      toIndex: idx,\n      hasMoved: !1,\n      diff,\n      annotation: toInput.annotationAt(idx)\n    });\n  }\n  return items;\n}\nfunction diffArrayByReinsert(fromInput, toInput, options) {\n  const items = [];\n  for (let idx = 0; idx < toInput.length; idx++) {\n    const input = toInput.at(idx);\n    items.push({\n      fromIndex: void 0,\n      toIndex: idx,\n      hasMoved: !1,\n      diff: addedInput(input, void 0),\n      annotation: input.annotation\n    });\n  }\n  for (let idx = 0; idx < fromInput.length; idx++) {\n    const input = fromInput.at(idx);\n    items.push({\n      fromIndex: idx,\n      toIndex: void 0,\n      hasMoved: !1,\n      diff: removedInput(input, void 0),\n      annotation: input.annotation\n    });\n  }\n  return buildArrayDiff(fromInput, toInput, items, !0);\n}\nfunction diffArrayByKey(fromArray, fromKeyIndex, toArray, toKeyIndex, options) {\n  const items = [];\n  let isChanged = !1;\n  function diffCommon(key, fromIndex, toIndex, hasMoved) {\n    deletePositionInIndex(fromKeyIndex.index, key, fromIndex), deletePositionInIndex(toKeyIndex.index, key, toIndex);\n    const fromInput = fromArray.at(fromIndex), toInput = toArray.at(toIndex), diff = diffInput(fromInput, toInput);\n    items.push({\n      fromIndex,\n      toIndex,\n      hasMoved,\n      diff,\n      annotation: toArray.annotationAt(toIndex)\n    }), (diff.isChanged || fromIndex !== toIndex) && (isChanged = !0);\n  }\n  const lcs = getLongestCommonSubsequence(fromKeyIndex.keys, toKeyIndex.keys);\n  for (let fromIndex = 0; fromIndex < fromKeyIndex.keys.length; fromIndex++) {\n    const key = fromKeyIndex.keys[fromIndex], subsequenceIdx = lcs.prevIndices.indexOf(fromIndex);\n    if (subsequenceIdx !== -1) {\n      diffCommon(key, fromIndex, lcs.nextIndices[subsequenceIdx], !1);\n      continue;\n    }\n    const toIndexes = toKeyIndex.index.get(key), toIndex = toIndexes && toIndexes.find((idx) => !lcs.nextIndices.includes(idx));\n    if (toIndex !== void 0) {\n      diffCommon(key, fromIndex, toIndex, !0);\n      continue;\n    }\n    const input = fromArray.at(fromIndex);\n    items.push({\n      fromIndex,\n      toIndex: void 0,\n      hasMoved: !1,\n      diff: removedInput(input, void 0),\n      annotation: fromArray.annotationAt(fromIndex)\n    }), isChanged = !0;\n  }\n  for (const positions of toKeyIndex.index.values()) {\n    for (const toIndex of positions) {\n      const input = toArray.at(toIndex);\n      items.push({\n        fromIndex: void 0,\n        toIndex,\n        hasMoved: !1,\n        diff: addedInput(input, void 0),\n        annotation: toArray.annotationAt(toIndex)\n      });\n    }\n    isChanged = !0;\n  }\n  return items.sort(compareItemDiff), buildArrayDiff(fromArray, toArray, items, isChanged);\n}\nfunction compareItemDiff(a, b) {\n  if (a.toIndex !== void 0 && b.toIndex !== void 0)\n    return a.toIndex - b.toIndex;\n  if (a.fromIndex !== void 0 && b.fromIndex !== void 0)\n    return a.fromIndex - b.fromIndex;\n  if (a.fromIndex !== void 0 && b.toIndex !== void 0)\n    return -1;\n  if (a.toIndex !== void 0 && b.fromIndex !== void 0)\n    return 1;\n  throw new Error(\"invalid item diff comparison\");\n}\nfunction deletePositionInIndex(index, key, pos) {\n  const positions = index.get(key);\n  deleteArrayValue(positions, pos), positions.length === 0 && index.delete(key);\n}\nfunction deleteArrayValue(arr, value) {\n  const idx = arr.indexOf(value);\n  if (idx === -1) throw new Error(\"value not found\");\n  arr.splice(idx, 1);\n}\nfunction indexByKey(arr) {\n  const index = /* @__PURE__ */ new Map(), keys = [], length = arr.length;\n  for (let i = 0; i < length; i++) {\n    const item = arr.at(i);\n    let key = null;\n    switch (item.type) {\n      case \"string\":\n        key = `s${item.value}`;\n        break;\n      case \"number\":\n        key = item.value;\n        break;\n      case \"boolean\":\n        key = item.value;\n        break;\n      case \"null\":\n        key = \"n\";\n        break;\n      case \"object\":\n        {\n          const keyField = item.get(\"_key\");\n          if (keyField && keyField.type === \"string\" && (key = `k${keyField.value}`, index.has(key)))\n            return;\n        }\n        break;\n    }\n    if (key === null) return;\n    keys.push(key);\n    let positions = index.get(key);\n    positions || (positions = [], index.set(key, positions)), positions.push(i);\n  }\n  return { keys, index };\n}\nfunction removedArray(input, toValue, options) {\n  return {\n    type: \"array\",\n    action: \"removed\",\n    isChanged: !0,\n    fromValue: input.value,\n    toValue,\n    annotation: input.annotation,\n    get items() {\n      const items = [];\n      for (let i = 0; i < input.length; i++) {\n        const item = input.at(i);\n        items.push({\n          fromIndex: i,\n          toIndex: void 0,\n          hasMoved: !1,\n          diff: removedInput(item, void 0),\n          annotation: input.annotationAt(i)\n        });\n      }\n      return replaceProperty(this, \"items\", items);\n    }\n  };\n}\nfunction addedArray(input, fromValue, options) {\n  return {\n    type: \"array\",\n    action: \"added\",\n    isChanged: !0,\n    fromValue,\n    toValue: input.value,\n    annotation: input.annotation,\n    get items() {\n      const items = [];\n      for (let i = 0; i < input.length; i++) {\n        const item = input.at(i);\n        items.push({\n          fromIndex: void 0,\n          toIndex: i,\n          hasMoved: !1,\n          diff: addedInput(item, void 0),\n          annotation: input.annotationAt(i)\n        });\n      }\n      return replaceProperty(this, \"items\", items);\n    }\n  };\n}\nconst ignoredFields = /* @__PURE__ */ new Set([\"_id\", \"_type\", \"_createdAt\", \"_updatedAt\", \"_rev\", \"_weak\"]);\nfunction diffObject(fromInput, toInput, options) {\n  const fields = {};\n  let isChanged = !1;\n  for (const key of fromInput.keys) {\n    if (ignoredFields.has(key)) continue;\n    const fromField = fromInput.get(key), toField = toInput.get(key);\n    if (toField) {\n      const fieldDiff = diffInput(fromField, toField, options);\n      fields[key] = fieldDiff, fieldDiff.isChanged && (isChanged = !0);\n    } else\n      fields[key] = removedInput(fromField, void 0), isChanged = !0;\n  }\n  for (const key of toInput.keys) {\n    if (ignoredFields.has(key) || fromInput.get(key)) continue;\n    const toField = toInput.get(key);\n    fields[key] = addedInput(toField, void 0), isChanged = !0;\n  }\n  const fromValue = fromInput.value, toValue = toInput.value;\n  return isChanged ? {\n    type: \"object\",\n    action: \"changed\",\n    isChanged: !0,\n    fromValue,\n    toValue,\n    fields,\n    annotation: toInput.annotation\n  } : {\n    type: \"object\",\n    action: \"unchanged\",\n    isChanged: !1,\n    fromValue,\n    toValue,\n    fields\n  };\n}\nfunction removedObject(input, toValue, options) {\n  return {\n    type: \"object\",\n    action: \"removed\",\n    isChanged: !0,\n    fromValue: input.value,\n    toValue,\n    annotation: input.annotation,\n    get fields() {\n      const fields = {};\n      for (const key of input.keys) {\n        const value = input.get(key);\n        fields[key] = removedInput(value, void 0);\n      }\n      return replaceProperty(this, \"fields\", fields);\n    }\n  };\n}\nfunction addedObject(input, fromValue, options) {\n  return {\n    type: \"object\",\n    action: \"added\",\n    isChanged: !0,\n    fromValue,\n    toValue: input.value,\n    annotation: input.annotation,\n    get fields() {\n      const fields = {};\n      for (const key of input.keys) {\n        const value = input.get(key);\n        fields[key] = addedInput(value, void 0);\n      }\n      return replaceProperty(this, \"fields\", fields);\n    }\n  };\n}\nfunction diffNumber(fromInput, toInput, options) {\n  const fromValue = fromInput.value, toValue = toInput.value, type = fromInput.type;\n  return fromValue === toValue ? {\n    type,\n    action: \"unchanged\",\n    fromValue,\n    toValue,\n    isChanged: !1\n  } : {\n    type: fromInput.type,\n    action: \"changed\",\n    isChanged: !0,\n    fromValue,\n    toValue,\n    annotation: toInput.annotation\n  };\n}\nfunction diffBoolean(fromInput, toInput, options) {\n  const fromValue = fromInput.value, toValue = toInput.value, type = fromInput.type;\n  return fromValue === toValue ? {\n    type,\n    action: \"unchanged\",\n    fromValue,\n    toValue,\n    isChanged: !1\n  } : {\n    type: fromInput.type,\n    action: \"changed\",\n    isChanged: !0,\n    fromValue,\n    toValue,\n    annotation: toInput.annotation\n  };\n}\nfunction diffString(fromInput, toInput, options) {\n  const fromValue = fromInput.value, toValue = toInput.value;\n  return fromValue === toValue ? {\n    type: \"string\",\n    action: \"unchanged\",\n    isChanged: !1,\n    fromValue,\n    toValue,\n    segments: [{ type: \"stringSegment\", action: \"unchanged\", text: fromValue }]\n  } : {\n    type: \"string\",\n    action: \"changed\",\n    isChanged: !0,\n    fromValue,\n    toValue,\n    annotation: toInput.annotation,\n    // Compute and memoize string segments only when accessed\n    get segments() {\n      const segments = buildSegments(fromInput, toInput);\n      return replaceProperty(this, \"segments\", segments);\n    }\n  };\n}\nfunction buildSegments(fromInput, toInput) {\n  const segments = [], dmpDiffs = (0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.cleanupSemantic)((0,_sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.makeDiff)(fromInput.value, toInput.value));\n  let fromIdx = 0, toIdx = 0;\n  for (const [op, text] of dmpDiffs)\n    switch (op) {\n      case _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.DIFF_EQUAL:\n        segments.push({ type: \"stringSegment\", action: \"unchanged\", text }), fromIdx += text.length, toIdx += text.length;\n        break;\n      case _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.DIFF_DELETE:\n        for (const segment of fromInput.sliceAnnotation(fromIdx, fromIdx + text.length))\n          segments.push({\n            type: \"stringSegment\",\n            action: \"removed\",\n            text: segment.text,\n            annotation: segment.annotation\n          });\n        fromIdx += text.length;\n        break;\n      case _sanity_diff_match_patch__WEBPACK_IMPORTED_MODULE_0__.DIFF_INSERT:\n        for (const segment of toInput.sliceAnnotation(toIdx, toIdx + text.length))\n          segments.push({\n            type: \"stringSegment\",\n            action: \"added\",\n            text: segment.text,\n            annotation: segment.annotation\n          });\n        toIdx += text.length;\n        break;\n      default:\n        throw new Error(`Unhandled diff-match-patch operation \"${op}\"`);\n    }\n  return segments;\n}\nfunction removedString(input, toValue, options) {\n  return {\n    type: \"string\",\n    action: \"removed\",\n    isChanged: !0,\n    fromValue: input.value,\n    toValue,\n    annotation: input.annotation,\n    get segments() {\n      const segments = input.sliceAnnotation(0, input.value.length).map((segment) => ({ type: \"stringSegment\", action: \"removed\", ...segment }));\n      return replaceProperty(this, \"segments\", segments);\n    }\n  };\n}\nfunction addedString(input, fromValue, options) {\n  return {\n    type: \"string\",\n    action: \"added\",\n    isChanged: !0,\n    fromValue,\n    toValue: input.value,\n    annotation: input.annotation,\n    get segments() {\n      const segments = input.sliceAnnotation(0, input.value.length).map((segment) => ({ type: \"stringSegment\", action: \"added\", ...segment }));\n      return replaceProperty(this, \"segments\", segments);\n    }\n  };\n}\nfunction diffTypeChange(fromInput, toInput, options) {\n  return {\n    type: \"typeChange\",\n    action: \"changed\",\n    isChanged: !0,\n    fromType: fromInput.type,\n    fromValue: fromInput.value,\n    fromDiff: removedInput(fromInput, void 0),\n    toType: toInput.type,\n    toValue: toInput.value,\n    toDiff: addedInput(toInput, void 0),\n    annotation: toInput.annotation\n  };\n}\nfunction diffInput(fromInput, toInput, options = {}) {\n  return fromInput.type !== toInput.type ? fromInput.type === \"null\" ? addedInput(toInput, null) : toInput.type === \"null\" ? removedInput(fromInput, null) : diffTypeChange(fromInput, toInput) : diffWithType(fromInput.type, fromInput, toInput, options);\n}\nfunction diffWithType(type, fromInput, toInput, options) {\n  switch (type) {\n    case \"null\":\n      return {\n        type: \"null\",\n        action: \"unchanged\",\n        isChanged: !1,\n        toValue: null,\n        fromValue: null\n      };\n    case \"boolean\":\n      return diffBoolean(fromInput, toInput);\n    case \"number\":\n      return diffNumber(fromInput, toInput);\n    case \"string\":\n      return diffString(fromInput, toInput);\n    case \"array\":\n      return diffArray(fromInput, toInput, options);\n    case \"object\":\n      return diffObject(fromInput, toInput, options);\n    default:\n      throw new Error(`Unhandled diff type \"${type}\"`);\n  }\n}\nfunction removedInput(input, toValue, options) {\n  switch (input.type) {\n    case \"null\":\n      return {\n        type: \"null\",\n        action: \"removed\",\n        isChanged: !0,\n        fromValue: null,\n        toValue,\n        annotation: input.annotation\n      };\n    case \"boolean\":\n      return {\n        type: \"boolean\",\n        action: \"removed\",\n        isChanged: !0,\n        fromValue: input.value,\n        toValue,\n        annotation: input.annotation\n      };\n    case \"number\":\n      return {\n        type: \"number\",\n        action: \"removed\",\n        isChanged: !0,\n        fromValue: input.value,\n        toValue,\n        annotation: input.annotation\n      };\n    case \"string\":\n      return removedString(input, toValue);\n    case \"array\":\n      return removedArray(input, toValue);\n    case \"object\":\n      return removedObject(input, toValue);\n    default:\n      throw new Error(\"Unhandled diff type\");\n  }\n}\nfunction addedInput(input, fromValue, options) {\n  switch (input.type) {\n    case \"null\":\n      return {\n        type: \"null\",\n        action: \"added\",\n        isChanged: !0,\n        fromValue,\n        toValue: null,\n        annotation: input.annotation\n      };\n    case \"boolean\":\n      return {\n        type: \"boolean\",\n        action: \"added\",\n        isChanged: !0,\n        fromValue,\n        toValue: input.value,\n        annotation: input.annotation\n      };\n    case \"number\":\n      return {\n        type: \"number\",\n        action: \"added\",\n        isChanged: !0,\n        fromValue,\n        toValue: input.value,\n        annotation: input.annotation\n      };\n    case \"string\":\n      return addedString(input, fromValue);\n    case \"array\":\n      return addedArray(input, fromValue);\n    case \"object\":\n      return addedObject(input, fromValue);\n    default:\n      throw new Error(\"Unhandled diff type\");\n  }\n}\nclass ArrayWrapper {\n  type = \"array\";\n  length;\n  value;\n  annotation;\n  elements = [];\n  constructor(value, annotation) {\n    this.annotation = annotation, this.value = value, this.length = value.length;\n  }\n  at(idx) {\n    if (idx >= this.length) throw new Error(\"out of bounds\");\n    return this.elements[idx] || (this.elements[idx] = wrap(this.value[idx], this.annotation));\n  }\n  annotationAt() {\n    return this.annotation;\n  }\n}\nclass BasicWrapper {\n  type;\n  value;\n  annotation;\n  constructor(type, value, annotation) {\n    this.type = type, this.value = value, this.annotation = annotation;\n  }\n}\nclass ObjectWrapper {\n  type = \"object\";\n  value;\n  keys;\n  annotation;\n  fields = {};\n  constructor(value, annotation) {\n    this.value = value, this.annotation = annotation, this.keys = Object.keys(value);\n  }\n  get(key) {\n    const input = this.fields[key];\n    if (input)\n      return input;\n    if (!this.value.hasOwnProperty(key))\n      return;\n    const raw = this.value[key];\n    return this.fields[key] = wrap(raw, this.annotation);\n  }\n}\nclass StringWrapper {\n  type = \"string\";\n  value;\n  annotation;\n  constructor(value, annotation) {\n    this.value = value, this.annotation = annotation;\n  }\n  sliceAnnotation(start, end) {\n    return [{ text: this.value.slice(start, end), annotation: this.annotation }];\n  }\n}\nfunction wrap(input, annotation) {\n  if (Array.isArray(input))\n    return new ArrayWrapper(input, annotation);\n  if (input === null)\n    return new BasicWrapper(\"null\", input, annotation);\n  const type = typeof input;\n  switch (type) {\n    case \"number\":\n      return new BasicWrapper(type, input, annotation);\n    case \"boolean\":\n      return new BasicWrapper(type, input, annotation);\n    case \"object\":\n      return new ObjectWrapper(input, annotation);\n    case \"string\":\n      return new StringWrapper(input, annotation);\n    default:\n      throw new Error(`cannot wrap value of type: ${type}`);\n  }\n}\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/@sanity+diff@3.99.0/node_modules/@sanity/diff/lib/index.mjs\n");

/***/ })

};
;